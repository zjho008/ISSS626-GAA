---
title: "In-class Exercise 2"
author: Ho Zi Jun
date: "Sep 2, 2024"
date-modified: "last-modified"
number-sections: true
number-offset: 1
execute:
  eval: true
  echo: true
  message: false
  freeze: true
editor: visual
---

# Spatial Point Pattern Analysis

## Issue 1: Installing maptools

**maptools** is already retired and binary is removed from CRAN. However, we can download it from [Posit Public Package Manager](https://packagemanager.posit.co/client/#/repos/cran/setup?snapshot=2023-10-13&distribution=windows&r_environment=ide) snapshots by using the code chunk below.

```{r}
#| eval: FALSE
install.packages("maptools",
                 repos = "https://packagemanager.posit.co/cran/2023-10-13")
```

However, after installation is completed it is important to note the usage of code chunk below to avoid **maptools** from being re-downloaded and being installed repetitively every time the Quarto document has been rendered.

![](ss.png)


## Loading R packages

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
```

## Issue 2: Creating coastal outline

In **sf** package, there are two functions that allow us to combine multiple simple features into one simple features. They are [`st_combine()`](https://r-spatial.github.io/sf/reference/geos_combine.html) and `st_union()`.

-   `st_combine()` returns a single, combined geometry, with no resolved boundaries; returned geometries may well be invalid.

-   If y is missing, `st_union(x)` returns a single geometry with resolved boundaries, else the geometries for all union-ed pairs of x\[i\] and y\[j\].

```{r}
#| output: false
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz_sf <- st_read(dsn = "data", layer="MP14_SUBZONE_WEB_PL")
```


## Working with `st_union()`

In code chunk below, `st_union()` is used to derive the coastal outline sf tibble data.frame

```{r}
sg_sf <- mpsz_sf %>%
  st_union()
```

*sg_sf* will look similar to the figure shown below using the following code chunk:

```{r}
plot(sg_sf)
```
## spatstat package

[**spatstat**](https://spatstat.org/) R package is a comprehensive open-source toolbox for analysing Spatial Point Patterns. It focuses on two-dimensional point patterns, including multi-type or marked points, in any spatial region.

## spatstat

### spatstat sub-packages

-   The [**spatstat**](https://cran.r-project.org/web/packages/spatstat/index.html) package now contains only documentation and introductory material. It provides beginnerâ€™s introductions, vignettes, interactive demonstration scripts, and a few help files summarising the package.
-   The [**spatstat.data**]() package now contains all the datasets for spatstat.
-   The [**spatstat.utils**](https://cran.r-project.org/web/packages/spatstat.utils/index.html) package contains basic utility functions for spatstat.
-   The [**spatstat.univar**](https://cran.r-project.org/web/packages/spatstat.univar/spatstat.univar.pdf) package contains functions for estimating and manipulating probability distributions of one-dimensional random variables.
-   The [**spatstat.sparse**](https://cran.r-project.org/web/packages/spatstat.sparse/spatstat.sparse.pdf) package contains functions for manipulating sparse arrays and performing linear algebra.
-   The [**spatstat.geom**](https://cran.r-project.org/web/packages/spatstat.geom/index.html) package contains definitions of spatial objects (such as point patterns, windows and pixel images) and code which performs geometrical operations.
-   The [**spatstat.random**](https://cran.r-project.org/web/packages/spatstat.random/index.html) package contains functions for random generation of spatial patterns and random simulation of models.
-   The [**spatstat.explore**](https://cran.r-project.org/web/packages/spatstat.explore/index.html) package contains the code for exploratory data analysis and nonparametric analysis of spatial data.
-   The [**spatstat.model**](https://cran.r-project.org/web/packages/spatstat.model/index.html) package contains the code for model-fitting, model diagnostics, and formal inference.
-   The [**spatstat.linnet**](https://cran.r-project.org/web/packages/spatstat.linnet/index.html) package defines spatial data on a linear network, and performs geometrical operations and statistical analysis on such data.

## Creating ppp objects from sf data.frame

Working with sf data.frame

In the code chunk below, [`as.ppp()`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/as.ppp.html) of [**spatstat.geom**](https://cran.r-project.org/web/packages/spatstat.geom/spatstat.geom.pdf) package is used to derive a **ppp** object layer directly from a sf tibble data.frame.

```{r}
childcare_ppp <- as.ppp(childcare_sf)
plot(childcare_ppp)
```
`summary()` function is used to reveal properties of the ppp object created

```{r}
summary(childcare_ppp)
```

## Creating ***owin*** object from sf data.frame

The code chunk `as.owin()` of **spatstat.geom** is used to create an **owin** object class from polygon sf tibble data.frame.

```{r}
sg_owin <- as.owin(sg_sf)
plot(sg_owin)
```


```{r}
summary(sg_owin)
```
## Combining the point events object and owin object

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

Following which the output combines both the point and polygon feature in one ppp object class as shown in the code chunk below.

```{r}
plot(childcareSG_ppp)
```

## Kernel Density Estimation of Spatial Point Events

Code chunk below is used to re-scale the unit of measurement from metres to kilometres before KDE is performed.

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
```

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km,
                                             method = "kernel")

plot(kde_childcareSG_adaptive)
```
## Kernel Density Estimation

The code chunk shows two different ways to convert KDE output into grid objects

::: panel-tabset
### maptools method

maptool must be installed for this method

```{r}
par(bg = '#E4D5C9')
```


```{r}
gridded_kde_childcareSG_ad <- maptools::as.SpatialGridDataFrame.im(
  kde_childcareSG_adaptive)
spplot(gridded_kde_childcareSG_ad)
```
### spatstat.geom method

```{r}
gridded_kde_childcareSG_ad <- as(kde_childcareSG_adaptive,
                                 "SpatialGridDataFrame")

spplot(gridded_kde_childcareSG_ad)
```
Both methods have simialr or otherwise the same results however usage if spatstat.geom is preferred as maptools has been retired
:::


## Monte Carlo Simulation

::: callout-tip
## Tip
In order to ensure reproducibility, it is important to include the code chunk below before using spatial *spatstat* functions involving Monte Carlo simulation

Without doing so f values for instance might change each time the code chunk is ran.

```{r}
set.seed(1234)
```
:::

## Geospatial Analytics for Social Good: Thailand Road Accident Case Study

### Background

-   [Road traffic injuries](https://www.who.int/news-room/fact-sheets/detail/road-traffic-injuries), WHO.
-   [Road traffic deaths and injuries in Thailand](https://cdn.who.int/media/docs/default-source/thailand/roadsafety/overview-en-final-25-7-19.pdf?sfvrsn=f9d7a862_2)

The study area comprises of the [Bangkok Metropolitan Region](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region).

::: callout-note
Projected coordinate system of Thailand is **WGS 84 / UTM zone 47N** and the EPSG code is [32647](https://epsg.io/32647).
:::

## The datasets

For this case study, three basic data sets are needed, they are:

-   [Thailand Road Accident \[2019-2022\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle

-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.

-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.

## Importing the Traffic Accident Data

Importing the downloaded accident data into R environment and saving the output as an sf tibble data.frame.

```{r}
rdacc_sf <- read_csv("data/Thailand/archive/thai_road_accident_2019_2022.csv") %>%
  filter(!is.na(longitude) & longitude != "",
         !is.na(latitude) & latitude != "") %>%
  st_as_sf(coords = c(
    "longitude", "latitude"),
    crs = 4326) %>%
  st_transform(crs = 32647)
```
## Visualising The Accident Data

 Importing the ACLED data into R environment as an sf tibble data.frame.

```{r}
#| eval: false
#| echo: false
tmap_mode("plot")
acled_sf %>%
  filter(year == 2023 |
         event_type == "Political violence") %>%
  tm_shape() +
  tm_dots()
tmap_mode("plot")
```


