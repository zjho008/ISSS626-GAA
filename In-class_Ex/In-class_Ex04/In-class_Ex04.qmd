---
title: "In-class Exercise 4"
author: Ho Zi Jun
date: "Sep 16, 2024"
date-modified: "last-modified"
number-sections: true
number-offset: 3
execute:
  eval: true
  echo: true
  message: false
  freeze: true
editor: visual
---

# Geographically Weighted Summary Statistics - gwModel methods

## Loading R packages

IIn this in-class exercise, sf, spdep, tmap, tidyverse, knitr and GWmodel will be used.

```{r}
pacman::p_load(sf, tmap, tidyverse, knitr, GWmodel, ggstatsplot)
```

## Additional Package (GWmodel)

[GWmodel](https://cran.r-project.org/web/packages/GWmodel/index.html)

[Package `GWmodel`](https://cran.r-project.org/web/packages/GWmodel/GWmodel.pdf)

Focus is on the Geographically weighted summary statistics (GWSS) which helps to determine the optimal cut-off metrics

bw.gwr - e.g. look into data and recommend appropriate bandwidth for cut off adaptive - optimum number of neighbours for statistical significance.

## Data Import and Preparation

For this in-class exercise, Hunan shapefile and Hunan_2012 data file will be used.

::: panel-tabset
## Importing Hunan shapefile
```{r}
hunan_sf <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```
Note CRS is not defined when importing the data and the CRS is WGS84.

## Importign the Hunan_2012 table
```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```
Note: read_csv() is from the tidyverse package
:::

### Joining Hunan and Hunan_2012

```{r}
hunan_sf <- left_join(hunan_sf ,hunan2012) %>%
  select(1:3, 7, 15, 16, 31, 32)
```
NAME_2, ID_3, NAME_3 (name of county), COUNTY, GDP, 26 - GIO, 31- Agri, 32- Service

A selection is done in the code chunk above to select variables that will be used for analysis

For relational joins there has to be a common identifier - values have to be identical

> Good practice: to check through the name and the values/fields to ensure they are the same before performing the join. In this case from observation County has the same variable name. For this exercise the COUNTY variable was added into the hunan_2012 dataset. Otherwise, NAME_3 will have to be used and argument `JOIN_BY()` has to be used.

E.g. the website from URA code to convert from mix of upper case and lower case (data from singstat) to all upper case before joining with the URA data

## Mapping GDPPC

A choropleth map showing the geographic distribution of GDPPC of Hunan Province.

```{r fig.width=12, fig.height=8}
basemap <- tm_shape(hunan_sf) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan_sf, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## Converting to SpatialPolygon Data.Frame

To use GWmodel the file has to be converted from SF to SP

```{r}
hunan_sp <- hunan_sf %>%
  as_Spatial()
```

A list is given instead of a data table.

> class(hunan_sp) \[1\] "SpatialPolygonsDataFrame" attr(,"package") \[1\] "sp"

## Geographically Weighted Summary Statistics with adaptative bandwidth

### Determining adaptive bandwidth

::: panel-tabset
## Cross Validation - "taking one out and putting one back"

```{r}
bw_CV <- bw.gwr(GDPPC ~ 1, # arbitrary number 1 as independent variable
             data = hunan_sp, # hunan data
             approach = "CV", # cross validation is used
             adaptive = TRUE,
             kernel = "bisquare",
             longlat = T) # value taken in is in KM
```
```{r}
bw_CV
```

The score will eventually stop and the optimal number of neighbours is 22. This is also the same result if AIC is used. However, note that this will not always be the case for both approaches. 

## AIC

```{r}
bw_AIC <- bw.gwr(GDPPC ~ 1, 
             data = hunan_sp, 
             approach = "AIC", 
             adaptive = TRUE,
             kernel = "bisquare",
             longlat = T)
```
```{r}
bw_AIC
```
Change rate will stop and that is where the optimal value is determined Statistical method
:::

## Geographically Weighted Summary Statistics with adaptive bandwidth

### Computing geographically weighted summary statistics

```{r}
gwstat <- gwss(data = hunan_sp,
               vars = "GDPPC",
               bw = bw_AIC,
               kernel = "bisquare",
               adaptive = TRUE,
               longlat = T)
```

### Preparing the output data

The code chunk below is used to extract SDF data table from gwss object output from `gwss()`. It will be converted into data.frame by using `as.data.frame()`.

```{r}
gwstat_df <- as.data.frame(gwstat$SDF)
```

Next, `cbind()` is used to append the newly derived data.frame onto `hunan_sf` sf data.frame.

```{r}
hunan_gstat <- cbind(hunan_sf, gwstat_df)
```

## Visualising geographically weighted summary statistics

::: panel-tabset
## The Geographically Weighted Mean

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
tm_shape(hunan_gstat) +
  tm_fill("GDPPC_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Distribution of geographically wieghted mean",
            main.title.position = "center",
            main.title.size = 2.0,
            legend.text.size = 1.2,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```
:::
:::
## The code

```{r}
#| eval: false
tm_shape(hunan_gstat) +
  tm_fill("GDPPC_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Distribution of geographically wieghted mean",
            main.title.position = "center",
            main.title.size = 2.0,
            legend.text.size = 1.2,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```

:::

## Geographically Weighted Summary Statistics with fixed bandwidth

### Determining fixed bandwidth

::: panel-tabset
## Cross Validation

```{r}
bw_CV <- bw.gwr(GDPPC ~ 1,
             data = hunan_sp,
             approach = "CV",
             adaptive = FALSE,
             kernel = "bisquare",
             longlat = T)
```


```{r}
bw_CV
```
Value is in KM - 76 KM

## AIC

```{r}
bw_AIC <- bw.gwr(GDPPC ~ 1, 
             data = hunan_sp, 
             approach = "AIC", 
             adaptive = FALSE,
             kernel = "bisquare",
             longlat = T)
```
```{r}
bw_AIC
```

:::

When using different methods (i.e Adaptive / Fixed) some would give the same answer while some would otherwise give a different answer. So it is a good practice to test out the different methods

In this case the adaptive method is better as the Cross Validation and AIC gives the same output.

## Geographically Weighted Summary Statistics with fixed bandwidth

### Computing geographically weighted summary statistics

```{r}
gwstat <- gwss(data = hunan_sp,
               vars = "GDPPC",
               bw = bw_AIC,
               kernel = "bisquare",
               adaptive = FALSE,
               longlat = T)
```

> Note: that the Kernel, Adaptive and Longlat have to remain the same when doing the calulation

### Preparing the output data

Code chunk below is used to extract **SDF** data table from **gwss** object output from `gwss()`. It will be converted into data.frame by using `as.data.frame()`

```{r}
gwstat_df <- as.data.frame(gwstat$SDF)
```

Next, `cbin*d()` is used to append the newly derived data.frame onto *hunan_sf* sf data.frame

```{r}
hunan_gstat <- cbind(hunan_sf, gwstat_df)
```

::: panel-tabset
## The Geographhically Weighted Mean

```{r}
#| echo: false
tm_shape(hunan_gstat) +
  tm_fill("GDPPC_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Distribution of geographically wieghted mean",
            main.title.position = "center",
            main.title.size = 2.0,
            legend.text.size = 1.2,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```

From the plot it is showing growth at the main cities first whereas the rural areas see slower growth - which is commonly observed in developing countries.

## The code

```{r fig.width=12, fig.height=8}
#| eval: FALSE
tm_shape(hunan_gstat) +
  tm_fill("GDPPC_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) + # or tm_polygons()
  tm_layout(main.title = "Distribution of geographically wieghted mean",
            main.title.position = "center",
            main.title.size = 2.0,
            legend.text.size = 1.2,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```
:::

## Geogrpahically Weighted Correlation with Adaptive bandwidth

> Business Question: Is there any relationship between GDP per capita and Gross Industry Output?

## Conventional Statistical Solution

```{r}
#| code-fold: true
ggscatterstats(
  data = hunan2012, 
  x = Agri, 
  y = GDPPC,
  xlab = "Gross Agriculture Output", ## label for the x-axis
  ylab = "GDP per capita", 
  label.var = County, 
  label.expression = Agri > 10000 & GDPPC > 50000, 
  point.label.args = list(alpha = 0.7, size = 4, color = "grey50"),
  xfill = "#CC79A7", 
  yfill = "#009E73", 
  title = "Relationship between GDP PC and Gross Agriculture Output")
```

From the p-value it can be observed that there is a relatively strong correlation and statistical significance.

### Geospatial analytics solution

::: panel-tabset

## Determining the bandwidth

```{r}
bw <- bw.gwr(GDPPC ~ GIO, 
             data = hunan_sp, 
             approach = "AICc", 
             adaptive = TRUE)
```

## Computing gwCorrelation

```{r}
gwstats <- gwss(hunan_sp, 
                vars = c("GDPPC", "GIO"), 
                bw = bw,
                kernel = "bisquare",
                adaptive = TRUE, 
                longlat = T)
```

:::

### Extracting the result

Code chunk below is used to extract **SDF** data table from **gwss** object output from `gwss()`. It will be converted into data.frame by using `as.data.frame()`.

```{r}
gwstat_df <- as.data.frame(gwstats$SDF) %>%
  select(c(12,13)) %>%
  rename(gwCorr = Corr_GDPPC.GIO,
         gwSpearman = Spearman_rho_GDPPC.GIO)
```

columns 12 and 13 selected - where we see the correlation coefficient.

Next, `cbind()` is used to append the newly derived data.frame onto *hunan_sf* sf data.frame.

```{r}
hunan_Corr <- cbind(hunan_sf, gwstat_df)
```

## Visualising Local Correlation results

Certain areas are not as highly correlated with neighbours while others are more correlated - Geographic view vs statistical solution view.

gwCorr - 0.750 to 0.761

The 1st band not as correlated with its neighbours

Local correlation can also be shown

::: panel-tabset
### Local Correlation Coefficient

```{r}
#| fig-height: 7
#| echo: false
tm_shape(hunan_Corr) +
  tm_fill("gwCorr",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Correlation Coefficient",
            main.title.position = "center",
            main.title.size = 2.0,
            legend.text.size = 1.2,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```

### Local Spearman Coefficient

```{r}
#| fig-height: 7
#| echo: false
tm_shape(hunan_Corr) +
  tm_fill("gwSpearman",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Spearman Rho",
            main.title.position = "center",
            main.title.size = 2.0,
            legend.text.size = 1.2,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```

### The code

::: {style="font-size: 1.50em"}
```{r}
#| eval: false
tm_shape(hunan_Corr) +
  tm_fill("gwSpearman",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Spearman Rho",
            main.title.position = "center",
            main.title.size = 2.0,
            legend.text.size = 1.2,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```
:::
:::

## Learning Pointers

Additional learning on on usage of using GWmodel and approach on using various methods for analyis based on the context and requirement of the task on hand.

e.g. for certain cases – China – for supply chain companies they would need to use road network as opposed to flying as an option . 
