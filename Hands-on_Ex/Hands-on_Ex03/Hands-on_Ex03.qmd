---
title: "Hands-on Exercise 3: Network Constrained Spatial Point Patterns Analysis"
author: "Ho Zi Jun"
date: "Sep 5, 2024"
date-modified: "last-modified"
number-sections: true
number-offset: 3
execute:
  eval: true
  echo: true
  message: false
  freeze: true
editor: source
---

# Advanced Spatial Point Patterns Analysis

## Overview

**Network constrained Spatial Point Patterns Analysis (NetSPAA)** is a collection of spatial point patterns analysis methods specially developed for analysing spatial point events occurring on or alongside networks. The spatial point event can be locations of traffic accidents or childcare centres for example. The network, on the other hand can be a road network or river network.

In this hands-on exercise, it will help to gain hands-on experience on using appropriate functions of **spNetwork** package, mainly:

-   to derive **network kernel density estimation (NKDE)**, and
-   to perform network G-function and K-function analysis

## The Data

In this study, the spatial distribution of childcare centres in [Punggol Planning Area](https://en.wikipedia.org/wiki/Punggol) will be analysed. For the purpose of this study, two geospatial data sets will be used. They are:

-   *Punggol_St*, a line feature geospatial data which stores the road network within Punggol Planning Area.
-   *Punggol_CC*, a point feature geospatial data which stores the location of childcare centres within Punggol Planning Area.

Both data sets are in ESRI shapefile format.

## Installing and launching the R packages

In this hands-on exercise, four R packages will be used, they are:

-   [spNetwork](https://cran.r-project.org/web/packages/spNetwork/index.html), which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices ('listw' objects like in 'spdep' package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.
-   [sf](https://r-spatial.github.io/sf/index.html) package provides functions to manage, process, and manipulate **Simple Features**, in a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons.
-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.
-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.

The code chunk below is used to install and launch the four R packages.

```{r}
pacman::p_load(spNetwork, sf, tmap, tidyverse)
```

## Data Import and Preparation

The code chunk below uses `st_read()` of **sf** package to important Punggol_St and Punggol_CC geospatial data sets into RStudio as sf data frames.

```{r}
network <- st_read(dsn = "data/geospatial",
                   layer = "Punggol_St")
childcare <- st_read(dsn = "data/geospatial",
                     layer = "Punggol_CC")
```

The structure of the output simple features data tables can be examined in RStudio. Alternatively, the code chunk below can be used to print the contents of network and childcare simple feature objects.

::: panel-tabset
## Network

```{r}
network
```

```{r}
st_crs(network)
```

## Childcare

```{r}
childcare
```

```{r}
st_crs(childcare)
```
:::

Upon exploration of the simple feature data table, spNetwork is expecting the geospatial data to contain complete CRS information.

::: callout-note
When using the spNetwork package in R, ensuring that the geospatial data contains complete Coordinate Reference System (CRS) information is crucial for accurate spatial analysis.

-   For instance,verifying the CRS with functions like `st_crs()` for sf objects and doing transformation if necessary with functions like like `st_transform()`to reproject it into a suitable system
:::

> Hence, in the steps above `st_crs()` is used to ensure the correct EPSG code is in place while looking atthe data as well.

## Visualising the Geospatial Data

Before performing analysis, it is a good practice to visualise the geospatial data. There are at least two ways to visualise the geospatial data. One way is by using *plot()* of Base R as shown in the code chunk below.

```{r}
plot(st_geometry(network))
plot(childcare, add = T, col = 'red', pch = 19)
```

The second way to visualise the geospatial data does so with high cartographic quality and in an interactive manner. The mapping function of **tmap** package can be used as shown in the code chunk below.

```{r}
tmap_mode('view')

tm_shape(childcare) +
  tm_dots() +
  tm_shape(network) +
  tm_lines()
tmap_mode('plot')
```

Usage of tmap allows us to plot highly customisable and interactive maps.

## Network KDE (NKDE) Analysis

In this section, NKDE analysis will be performed by using appropriate functions provided in **spNetwork** package.

### Preparing the lixels objects

Before computing NKDE, the Spatial Lines object needs to be cut into lixels with a specified minimal distance. This task can be performed by using [lixelize_lines()](https://jeremygelb.github.io/spNetwork/reference/lixelize_lines.html) of **spNetwork** as shown in the code chunk below.

```{r}
lixels <- lixelize_lines(network,
                         700,
                         mindist = 375)
```

::: callout.note
## Things to learn from the code chunk above

-   The length of a lixel, *lx_length* is set to 700m, and
-   The minimum length of a lixel, *mindist* is set to 375m.

After cut, if the length of the final lixel is shorter than the minimum distance, then it is added to the previous lixel. If NULL, then mindist = maxdist/10. Also note that the segments that are already shorter than the minimum distance are not modified.

> **Note:** There is another function called *lixelize_lines.mc()* which provides multicore support.
:::

### Generating line centre points

Next, *lines_center()* of **spNetwork** will be used to generate a SpatialPointsDataFrame (i.e. samples) with line centre points as shown in the code chunk below.

```{r}
samples <- lines_center(lixels)
```

The points are located at center of the line based on the length of the line.

### Performing NKDE

Now, to compute the NKDE by using the code chunk below.

```{r}
densities <- nkde(network,
                  events = childcare,
                  w = rep(1, nrow(childcare)),
                  samples = samples,
                  kernel_name = "quartic",
                  bw = 300,
                  div = "bw",
                  method = "simple",
                  digits = 1,
                  tol = 1,
                  grid_shape = c(1,1),
                  max_depth = 8,
                  agg = NULL,
                  sparse = TRUE,
                  verbose = FALSE)
```

::: callout-tip
## Thing to learn from the code chunk above

-   *kernel_name* argument indicates that **quartic** kernel is used. The available kernel methods supported by spNetwork are: triangle, gaussian, scaled gaussian, tricube, cosine ,triweight, epanechnikov or uniform.

-   The *method* argument indicates that **simple** method is used to calculate the NKDE. Currently, spNetwork support three popular methods, they are:

    -   **simple** (`method ="simple"`): This first method was presented by Xie et al. (2008) and proposes an intuitive solution. The distances between events and sampling points are replaced by network distances, and the formula of the kernel is adapted to calculate the density over a linear unit instead of an areal unit.
    -   **discontinous** (`method = "discontinuous"`): This method was proposed by Okabe et al (2008), which equally "divides" the mass density of an event at intersections of lixels.
    -   **continous** (`method = "continuous"`). If the discontinuous method is unbiased, it leads to a discontinuous kernel function which is a bit counter-intuitive. Okabe et al (2008) proposed another version of the kernel, that divides the mass of the density at intersection but adjusts the density before the intersection to make the function continuous.
:::

#### Visualisign NKDE

Before we can visualise the NKDE values, thr code chunk below will be used to insert the computed density values (i.e. densities) into *samples* and *lixels* objects as *density* field.

```{r}
samples$density <- densities
lixels$density <- densities
```

Since the svy21 projection system is in metres, the computed density values are very small i.e. 0.0000005. The code chunk below is used to rescale the density values from number of events per metre to number of events per kilometre.

```{r}
# rescaling

samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
```

The code below uses appropriate functions of tmap package to prepare interactive and high cartographic quality map visualisation.

```{r}
tmap_mode(mode = c("view"))
tm_shape(lixels) +
  tm_lines(col = "density") +
  tm_shape(childcare) +
  tm_dots()
tmap_mode("plot")
```

The interactive map above effectively reveals road segments (darker colour) with relatively higher density of childcare centres than road segments with relatively lower density of childcare centres (lighter colour)

## Network Constrained G- and K-Function Analysis

In this section, a complete spatial randomness (CSR) test will be carried out by using *kfunctions()* of **spNetwork** package. The null hypothesis is defined as:

**Ho: The observed spatial point events (i.e distribution of childcare centres) are uniformly distributed over a street network in Punggol Planning Area.**

The CSR test is based on the assumption of the binomial point process which implies the hypothesis that the childcare centres are randomly and independently distributed over the street network.

If this hypothesis is rejected, we may infer that the distribution of childcare centres is spatially interacting and dependent on each other; as a result, they may form non-random patterns, meaning that childcare centres are not randomly distributed.

::: callout-note
K-function measures the number of events found up to a given distance of any particular event.
:::

```{r}
kfun_childcare <- kfunctions(network,
                             childcare,
                             start = 0,
                             end = 1000,
                             step = 50,
                             width = 50,
                             nsim = 99,
                             resolution = 50,
                             verbose = FALSE,
                             conf_int = 0.05)
```

::: callout-tip
## Things to learn from the code chunk above

-   lines: A SpatialLinesDataFrame with the sampling points. The geometries must be in a SpatialLinesDataFrame (it may crash if some geometries are invalid).
-   points: A SpatialPointsDataFrame representing the points on the network. These points will be stamped on the network.
-   start: A double, the start value for evaluating the k and g functions.
-   end: A double, the last value for evaluating the k and g functions.
-   step: A double, the jump between two evaluations of the k and g function.
-   width: The width of each donut for the g-function.
-   nsim: An integer indicating the number of Monte Carlo simulations required. In the above example, 50 simulation was performed. **Note:** most of the time, more simulations are required for inference
-   resolution: When simulating random points on the network, selecting a resolution will greatly reduce the calculation time. When resolution is null the random points can occur everywhere on the graph. If a value is specified, the edges are split according to this value and the random points are selected vertices on the new network.
-   conf_int: A double indicating the width confidence interval (default = 0.05).
:::

The output of *kfunctions()* is a list with the following values:

-   *plotkA*, a ggplot2 object representing the values of the k-function
-   *plotgA*, a ggplot2 object representing the values of the g-function
-   *valuesA*, a DataFrame with the values used to build the plots

Visualising the ggplot2 object of k-function by using the code chunk below.

::: panel-tabset
## K-Function
```{r}
kfun_childcare$plotk
```
The blue line is the empirical network K-function of the childcare centres in the Punggol planning area. 

The grey envelope in the plot represents the confidence bounds (typically from random simulations) for the K-function under a null hypothesis, such as complete spatial randomness (CSR).The grey envelop represents the results of the 50 simulations in the interval 2.5% - 97.5%, meaning 95% of the simulated K-functions fall within this envelope.

Based on observations of the blue line, between the distance of 250m-400m are below the grey area, which suggests a deviation from the expected pattern under the null hypothesis.

We can infer that the childcare centres in Punggol planning area resembles regular patterns at the distance of 250m-400m.

## G-Function
```{r}
kfun_childcare$plotg
```
The observations suggest that the G-function generally supports the hypothesis of randomness, with some signs of regularity at certain distances (150m & 500m mark) where the blue line dips slightly below the lower bound of the grey envelope, indicating that at these specific distances, the childcare centres might exhibit a more regular (dispersed) pattern than expected. No significant clustering is observed.
:::

## References

-   Kam, T.S. (2024). [Network Constrained Spatial Point Patterns Analysis](https://r4gdsa.netlify.app/chap07)
-   [spNetwork: Spatial Analysis on Network](https://cran.r-project.org/web/packages/spNetwork/index.html)
-   [Network Kernel Density Estimate](https://cran.r-project.org/web/packages/spNetwork/vignettes/NKDE.html)
-   [Details about NKDE](https://cran.r-project.org/web/packages/spNetwork/vignettes/NKDEdetailed.html)
-   [Network k Functions](https://cran.r-project.org/web/packages/spNetwork/vignettes/KNetworkFunctions.html)
