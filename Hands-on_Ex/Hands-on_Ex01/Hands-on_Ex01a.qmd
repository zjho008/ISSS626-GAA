---
title: "Hands-on Exercise 1a: Geospatial Data Wrangling with R"
date: "Aug 20, 2024"
date-modified: "last-modified"
format: html
number-sections: true
number-offset: 0
execute:
  warning: false
editor: visual
---

# Geospatial Data Science with R

## Learning Outcomes

Geospatial Data Science is the process of *importing*, *wrangling*, *integrating*, and *processing* geographically referenced data sets. In this hands-on exercise, the goal is to learn how to perform geospatial data science tasks in R by using sf package.

By the end of this hands-on exercise the following competencies should be acquired:

-   installing and loading [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment,
-   importing geospatial data by using appropriate functions of **sf** package,
-   importing aspatial data by using appropriate function of **readr** package,
-   exploring the contents of simple feature data frame by using appropriate **Base R** and **sf** functions,
-   assigning or transforming coordinate systems by using using appropriate *sf* functions,
-   converting an aspatial data into a sf data frame by using appropriate function of **sf** package,
-   performing geoprocessing tasks by using appropriate functions of **sf** package,
-   performing data wrangling tasks by using appropriate functions of **dplyr** package and
-   performing Exploratory Data Analysis (EDA) by using appropriate functions from **ggplot2** package.

> Note: It is encouraged to read the reference guide of each function, especially the input data requirements, syntext and argument option before using them.

## Data Acquisition

Data is key to data analytics which also includes geospatial analytics. Hence, before analysis it is required to assemble the necessary data. For this hands-on exercise the data will be extracted from the following sources:

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)
-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)
-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)
-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)

> Note: This section does not merely constitute to extracting the necessary data sets. It also aims to introduce the usage of publicly available data sets.

### Extracting the geospatial data sets

The following steps have been carried out for extraction of the data sets:

In the `Hands-on_Ex01` folder, a sub-folder called `data` is created. Then, inside the `data` sub-folder, two other sub-folders are created and are named `geospatial` and `aspatial` respectively.

The downloaded zipped files `Master Plan 2014 Subzone Boundary (Web)`, `Pre-Schools Location` and `Cycling Path` are placed into `geospatial` sub-folder and unzipped. The unzipped files are then copied from their respective sub-folders and placed inside the `geospatial` sub-folder.

### Extracting the aspatial data set

The downloaded `listing` data file is extracted. And placed in the `Downloads` folder by cutting and pasting the `listing.csv` file into the `aspatial` sub-folder.

## Getting Started

THe following 2 R packages will be used for this hands-on exercise:

-   **sf** for importing, managing, and processing geospatial data, and
-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.

*Tidyverse* consists of a family of R packages. In this hands-on exercise, the following packages will be used:

-   **readr** for importing csv data,
-   **readxl** for importing Excel worksheet,
-   **tidyr** for manipulating data,
-   **dplyr** for transforming data, and
-   **ggplot2** for visualising data

::: callout-note
The code chunk below uses `p_load()` of pacman package to check if `sf` and `tidyverse` packages are installed in the computer. If they are, then they will be launched into R.
:::

```{r}
pacman::p_load(sf, tidyverse)
```

## Importing Geospatial Data

In this section, the geospatial data is imported into R by using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package:

-   `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format,
-   `CyclingPath`, a line feature layer in ESRI shapefile format, and
-   `PreSchool`, a point feature layer in kml file format.

### Importing polygon feature data in shapefile format

The code chunk below uses *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a polygon feature data frame. Note that when the input geospatial data is in shapefile format, two arguments will be used, namely: `dsn` to define the data path and `layer` to provide the shapefile name.

Also note that no extension such as .shp, .dbf, .prj and .shx are needed.

```{r}
mpsz = st_read(dsn = "data/geospatial",
                  layer = "MP14_SUBZONE_WEB_PL")
```

The message above reveals that the geospatial objects are multipolygon features. There are a total of 323 multipolygon features and 15 fields in `mpsz` simple feature data frame. `mpsz` is in **svy21** projected coordinates systems. The bounding box provides the x extend and y extend of the data.

### Importing polyline feature data in shapefile form

Again, the code chunk below uses *st_read()* function of **sf** package to import `CyclingPath` shapefile into R but as a line feature data frame.

```{r}
cyclingpath = st_read(dsn = "data/geospatial",
                         layer = "CyclingPathGazette")
```

The message above reveals that the geospatial objects are linestring features. There are a total of 3138 features and 2 fields in `cyclingpath` linestring feature data frame and it is in **svy21** projected coordinates system as well.

### Importing GIS data in kml format

The `PreSchoolsLocation` is in kml format. The code chunk below will be used to import the kml file into R. Notice that in the code chunk below, the complete path and the kml file extension were provided.

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

The message above reveals that `preschool` is a point feature data frame. There are a total of 2290 features and 2 fields. It is different from the previous two simple feature data frames, preschool is in **wgs84** coordinates system.

## Checking the Content of A Simple Feature Data Frame

In this sub-section, it illustrates different ways to retrieve information related to the content of a simple feature data frame.

### Working with *st_geometry()*

The column in the sf data.frame that contains the geometries is a list, of class `sfc`. The geometry list-column can be retrieved in this case by mpsz\$geom or mpsz\[\[1\]\], but more a generic way uses *st_geometry()* as shown in the code chunk below.

```{r}
st_geometry(mpsz)
```

> Note: Note that the print only displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.

### Working with *glimpse()*

Besides the basic feature information, more can be learnt about the associated attribute information in the data frame. This where *glimpse()* of **dplyr** is handy as shown in the code chunk below.

```{r}
glimpse(mpsz)
```

The *glimpse()* report reveals the data type of each fields. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_Length` and `SHAPE_Area` fields are all in **double-precision values**.

### Working with *head()*

At times, to reveal the complete information of a feature object, [*head()*](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/head) of Base R can be used.

```{r}
head(mpsz, n=5)
```

> Note: A useful argument of *head()* is that it allows the user to select the number of records to display (i.e. the n argument).

## Plotting the Geospatial Data

In geospatial data science, only ooking at the feature information is not enough. We are also interested in visualising the geospatial features. This is when *plot()* of R Graphic comes in very handy as shown in the code chunk below.

```{r}
plot(mpsz)
```

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. However, the geometry can only be chosen for plotting by using the code chunk below.

```{r}
plot(st_geometry(mpsz))
```

Alternatively, the plot of the sf object can also be chosen by using a **specific attribute** as shown in the code chunk below.

::: panel-tabset
## "PLN_AREA_N"

```{r}
plot(mpsz["PLN_AREA_N"])
```

## "PLN_AREA_C"

```{r}
plot(mpsz["PLN_AREA_C"])
```

## "REGION_C"

```{r}
plot(mpsz["REGION_C"])
```
:::

> Note: *plot()* is meant for plotting the geospatial object for quick observation. For a high cartographic quality plot, other R package such as tmap should be used.

## Working with Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, both geospatial data have to be projected using similar coordinate system.

In this section, it will illustrate how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called **projection transformation**.

### Assigning EPSG code to a simple feature data frame

A common issue that can happen during importing process of geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

This is an example the coordinate system of `mpsz` simple feature data frame by using *st_crs()* of sf package as shown in the code chunk below.

```{r}
st_crs(mpsz)
```

Although the `mpsz` data frame is projected in svy21 but upon examination at the end of the print, it indicates that the EPSG is *9001*. This is a wrong EPSG code because the correct EPSG code for svy21 should be [***3414***](https://epsg.io/3414).

In order to assign the correct EPSG code to the `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Now, to inspect the CSR again by using the code chunk below.

```{r}
st_crs(mpsz3414)
```

Notice that the EPSG code is **3414** now.

### Transforming the projection of preschool from wgs84 to svy21

In geospatial analytics, it is very common to transform the original data from geographic coordinate system to projected coordinate system. This is because *geographic coordinate system* is not appropriate if the analysis requires the use of distance or/and area measurements.

Examining the preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.

```{r}
st_geometry(preschool)
```

Hence, this is a scenario that illustrates *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used.

This is due to the fact that a re-projection is needed for `preschool` from one coordinate system to another coordinate system mathematically.

The projection transformation is performed by using the code chunk below.

```{r}
preschool3414 <- st_transform(preschool,
                              crs = 3414)
```

> Note: In practice, we will need to find out the appropriate **project coordinate system** to use before performing the projection transformation.

The content of preschool3414 sf data frame is displayed again with the code chunk below:

```{r}
st_geometry(preschool3414)
```

::: callout-note
## Note

Notice that it is in svy21 projected coordinate system now. Furthermore, referencing to Bounding box:, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.
:::

## Importing and Converting An Aspatial Data

In practice, it is not unusual that we will come across data such as `listing` of Inside Airbnb. We call this kind of data aspatial data. Mainly because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.

In this section, it will illustrate how to import an aspatial data into R environment and save it as a tibble data frame. Next, it will be converted it into a simple feature data frame.

For the purpose of this exercise, the `listings.csv` data downloaded from AirBnb will be used.

### Importing the aspatial data

Since `listings` data set is in csv file format, [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package will be used to import `listing.csv` as shown in the code chunk below. The output R object is called `listings` and it is a [tibble data frame](https://r4ds.had.co.nz/tibbles.html).

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

After importing the data file into R, it is important to examine if the data file has been imported correctly.

The code chunk below shows *list()* of Base R instead of *glimpse()* to do the job.

```{r}
list(listings)
```

The output reveals that `listing` tibble data frame consists of 3540 rows and 18 columns. Two useful fields we are going to use in the next phase are `latitude` and `longitude`. Note that they are in decimal degree format. As a best guess, the assumption is that the data is in wgs84 Geographic Coordinate System.

### Creating a simple feature data frame from an aspatial data frame

The code chunk below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages

```{r}
listings_sf <- st_as_sf(listings,
                        coords = c("longitude", "latitude"),
                        crs = 4326) %>%
  st_transform(crs = 3414)
```

Things to learn from the arguments above:

-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.
-   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country's ESPG code by referring to [epsg.io](https://epsg.io/).
-   *%\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

Now to examine the content of this newly created `listings_sf` simple feature data frame.

```{r}
glimpse(listings_sf)
```

Table above shows the content of `listing_sf`. Notice that a new column called `geometry` has been added into the data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame.

## Geoprocessing with sf package

Besides providing functions to handle (i.e. importing, exporting, assigning projection, transforming projection) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

In this section, it will provide learning on how to perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

### Buffering

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath,
                            dist = 5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below:

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

**Task Accomplished!**

### Point-in-polygon count

The scenario:

A pre-school service group want to find out the number of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at once. Firstly, identifying pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414))
```

> **Warning**: This should not confused with [st_intersection()](https://r-spatial.github.io/sf/reference/geos_binary_ops.html).

The summary statistics of the newly derived *PreSch Count* field can be checked by using *summary()* as shown in the code chunk below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-schools, the [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

> **Attempt: Calculate the density of pre-school by planning subzone.**

The solution:

Firstly, the code chunk below uses [*st_area()*](https://r-spatial.github.io/sf/reference/geos_measures.html) of **sf** package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next, [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html) of [**dplyr**](https://dplyr.tidyverse.org/index.html) package is used to compute the density by using the code chunk below:

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

Similarly, the planning subzone with the highest density of pre-schools can be listed using the [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Density`)
```

## Exploratory Data Analysis (EDA)

In practice, most geospatial analytics start with Exploratory Data Analysis(EDA). In this section, it demonstrates how to use appropriate [ggplot2](https://ggplot2.tidyverse.org/) functions to create functional and yet truthful statistical graphs for EDA purposes.

Firstly, we will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, *hist()* of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz3414$`PreSch Density`)
```

Although the syntax is very easy to use the output however, is far from meeting publication quality. Furthermore, the function has limited room for further customisation.

In the code chunk below, appropriate **ggplot2** functions will be used.

```{r}
ggplot(data = mpsz3414,
       aes(x = as.numeric(`PreSch Density`))) +
  geom_histogram(bins = 20,
                 color = "black",
                 fill = "light blue") +
  labs(title = "Are pre-schools evenly distributed in Singapore ?",
       subtitle = "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
       x = "Pre-school density (per km sq)",
       y = "Frequency")
```

> **Attempt: Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.**

```{r}
ggplot(data = mpsz3414,
       aes(y = `PreSch Count`,
           x = as.numeric(`PreSch Density`))) +
  geom_point(color = "black",
             fill = "light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      y = "Pre-school count",
      x = "Pre-school density (per km sq)")
```
