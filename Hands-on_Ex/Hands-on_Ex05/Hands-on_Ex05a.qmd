---
title: "Hands-on Exercise 5a: Spatial Weights and Applications"
author: "Ho Zi Jun"
date: "Sep 20, 2024"
date-modified: "last-modified"
number-sections: true
execute:
  eval: true
  echo: true
  message: false
  freeze: true
editor: source
---

## Overview

In this hands-on exercise, we will learn how to compute Global Measures of Spatial Autocorrelation (GMSA) by using **spdep** package. By the end to this hands-on exercise, we will be able to:

-   import geospatial data using appropriate function(s) of **sf** package,
-   import csv file using appropriate function of **readr** package,
-   perform relational join using appropriate join function of **dplyr** package,
-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of **spdep** package,
    -   plot Moran scatterplot,
    -   compute and plot spatial correlogram using appropriate function of **spdep** package.
-   provide statistically correct interpretation of GSA statistics.

## Getting Started

### The Research Question

In the realm of spatial planning, achieving a balanced distribution of development across regions is crucial. Our analysis will determine the uniformity of development distribution within a specified area. If *uneven*, we will investigate potential spatial clustering and identify their locations.

We will specifically analyze the spatial distribution of GDP per capita within [Hunan Provice](https://en.wikipedia.org/wiki/Hunan), People Republic of China.

### The Study Area and Data

Two data sets will be used in this hands-on exercise, they are:

-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.
-   Hunan_2012.csv: This csv file contains selected Hunan's local development indicators in 2012.

### Setting the Analytical Toolls

Before we get started, we need to ensure that **spdep**, **sf**, **tmap** and **tidyverse** packages of R are currently installed in your R.

-   sf is use for importing and handling geospatial data in R,
-   tidyverse is mainly use for wrangling attribute data in R,
-   spdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and
-   tmap will be used to prepare cartographic quality chropleth map.

The code chunk below is used to perform the following tasks:

-   creating a package list containing the necessary R packages,
-   checking if the R packages in the package list have been installed in R,
    -   if they have yet to be installed, RStudio will installed the missing packages,
-   launching the packages into R environment.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## Getting the Data Into R Environment

In this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv format.

### Import shapefile into r environment

Import the Hunan shapefile as an sf simple features object using the `st_read()` function from the sf package.

The code chunk below uses [`st_read()`](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

### Import csv file into r environment

Next, we will import *Hunan_2012.csv* into R by using [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package. The output is R data frame class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### Performing relational join (Data Merging)

The code chunk below will be used to update the attribute table of *hunan*'s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using [`left_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html) of **dplyr** package.

```{r}
hunan <- left_join(hunan,hunan2012) %>%
  select(1:4, 7, 15)
```

### Mapping Regional Indicators

Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using `qtm()` of **tmap** package.

```{r}
#| fig-width: 12
#| fig-height: 8
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

## Calculating Global Spatial Autocorrelation

### Global Measures of Spatial Autocorrelation

In this section, it will show how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.

### Computing Contiguity Spatial Weights

Before we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.

In the code chunk below, [`poly2nb()`](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a "queen" argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don't specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

More specifically, the code chunk below is used to compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are *88 area units* in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.

### Row-standardised weights matrix (Standardizing Weights)

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style="W"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we'll stick with the style="W" option for simplicity's sake but note that other more robust options are available, notably style="B".

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

::: callout-note
### What can we learn from the code chunk above?

-   The input of [`nb2listw()`](https://r-spatial.github.io/spdep/reference/nb2listw.html) must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.poly.
-   *style* can take values "W", "B", "C", "U", "minmax" and "S". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).
-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.
:::

## Global Measures of Spatial Autocorrelation: Moran's I

In this section, you will learn how to perform Moran's I statistics testing by using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

### Maron's I test

The code chunk below performs Moran's I statistical testing using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

> Question: What statistical conclusion can you draw from the output above?

### Computing Monte Carlo Moran's I (Permutation Testing)

The code chunk below performs permutation test for Moran's I statistic by using [`moran.mc()`](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

> Question: What statistical conclustion can you draw fro mthe output above?

### Visualising Monte Carlo Moran's I (Distribution Visualization)

It is always a good practice for us the examine the simulated Moran's I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.

In the code chunk below [`hist()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [`abline()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of R Graphics are used.

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

> Question: What statistical observation can you draw fro mthe output above?

> Challenge: Instead of using Base Graph to plot the values, plot the values by using ggplot2 package.

## Global Measures of Spatial Autocorrelation: Geary's C (Statistical Testing)

In this section, you will learn how to perform Geary's C statistics testing by using appropriate functions of **spdep** package.

### Geary's C test

The code chunk below performs Geary's C test for spatial autocorrelation by using [`geary.test()`](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

> Question: What statistical conclusion can you draw from the output above?

### Computing Monte Carlo Geary's C

The code chunk below performs permutation test for Geary's C statistic by using [`geary.mc()`](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

> Question: What statistical conclusion can you draw from the output above?

### Visualising the Monte Carlo Geary's C

Next, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

> Question: What statistical observation can you draw from the output?

## Spatial Correlogram

Spatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran's I or Geary's c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.

### Compute Moran's I correlogram

In the code chunk below, [`sp.correlogram()`](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran's I. The **plot()** of base Graph is then used to plot the output.

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

Plotting the output alone may not provide a comprehensive interpretation, as not all autocorrelation values carry statistical significance. Therefore, it's crucial to review the complete analysis report. The detailed results can be accessed by executing the following code chunk, which prints out the entire analysis:

```{r}
print(MI_corr)
```

> Question: What statistical observation can you draw from the plot above?

:::callout-note
From the output of the spatial correlogram for Hunan GDP per capita, which uses Moran's I method, we can observe several key statistical points:

  1. **Lag 1 and Lag 2 Correlations**: The Moran's I values for the first and second lags (0.300750 and 0.206004 respectively) are positive and highly significant (p-value < 0.01, denoted by ***), indicating a strong positive spatial autocorrelation at these distances. This suggests that regions that are close together (up to two lags away) tend to have similar GDP per capita values.

  2. **Significance of Autocorrelation**: The positive autocorrelation at Lag 1 and Lag 2 implies that areas with higher GDP per capita are clustered together, as are areas with lower GDP per capita.

  3. **Lag 3 to Lag 6 Correlations**: The values gradually decrease and even become negative by Lag 6 (-0.118070). The negative value at Lag 6 is statistically significant (p-value < 0.05, denoted by **), indicating that regions further apart start to exhibit dissimilar GDP per capita values, a phenomenon known as negative spatial autocorrelation.

  4. **Statistical Significance**: Lags 1, 2, 4, and 6 show statistically significant autocorrelation. Particularly, Lags 1 and 2 show strong and highly significant positive spatial autocorrelation, while Lags 4 and 6 show statistically significant but weaker negative autocorrelation.

These observations highlight the presence of spatial patterns in GDP per capita across Hunan, with nearby regions being more similar than those further apart, transitioning to dissimilarity at greater distances.
:::

### Compute Geary's C correlogram and plot

In the code chunk below, `sp.correlogram()` of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary's C. The **plot()** of base Graph is then used to plot the output.

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

Similar to the previous step, we will print out the analysis report by using the code chunk below.

```{r}
print(GC_corr)
```