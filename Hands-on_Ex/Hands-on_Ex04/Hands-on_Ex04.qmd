---
title: "Hands-on Exercise 4: Spatial Weights and Applications"
author: "Ho Zi Jun"
date: "Sep 15, 2024"
date-modified: "last-modified"
number-sections: true
execute:
  eval: true
  echo: true
  message: false
  freeze: true
editor: source
---

# Spatial Weights and Applications

## Overview

In this hands-on exercise, it will run through the process of computing spatial weights using R. By the end to this hands-on exercise, one should be able to:

-   import geospatial data using appropriate function(s) of **sf** package,
-   import csv file using appropriate function of **readr** package,
-   perform *relational join* using appropriate join function of **dplyr** package,
-   compute *spatial weights* using appropriate functions of **spdep** package, and
-   calculate *spatially lagged variables* using appropriate functions of **spdep** package.

## The Study Area and Data

Two data sets will be used in this hands-on exercise, they are:

-   `Hunan county boundary layer`. This is a geospatial data set in ESRI shapefile format.
-   `Hunan_2012.csv`; This csv file contains selected [Hunan's](https://en.wikipedia.org/wiki/Hunan) local development indicators in 2012.

### Getting Started

Before getting started, ensure that **spdep**, **sf**, **tmap**, **tidyverse** and **knitr**packages of R are currently installed in R.

```{r}
pacman::p_load(spdep, sf, tmap, tidyverse, knitr)
```

## Getting the Data into the R environment

In this section, the geospatial data and its associated attribute table will be brought in R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv format.

### Importing shapefile in R environment

The code chunk below uses [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be a **simple feature** Object of **sf**.

```{r}
hunan <- st_read(dsn = "data/geospatial",
                 layer = "Hunan")
```

### Importing csv file into R environment

Next, *Hunan_2012.csv* will be imported into R by using *read_csv()* of **readr** package. The output is a R dataframe class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### Performing relational join

The code chunk below will be used to update the attribute table of *hunan*'s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using *left_join()* of **dplyr** package.

The `select()` function is used to select variables that are objectively used for the spatial analysis.

```{r}
hunan <- left_join(hunan, hunan2012) %>%
  select(1:4, 7, 15)
```

## Visualising Regional Development Indicator

Now, a basemap and a choropleth map will be prepared showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.

```{r fig.width=12, fig.height=8}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size = 0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp = 1, ncol = 2)
```

> Note: Gross Domestic Product per Capita (GDPPC)

## Computing Contiguity Spatial Weights

In this section, we will learn how to use [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package to compute contiguity weight matrices for the study area.

This function builds a neighbours list based on regions with contiguous boundaries. From the documentation, we learn that we can pass a "queen" argument that takes TRUE or FALSE as options. If this argument is not specified the argument's default is set to TRUE, that is, if we don't specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

### Computing (QUEEN) contiguity based neighbours

The code chunk below is used to compute Queen contiguity **weight matrix**.

```{r}
wm_q <- poly2nb(hunan, queen = TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units (regions) in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbour.

For each polygon in the polygon object, *wm_q* lists all neighbouring polygons. For example, to see the neighbours for the first polygon in the object, type:

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbours. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.

We can retrieve the county name of Polygon ID=1 by using the code chunk below:

```{r}
hunan$County[1]
```

The output reveals that Polygon ID=1 is Anxiang county.

To reveal the county names of the five neighbouring polygons, the code chunk will be used:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

We can retrieve the GDPPC of these five counties by using the code chunk below.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

The printed output above shows that the GDPPC of the five nearest neighbours based on Queen's method are 20981, 34592, 24473, 21311 and 22879 respectively.

We can display the complete weight matrix by using *str()*.

```{r}
str(wm_q)
```

::: callout-warning
Be warned: The output might cut across several pages. Do consider saving the trees if you are going to print out the report.
:::

#### DIY

::: panel-tabset
## least connected

```{r}
wm_q[[30]]

wm_q[[65]]
```

## most connected

```{r}
wm_q[[85]]
```

```{r}
hunan$County[85]
```

To reveal the county names of the eleven neighbouring polygons, the code chunk will be used:

```{r}
hunan$NAME_3[c(1,2,3,5,6,32,56,57,69,75,78)]
```

Revealing the GDPPC of there eleven counties by using the code chunk below.

```{r}
nb1 <- wm_q[[85]]
nb1 <- hunan$GDPPC[nb1]
nb1
```
:::

### Creating (ROOK) contiguity based neighbours

The code chunk below is used to compute Rook contiguity weight matrix.

```{r}
wm_r <- poly2nb(hunan, queen = FALSE)
summary(wm_r)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 10 neighbours. There are two area units with only one neighbours.

### Visualising contiguity weights

A connectivity graph takes a point and displays a line to each neighbouring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically used method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids

We will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using **map_dbl** variation of map from the purrr package. For more documentation, check out map documentation

To get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We can do the same for latitude with one key difference. We access the second value per each centroid with \[\[2\]\].

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now that longitude and latitude is obtained, we use cbind to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

Upon running the code chunk, we can check the first few observations to see if things are formatted correctly.

```{r}
head(coords)
```

#### Plotting Queen contiguity based neighbours map

```{r fig.width=10, fig.height=7}
plot(hunan$geometry, border = "lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### Plotting Rook contiguity based neighbours map

```{r fig.width=10, fig.height=7}
plot(hunan$geometry, border = "lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### Plotting both Queen and Rook contiguity based neighbours maps

```{r fig.width=12, fig.height=8}
par(mfrow = c(1,2))
plot(hunan$geometry, border = "lightgrey", main = "Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
plot(hunan$geometry, border = "lightgrey", main = "Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Computing distance based neighbours

In this section, we will learn how to derive distance-based weight matrices by using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) of **spdep** package.

The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds = argument. If un-projected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and = TRUE, great circle distances in **km** will be calculated assuming the WGS84 reference ellipsoid.

### Determine the cut-off distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.
-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).
-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.
-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

### Computing fixed distance weight matrix

Now, we will compute the distance weight matrix by using *dnearneigh()* as shown in the code chunk below.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

::: callout.note
**Quiz:** What is the meaning of "Average number of links: 3.681818" shown above?

Interpretation: An average of 3.681818 means that, on average, each point has about 3.68 neighbours within the specified distance band (0 to 62 km in this case). This gives a sense of the overall connectivity in the spatial network. A higher average number of links suggests that points are more densely connected, while a lower number suggests sparser connections.
:::

Next, we will use *str()* to display the content of wm_d62 weight matrix.

```{r}
str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine [*table()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/table) and [*card()*](https://r-spatial.github.io/spdep/reference/card.html) of spdep.

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

#### Plotting fixed distance weight matrix

Next, we will plot the distance weight matrix by using the code chunk below.

```{r fig.width=8, fig.height=6}
plot(hunan$geometry, border = "lightgrey")
plot(wm_d62, coords, add = TRUE)
plot(k1, coords, add = TRUE, col = "red", length = 0.08)
```

The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

Alternatively, we can plot both of them next to each other by using the code chunk below.

```{r}
par(mfrow = c(1,2))
plot(hunan$geometry, border = "lightgrey", main = "1st nearest neighbours")
plot(k1, coords, add = TRUE, col = "red", length = 0.88)
plot(hunan$geometry, border = "lightgrey", main = "Distance link")
plot(wm_d62, coords, add = TRUE, pch = 19, cex = 0.6)
```

### Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that the more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours soothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Similarly, the content of the matrix can be displayed by using `str()`.

```{r}
str(knn6)
```

::: callout-note
Notice that each county has six neighbours, no less no more!
:::

#### Plotting distance based neighbours

We can plot the weight matrix using the code chunk below.

```{r}
plot(hunan$geometry, border = "lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Weights based on IDW

This section will show how to derive a spatial weight matrix based on Inverse Distance method. Firstly, to compute the distances between areas by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

## Row-standardised Weights Matrix

Next, we need to assign weights to each neighbouring polygon. In our case, each neighbouring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbours) to each neighbouring county then summing the weighted income values.

While this is the most intuitive way to summaries the neighbours’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.

```{r}
rswm_q <- nb2listw(wm_q, style = "W", zero.policy = TRUE)
rswm_q
```

The `zero.policy = TRUE` option allows for lists of non-neighbours. This should be used with caution since the user may not be aware of missing neighbours in their dataset however, a zero.policy of FALSE would return an error.

To see the weight of the first polygon’s eight neighbours type:

```{r}
rswm_q$weights[10]
```

Each neighbour is assigned a value 0.125 of the total weight. This means that when R computes the average neighbouring income values, each neighbour’s income will be multiplied by 0.125 before being tallied.

Using the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.

```{r}
rswm_ids <- nb2listw(wm_q, glist = ids, style = "B", zero.policy = TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

Results of previous code chunk shown above.

```{r}
summary(unlist(rswm_ids$weights))
```

## Application of Spatial Weight Matrix

In this section, it shows how to create four different spatial lagged variables, they are:

-   spatial lag with row-standardized weights,
-   spatial lag as a sum of neighbouring values,
-   spatial window average, and
-   spatial window sum.

### Spatial lag with row-standardized weights

Finally, we’ll compute the average neighbour GDPPC value for each polygon. These values are often referred to as **spatially lagged values**.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

Recall in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

We can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

The following table shows the average neighboring income values (stored in the Inc.lag object) for each county.

```{r}
head(hunan)
```

Next, to plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.

```{r}
#| fig-width: 10
#| fig-height: 12
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp = 1, ncol = 2)
```

### Spatial lag as a sum of neighboring values

We can calculate spatial lag as a sum of neighbouring values by assigning binary weights. This requires us to go back to our neighbours list, then apply a function that will assign binary weights, then we use `glist = in the nb2listw` function to explicitly assign these weights.

We start by applying a function that will assign a value of 1 per each neighbour. This is done with `lapply()`, which we have been using to manipulate the neighbours structure throughout the past notebooks. Basically it applies a function across each value in the neighbours structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the proper weights assigned, we can use `lag.listw()` to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

First, to examine the result by using the code chunk below.

```{r}
lag_sum
```

Next, to append the *lag_sum* GDPPC field into `hunan` sf data frame by using the code chunk below.

```{r}
hunan <- left_join(hunan, lag.res)
```

Following which, to plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.

```{r}
#| fig-width: 10
#| fig-height: 12
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp = 1, ncol = 2)
```

### Spatial window average

The spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.

To add the diagonal element to the neighbour list, we just need to use `include.self()` from **spdep**.

```{r}
wm_qs <- include.self(wm_q)
```

Notice that the Number of non-zero links, Percentage non-zero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909

Let us take a good look at the neighbour list of area [1] by using the code chunk below.

```{r}
wm_qs[[1]]
```

Notice that now [1] has six neighbours instead of five.

Now we obtain weights with `nb2listw()`

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

Again, utilising `nb2listw()` and `glist()` to explicitly assign weight values.

Lastly, we just need to create the lag variable from our weight structure and GDPPC variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

Next, to convert the lag variable listw object into a data.frame by using `as.data.frame()`.

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

::: callout-note
## Note
The third command line on the code chunk above renames the field names of `lag_wm_q1.res` object into `NAME_3` and `lag_window_avg GDPPC` respectively.
:::

Next, the code chunk below will be used to append *lag_window_avg GDPPC* values onto `hunan` sf data.frame by using `left_join()` of **dplyr** package.

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```


Lastly, `qtm()` of **tmap** package is used to plot the `lag_gdppc` and `w_ave_gdppc` maps next to each other for quick comparison.

```{r}
#| fig-width: 10
#| fig-height: 8
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

::: callout-tip
## Tip
For more effective comparison, it is advisable to use the core tmap mapping functions.
:::

### Spatial window sum

The spatial window sum is the counter part of the window average, but without using row-standardized weights.

To add the diagonal element to the neighbour list, we just need to use `include.self()` from **spdep**.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Assigning binary weights to the neighbour structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

> Notice that now [1] has six neighbours instead of five.

Again, we use `nb2listw()` and `glist()` to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With our new weight structure, we can compute the lag variable with `lag.listw()`.

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Next, we will convert the lag variable listw object into a data.frame by using `as.data.frame()`.

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Note: The second command line on the code chunk above renames the field names of *w_sum_gdppc.res* object into *NAME_3* and *w_sum GDPPC* respectively.

Next, the code chunk below will be used to append *w_sum GDPPC* values onto `hunan` sf data.frame by using `left_join()` of dplyr package.

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

Once again, `qtm()` of tmap package is used to plot the *lag_sum GDPPC* and *w_sum_gdppc* maps next to each other for quick comparison.

```{r}
#| fig-width: 8
#| fig-height: 10
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```

::: callout-note
It is advisable to use the core tmap mapping functions for a more effective comparison.
:::

## References

-   [Creating Neighbours using sf objects](https://cran.r-project.org/web/packages/spdep/vignettes/nb_sf.html)










