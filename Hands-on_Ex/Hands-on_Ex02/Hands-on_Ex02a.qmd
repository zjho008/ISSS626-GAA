---
title: "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods"
author: "Ho Zi Jun"
date: "Aug 28, 2024"
date-modified: "last-modified"
number-sections: true
execute:
  eval: true
  echo: true
  message: false
  freeze: true
editor: source
---

# 1st Order Spatial Point Pattern Analysis

## Overview

Spatial Point Pattern Analysis is the evaluation of the **pattern** or **distribution**, of a set of points on a surface. The point can be locations of:

-   events such as crime, traffic accidents and disease onset, or
-   business services (coffee and fast food outlets) or facilities such as childcare and elder care centres.

By using appropriate functions of [spatstat](https://cran.r-project.org/web/packages/spatstat/), this hands-on exercise aims to discover the spatial point processes of childcare centres in Singapore.

The specific questions that will be answered in this hands-on exercise are as follows:

-   are the childcare centres in Singapore randomly distributed throughout the country?\
-   if the answer is no, then the next logical question is where are the locations with higher a concentration of childcare centres?

## The data

To investigate for the answers for questions above, three data sets will be used. They are:

-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It is downloaded from Data.gov.sg and is in geojson format.
-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set is also downloaded from Data.gov.sg.
-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.

## Installing and Loading the R packages

In this hands-on exercise, five R packages will be used, they are:

-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.
-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.
-   [**raster**](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.
-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data (**Note**: Package ‘maptools’ was removed from the CRAN repository). In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.
-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

The code chunk below is used to install and launch the five R packages.

```{r}
pacman::p_load(sf, sp, raster, spatstat, tmap, tidyverse)
```

## Spatial Data Wrangling

### Importing the spatial data

In this section, [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package will be used to import these three geospatial data sets into R.

```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{r}
sg_sf <- st_read(dsn = "data", layer = "CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data",
                layer = "MP14_SUBZONE_WEB_PL")
```

Before using these data for analysis, it is important to ensure that they are projected in the same projection system.

> DIY: Using the appropriate **sf** functions in previous Hands-on Exercise, the code chunk below retrieves the referencing system information of these geospatial data.

```{r}
st_crs(childcare_sf)
st_crs(sg_sf)
st_crs(mpsz_sf)
```

From the results above: Notice that except `childcare_sf` - EPSG:3414, both `mpsz_sf` and `sg_sf` - "EPSG",9001 do not have the proper crs information.

> DIY: Using the method learnt in previous hands-on exercise, attempt to assign the correct crs to mpsz_sf and sg_sf simple feature data frames.

> DIY: If necessary, changing the referencing system to Singapore national projected coordinate system in context of the question.

#### Assigning EPSG code to a simple feature data frame

`st_set_crs()` of **sf** is used as shown in the code chunk below to assign the correct EPSG code to `mpsz_sf` and `sg_sf` data frame.

```{r}
sg_sf <- st_set_crs(sg_sf, 3414)
```

Checking the CSR again by using the code chunk below.

```{r}
st_crs(childcare_sf)
```

```{r}
mpsz_sf <- st_set_crs(mpsz_sf, 3414)
```

Checking the CRS again by using the code chunk below.

```{r}
st_crs(mpsz_sf)
```

### Mapping the geospatial data sets

After checking the referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns.

```{r}
tm_shape(sg_sf) +
  tm_polygons() +
tm_shape(mpsz_sf) +
  tm_polygons() +
tm_shape(childcare_sf) +
  tm_dots()
```

Notice that all the geospatial layers are within the same map extend. This shows that their referencing system and coordinate values are referring to similar spatial context. This is very important in any geospatial analysis.

Alternatively, a pin map cna be prepared by using the code chunk below:

```{r}
tmap_mode("view")
tm_shape(childcare_sf) +
  tm_dots()
tmap_mode("plot")
```

Notice that in the interactive mode, **tmap** is using [**leaflet for R**](https://rstudio.github.io/leaflet/) API. The advantage of this interactive pin map is that it allows user to navigate and zoom around the map freely. We can also query the information of each simple feature (i.e. the point) by clicking of them. Last but not least, we can also change the background of the internet map layer. Currently, *three internet map* layers are provided. They are: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas.

> Reminder: Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. Displaying excessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publishing on Netlify should be avoided.

## Geospatial Data Wrangling

Although simple feature data frame is gaining popularity again - sp’s *Spatial* classes, there are, however, many geospatial analysis packages requiring the input of geospatial data in sp’s *Spatial* classes. In this section, we will learn how to convert simple feature data frame to sp’s *Spatial* class.

### Converting sf data frames to sp’s *Spatial* class

The code chunk below uses [*as_Spatial()*]() of **sf** package to convert the three geospatial data from simple feature data frame to sp's Spatial class.

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

Information on the three Spatial classes are shown in the code chunk below:

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```

Notice that the geospatial data have been converted into their respective sp's Spatial classes.

### Converting the *Spatial* class into generic sp format

**spatstat** requires the analytical data in ***ppp*** object form. There is no direct way to convert a Spatial class into ***ppp*** object. First, the ***Spatial classes*** needs to be converted into ***Spatial*** object first.

The codes chunk below converts the Spatial classes into generic sp objects.

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

Next, the sp objects properties are displayed as shown below.

```{r}
childcare_sp
```

```{r}
sg_sp
```

> Challenge: What are the differences between Spatial\* classes and generic sp object?

> Note: Class Hierarchy:\n Spatial: Specific classes like SpatialPoints, SpatialLines, SpatialPolygons, etc., representing different types of spatial data. sp object: A more generic object from the sp package, can be used for broader purposes without specific geometric constraints

### Converting the generic sp format into spatstat’s ppp format

Now, we will use *as.ppp()* function of **spatstat** to convert the spatial data into **spatstat**'s ***ppp*** object format.

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

Now, to plot ***childcare_ppp*** and examine the difference.

```{r}
plot(childcare_ppp)
```
We take a quick look at the summary statistics of the newly created ppp object by using the code chunk below.

```{r}
summary(childcare_ppp)
```

Notice the warning message about duplicates. In spatial point patterns analysis an issue of significance is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.

### Handling duplicated points

We can check the duplication in a ***ppp*** object by using the code chunk below.

```{r}
any(duplicated(childcare_ppp))
```

To count the number of co-incidence points, we will use the *multiplicity()* function as shown in the code chunk below.

```{r}
multiplicity(childcare_ppp)
```

To know how many locations have more than one point event, we can use the code chunk below.

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

To view the locations of any duplicate point events, we will plot `childcare` data by using the code chunk below.

```{r}
tmap_mode("view")
tm_shape(childcare) +
  tm_dots(alpha = 0.4,
          size = 0.05)
```

> Challenge: How to spot the duplicate points from the map shown above?

Manual Checking (Visual): If the dataset is small, zoom in on clusters to check for over-plotting. Duplicates will appear as darker points due to overlaid symbols.

For duplicates, there are three ways to overcome this problem. The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.

The second solution is to use *jittering*, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.

The third solution is to make each point "unique" and then attach the duplicates of the points to the patterns as **marks**, as attributes of the points. Then you would need analytical techniques that take into account these marks.

The code chunk below implements the jittering approach.

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp,
                             retry = TRUE,
                             nsim = 1, # increase simulations
                             drop = TRUE)
```

```{r}
any(duplicated(childcare_ppp_jit))
```

Code chunk result from above shows no duplicated points.

### Creating *owin* object

When analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In **spatstat**, an object called ***owin*** is specially designed to represent this polygonal region.

The code chunk below is used to covert *sg* SpatialPolygon object into owin object of **spatstat**.

```{r}
sg_owin <- as.owin(sg_sf)
```

The output object can be displayed by using the *plot()* function

```{r}
plot(sg_owin)
```

Code chunk below is using the *summary()* function of Base R.

```{r}
summary(sg_owin)
```

### Combining point events object and owin object

In this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.

```{r}
childcareSG_ppp <- childcare_ppp[sg_owin]
```

The output object combined both the point and polygon feature in one ppp object class as shown below.

```{r}
summary(childcareSG_ppp)
```

Plotting the newly derived childcareSG_ppp

```{r}
plot(childcareSG_ppp)
```

## First-order Spatial Point Patterns Analysis

In this section, it will be on learning how to perform first-order Spatial Point Patterns Analysis (SPPA) by using **spatstat** package. The hands-on exercise will focus on:

-   deriving **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes,
-   performing **Confirmatory Spatial Point Patterns Analysis** by using **Nearest Neighbour** statistics.

### Kernel Density Estimation

In this section, it encompasses learning how to compute the kernel density estimation (KDE) of childcare services in Singapore.

#### Computing kernel density estimation using automatic bandwidth selection method

The code chunk below computes a kernel density by using the following configurations of [*density()*](https://rdrr.io/cran/spatstat/man/density.ppp.html) of **spatstat**:

-   [*bw.diggle()*](https://rdrr.io/cran/spatstat/man/bw.diggle.html) automatic bandwidth selection method. Other recommended methods are [*bw.CvL()*](https://rdrr.io/cran/spatstat/man/bw.CvL.html), [*bw.scott()*](https://rdrr.io/cran/spatstat/man/bw.scott.html) or [*bw.ppl()*](https://rdrr.io/cran/spatstat/man/bw.ppl.html).\
-   The smoothing kernel used is *gaussian*, which is the default. Other smoothing methods are: "epanechnikov", "quartic" or "disc".\
-   The intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is *FALSE*.

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma = bw.diggle,
                              edge = TRUE,
                            kernel = "gaussian")
```

The *plot()* function of Base R is then used to display the kernel density derived.

```{r}
plot(kde_childcareSG_bw)
```

The density values of the output ranges from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in metres. As a result, the density values computed is in "number of points per square meter".

Before moving on to the next section, it is good to know that we can retrieve the bandwidth used to compute the kde layer by using the code chunk below.

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

#### Rescalling KDE values

In the code chunk below, *rescale.ppp()* is used to covert the unit of measurement from metres to kilometres.

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
```

Now, an attempt to re-run *density()* using the rescaled data set and plot the output kde map.

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km,
                              sigma = bw.diggle,
                              edge = TRUE,
                            kernel = "gaussian")
```

```{r}
plot(kde_childcareSG.bw)
```

Notice that output image looks identical to the earlier version, the only changes are in the data values from the legend.

### Working with different automatic bandwidth methods

Besides *bw.diggle()*, there are three other **spatstat** functions which can be used to determine the bandwidth, they are: *bw.CvL()*, *bw.scott()*, and *bw.ppl()*.

This section will attempt to explore the bandwidth return with these automatic bandwidth calculation methods by using the code chunk below.

```{r}
bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
bw.diggle(childcareSG_ppp.km)
```

Baddeley et. (2016) suggested the use of the *bw.ppl()* algorithm because in their experience it tends to produce the more appropriate values when the pattern consists **predominantly of tight clusters**. But they also insist that if the purpose of one's study is to **detect a single tight cluster in the midst of random noise** then the *bw.diggle()* method seems to work best.

The code chunk beow will be used to compare the output of using *bw.diggle* and *bw.ppl* methods.

```{r fig.width=15, fig.height=5}
kde_childcareSG.ppl <- density(childcareSG_ppp.km,
                               sigma = bw.ppl,
                               edge = TRUE,
                               kernel = "gaussian")
par(mfrow = c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

### Working with different kernel methods

As stated earlier the smoothing kernel used is *gaussian* as a default.

By default, the kernel method used in *density.ppp()* is *gaussian*. But there are three other options, namely: Epanechnikov, Quartic and Dics.

The code chunk below will be used to compute three more kernel density estimations by using these three kernel functions.

```{r fig.width=15, fig.height=10}
par(mfrow = c(2,2))
plot(density(childcareSG_ppp.km,
             sigma = bw.ppl,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Gaussian")
plot(density(childcareSG_ppp.km,
             sigma = bw.ppl,
             edge = TRUE,
             kernel = "epanechnikov"),
     main = "Epanechnikov")
plot(density(childcareSG_ppp.km,
             sigma = bw.ppl,
             edge = TRUE,
             kernel = "quartic"),
     main = "Quartic")
plot(density(childcareSG_ppp.km,
             sigma = bw.ppl,
             edge = TRUE,
             kernel = "disc"),
     main = "Disc")

```

## Fixed and Adaptive KDE

### Computing KDE by using fixed bandwidth

Next, will be an attempt to compute a KDE layer by defining a bandwidth of 600 metres. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of ***childcareSG_ppp.km*** object is in kilometres, hence the 600m translates to 0.6km.

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km,
                               sigma = 0.6,
                               edge = TRUE,
                              kernel = "gaussian")
```

```{r}
plot(kde_childcareSG_600)
```

### Computing KDE by using adaptive bandwidth

Fixed bandwidth method is very sensitive to highly skewed distributions of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.

In this section, the objective is learning to derive adaptive kernel density estimation by using [*density.adaptive()*](https://rdrr.io/cran/spatstat/man/adaptive.density.html) of **spatstat**.

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km,
                                             method = "kernel")
```

```{r}
plot(kde_childcareSG_adaptive)
```

We can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.

```{r fig.width=15, fig.height=5}
par(mfrow = c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

### Converting KDE output into grid object

The results are the same, conversion will be done so that it is suitable for mapping purposes

```{r}
kde_df <- as.data.frame(kde_childcareSG.bw)

coordinates(kde_df) <- ~x+y
gridded(kde_df) <- TRUE
kde_spdf <- as(kde_df, "SpatialPixelsDataFrame")

spplot(kde_spdf)
```

#### Converting gridded output into raster

The gridded kernal density objects will be converted into RasterLayer object by using *raster()* of **raster** package.

```{r}
kde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)
```

The properties of *kde_childcareSG_bw_raster* RasterLayer are shown using the code chunk below:

```{r}
kde_childcareSG_bw_raster
```

Notice that the crs property is a NA value.

#### Assigning projection systems

The code chunk below will be used to include the CRS information on `kde_childcareSG_bw_raster` RasterLayer.

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
```

```{r}
kde_childcareSG_bw_raster
```

Notice that the CRS property is completed.

### Visualising the output in tmap

Finally, the code chunk below is used to display the raster in cartographic quality map using **tmap** package.

```{r}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

Notice that the raster values are encoded explicitly onto the raster pixel using the values in "v"" field.

### Comparing Spatial Point Patterns using KDE

In this section, we will learn how to compare KDE of childcares at Punggol, Tampines, Chua Chu Kang and Jurong West planning areas.

#### Extracting study area

The code chunk below will be used to extract the target planning areas.

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

Plotting target planning areas

```{r fig.width=15, fig.height=10}
par(mfrow = c(2,2))
plot(pg, main = "Punggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

#### Creating ***owin*** object

These sf objects will be converted into owin objects that is required by **spatstat**.

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

#### Combining childcare points and the study area

By using the code chunk below, we are able to extract childcare that are within the specific regions to do our analysis later on.

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

Next, *rescale.ppp()* function is used to transform the unit of measurement from metre to kilometre.

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

The code chunk below is then used to plot these four study areas and the locations of the childcare centres.

```{r fig.width=15, fig.height=10}
par(mfrow = c(2,2))
plot(childcare_pg_ppp.km, main = "Punggol")
plot(childcare_tm_ppp.km, main = "Tampines")
plot(childcare_ck_ppp.km, main = "Choa Chu Kang")
plot(childcare_jw_ppp.km, main = "Jurong West")
```

#### Computing KDE

The code chunk below will be used to compute the KDE of these four planning areas. ***bw.diggle*** method is used to derive the bandwidth of each plot.

```{r fig.width=15, fig.height=10}
par(mfrow = c(2,2))
plot(density(childcare_pg_ppp.km,
             sigma = bw.diggle,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Punggol")
plot(density(childcare_tm_ppp.km,
             sigma = bw.diggle,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Tampines")
plot(density(childcare_ck_ppp.km,
             sigma = bw.diggle,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Choa Chu Kang")
plot(density(childcare_jw_ppp.km,
             sigma = bw.diggle,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Jurong West")
```

#### Computing fixed bandwidth KDE

For comparison purposes, 250m bandwidth will be used.

```{r fig.width=15, fig.height=10}
par(mfrow = c(2,2))
plot(density(childcare_ck_ppp.km,
             sigma = 0.25,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Choa Chu Kang")
plot(density(childcare_jw_ppp.km,
             sigma = 0.25,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Jurong West")
plot(density(childcare_pg_ppp.km,
             sigma = 0.25,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Punggol")
plot(density(childcare_tm_ppp.km,
             sigma = 0.25,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Tampines")
```

## Nearest Neighbour Analysis

In this section, the Clark-Evans test of aggregation will be performed for a spatial point pattern by using [*clarkevans.test()*](https://www.rdocumentation.org/packages/spatstat/versions/1.63-3/topics/clarkevans.test) of **statspat**.

The test hypotheses are:

**Ho** = The distribution of childcare services are randomly distributed.

**H1** = The distribution of childcare services are not randomly distributed.

The 95% confident interval will be used.

### Testing spatial point patterns using Clark and Evans Test

```{r}
clarkevans.test(childcareSG_ppp,
                correction = "none",
                clipregion = "sg_owin",
                alternative = c("clustered"),
                nsim = 99)
```

Conclusions that can be drawn from the test result:

-   R = 0.55631: This value of R is significantly less than 1, indicating that the distribution of childcare services is clustered rather than random.

-   p-value \< 2.2e-16: The extremely small p-value indicates that the observed clustering is statistically significant. In other words, there is a very strong evidence against the null hypothesis (Ho) of random distribution.

::: callout-note
## Conclusion

Given the test result (R = 0.55631) and the very small p-value, we reject the null hypothesis (Ho) at the 95% confidence level. The conclusion is that the **distribution of childcare services is not randomly distributed**; instead, the services are significantly clustered in certain areas.

This suggests that childcare services are more likely to be found near other childcare services, potentially due to factors: like population density, demand for services, or urban planning considerations.
:::

### Clark and Evans Test: Choa Chu Kang planning area

In the code chunk below, [*clarkevans.test()*](https://rdrr.io/cran/spatstat/man/clarkevans.test.html) of **spatstat** is used to perform the Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area.

```{r}
clarkevans.test(childcare_ck_ppp,
                correction = "none",
                clipregion = NULL,
                alternative = c("two.sided"),
                nsim = 999)
```

### Clark and Evans Test: Tampines planning area

In the code chunk below, the similar test is used to analyse the spatial point patterns of childcare centre in Tampines planning area.

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```
