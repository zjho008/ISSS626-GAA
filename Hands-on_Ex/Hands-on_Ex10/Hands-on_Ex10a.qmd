---
title: "Hands-on Exercise 10a: Processing and Visualising Flow Data"
author: "Ho Zi Jun"
date: "Oct 31, 2024"
date-modified: "last-modified"
number-sections: true
execute:
  eval: true
  echo: true
  message: false
  freeze: true
editor: source
---

## Overview

Spatial interaction describes the movement of people, materials, or information between geographical locations. It includes a range of flows—from freight and energy distribution to global trade, flight schedules, and pedestrian traffic. Each interaction can be represented as an origin-destination pair in a matrix, where rows and columns represent the centroids of the origin and destination locations, respectively. This type of matrix is typically referred to as an origin-destination or spatial interaction matrix.

In this hands-on exercise, we will learn how to build an OD matrix by using [*Passenger Volume by Origin Destination Bus Stops*]() data set downloaded from [LTA DataMall](https://datamall.lta.gov.sg/content/datamall/en.html). By the end of this hands-on exercise, we will be able:

-   to import and extract OD data for a selected time interval,
-   to import and save geospatial data (i.e. bus stops and mpsz) into sf tibble data frame objects,
-   to populate planning subzone code into bus stops sf tibble data frame,
-   to construct desire lines geospatial data from the OD data, and
-   to visualise passenger volume by origin and destination bus stops by using the desired lines data.

## Getting Started

For the purpose of this exercise, five r packages will be used. They are:

-   [sf](https://r-spatial.github.io/sf/) for importing, integrating, processing and transforming geospatial data.
-   [tidyverse](https://www.tidyverse.org/) for importing, integrating, wrangling and visualising data.
-   [tmap](https://r-tmap.github.io/tmap/) for creating elegent and cartographic quality thematic maps.
-   [stplanr](https://docs.ropensci.org/stplanr/) provides functions for solving common problems in transport planning and modelling such as downloading and cleaning transport datasets; creating geographic “desire lines” from origin-destination (OD) data; route assignment, locally and interfaces to routing services such as CycleStreets.net; calculation of route segment attributes such as bearing and aggregate flow; and ‘travel watershed’ analysis.
-   [DT](https://rstudio.github.io/DT/) provides an R interface to the JavaScript library DataTables. R data objects (matrices or data frames) can be displayed as tables on HTML pages, and DataTables provides filtering, pagination, sorting, and many other features in the tables.

```{r}
pacman::p_load(tmap, sf, DT, stplanr, tidyverse)
```

## Preparing the Flow Data

### Importing the OD data

Firstly, we will import the *Passenger Volume by Origin Destination Bus Stops* data set from LTA DataMall by using `read_csv()` of **readr** package.

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202210.csv")
```

*odbus* tibble data table is displayed by using the code chunk below.

```{r}
glimpse(odbus)
```

A quick inspection of the *odbus* tibble shows that the values in `ORIGIN_PT_CODE` and `DESTINATION_PT_CODE` are stored as numeric data. The following code converts these values to character data type for consistency.

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE) 
```

### Extracting the study data

For this hands on exercise, we will extract commuting flows on weekdays for timeslots between 6 and 9 o'clock (AM).

```{r}
odbus6_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

Table below shows the content of `odbus6_9`

```{r}
datatable(odbus6_9)
```

We will save the output in rds format for easy retrieval and future usage when needed without the need to repeat the steps above.

```{r}
write_rds(odbus6_9, "data/rds/odbus6_9.rds")
```

The code chunk below will be used to import the saved odbus6_9.rds from R environment.

```{r}
odbus6_9 <- read_rds("data/rds/odbus6_9.rds")
```

## Working with Geospatial Data

For the purpose of this exercise, two geospatial datasets will be used. They are:

-   BusStop: This data provides the location of bus stop as of last quarter of 2022.
-   MPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.

Both data sets are in ESRI shapefile format.

### Importing geospatial data

The code chunks below are used to import the datasets and update them with correct ESPG code (i.e. 3414):

```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)

busstop
```

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)

mpsz
```

::: callout-note
-   `st_read()` function of sf package is used to import the shapefile into R as a sf data frame.
-   `st_transform()` function of sf package is used to transform the projection to crs 3414.
:::

Similar to the section [\### Extracting the study data]() the code chunk below will be used to write mpsz sf tibble data frame into an rds file for future usage.

```{r}
mpsz <- write_rds(mpsz, "data/rds/mpsz.rds")
```

## Geospatial data wrangling

### Combining Busstop and mpsz

The code chunk below transfers the planning subzone code (*SUBZONE_C*) from the mpsz sf data frame to the busstop sf data frame.

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

::: callout-note
-   `st_intersection()` is used to perform point and polygon overlay and the output will be in point sf object.
-   `select()` of dplyr package is then used to retain only `BUS_STOP_N` and `SUBZONE_C` in the busstop_mpsz sf data frame.
-   five bus stops are excluded in the resultant data frame because they are outside of the Singapore boundary.
:::

```{r}
datatable(busstop_mpsz)
```

Before moving to the next step, we will save the output into rds format.

```{r}
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.rds")  
```

Next step is to append the planning subzone code from `busstop_mpsz` data frame onto `odbus6_9` data frame.

```{r}
od_data <- left_join(odbus6_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

Before continuing a good practice is to check for duplicated records:

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

If there are duplicate records, the code chunk below will be used to retain only the unique records.

```{r}
od_data <- unique(od_data)
```

It is also a good practice to confirm if the duplicated records issue has been addressed fully.

```{r}
anyDuplicated(od_data)
```

Next, we will update `od_data` data frame with the planning subzone codes.

```{r}
od_data <- left_join(od_data , busstop_mpsz,
            by = c("DESTIN_BS" = "BUS_STOP_N")) 
```

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

```{r}
od_data <- unique(od_data)
```

```{r}
od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(MORNING_PEAK = sum(TRIPS))
```

Code chunk below to save the output into an rds file format.

```{r}
write_rds(od_data, "data/rds/od_data_fii.rds")
```

```{r}
od_data_fii <- read_rds("data/rds/od_data.rds")
```

## Visualising Spatial Interaction

In this section, we will learn how to prepare a desire line by using **stplanr** package.

### Removing intra-zonal flows

We will not plot the intra-zonal flows. The code chunk below will be used to remove intra-zonal flows. Afterwards the output will be saved as rds file format.

```{r}
od_data_fij <- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]
```

```{r}
write_rds(od_data_fij, "data/rds/od_data_fij.rds")
```

```{r}
od_data_fij <- read_rds("data/rds/od_data_fij.rds")
```

### Creating desire lines

In this code chunk below, `od2line()` of **stplanr** package is used to create the desire lines.

```{r}
flowLine <- od2line(flow = od_data_fij, 
                    zones = mpsz,
                    zone_code = "SUBZONE_C")
```

```{r}
write_rds(flowLine, "data/rds/flowLine.rds")
```

```{r}
flowLine <- read_rds("data/rds/flowLine.rds")
```

### Visualising the desire lines

To visualise the result of the desire lines, the code chunk below is used:

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

::: callout-warning
The rendering process takes more time because of the transparency argument (i.e. alpha)
:::

When flow data is particularly messy and highly skewed, as seen above, it’s often more effective to focus on selected flows, such as those greater than or equal to 5000, as shown below.

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
  filter(MORNING_PEAK >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.5)
```
