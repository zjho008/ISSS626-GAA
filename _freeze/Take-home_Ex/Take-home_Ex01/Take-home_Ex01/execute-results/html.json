{
  "hash": "96d76f8fa514e51af4c47777fdcd8183",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 1: Geospatial Analytics for Public Good\"\nauthor: \"Ho Zi Jun\"\ndate: \"Sep 8, 2024\"\ndate-modified: \"last-modified\"\nnumber-sections: true\nnumber-offset: 0\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\neditor: source\n---\n\n\n\n# Overview: Case study on factors affecting road traffic accidents in the Bangkok Metropolitan Region (BMR)\n\nAccording to the [*World Health Organization (WHO)*](https://www.who.int/news-room/fact-sheets/detail/road-traffic-injuries), road traffic accidents claim the lives of around 1.19 million people annually and leave 20 to 50 million others with non-fatal injuries. Vulnerable road users, such as pedestrians, cyclists, and motorcyclists, account for more than half of these fatalities.\n\nRoad traffic injuries are the leading cause of death for individuals aged 5 to 29. Additionally, two-thirds of road traffic fatalities occur among people of working age (18–59 years). Despite having only about 60% of the world's vehicles, low- and middle-income countries account for 92% of road traffic fatalities.\n\nBeyond the human toll, road accidents impose a significant economic burden on victims and their families due to medical costs and the loss of productivity from those who are killed or disabled. On a national level, these injuries cost countries around 3% of their gross domestic product (GDP).\n\nThailand has the most dangerous roads in Southeast Asia and ranks among the worst globally, with approximately 20,000 deaths from road accidents each year, averaging 56 deaths per day [(WHO)](https://www.who.int/thailand/news/feature-stories/detail/turning-tragedy-into-action--advocacy-and-survival-on-thailand-s-roads) and a million injuries each year, incurring an economic loss of 500,000 million baht.\n\nBetween 2014 and 2021, Thailand saw a rise in accident frequency, with 19% occurring on the national highways, which serve as the main public roads connecting regions, provinces, and key locations. Nationally, there is a 66% chance of encountering accident-prone areas, also known as *'black spots.'* These are distributed as follows: 66% on straight road sections, 13% on curves, 6% at median points of cross intersections, 5% at T- or Y-intersections, 3% at cross intersections, and 2% on both bridges and steep slopes.\n\n## Objectives\n\nThe primary causes of road traffic accidents can be attributed to behavioural factors, such as: driver behaviour, performance, and environmental factors, like weather conditions and road design. While past studies using Spatial Point Patterns Analysis (SPPA) have explored these factors, they often overlook the impact of *temporal* factors, such as season or time of day.\n\nThe task is to identify factors influencing road traffic accidents in the Bangkok Metropolitan Region (BMR) using both spatial and spatio-temporal point patterns analysis. The objectives include visualizing spatio-temporal accident dynamics and conducting detailed spatial and temporal analyses using Network Spatial Point Patterns Analysis methods.\n\n## Datasets\n\nThree basic data sets must be used for this exercise, they are:\n\n-   [Thailand Road Accident \\[2019-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle\n\n    -   This dataset provides comprehensive statistics on recorded road accidents in Thailand, spanning from approximately 2019 to 2022. The data was sourced from raw information provided by the [Office of the Permanent Secretary, Ministry of Transport](https://www.mots.go.th/news/category/411). The dataset encompasses various aspects of road accidents and aims to shed light on the trends and patterns within this critical area of concern, analysis of this data could be crucial in guiding road safety policies and measures\n\n-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.\n\n## Setting Up\n\n### Setting up the R environment\n\nIn this exercise, seven R packages will be used, they are:\n\n| Packages                                                                                        | Description                                                                                                                                                                                                                                                                                                                          |\n|:------------------------------|:----------------------------------------|\n| [*sf*](https://r-spatial.github.io/sf/)                                                         | A relatively new R package specially designed to import, manage and process vector-based geospatial data in R                                                                                                                                                                                                                        |\n| [*spatstat*](https://spatstat.org/)                                                             | Which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.                                                                                                    |\n| [*raster*](https://cran.r-project.org/web/packages/raster/)                                     | Which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this exercise, it will be used to convert image output generate by spatstat into raster format                                                                                                                                        |\n| [*tmap*](https://cran.r-project.org/web/packages/tmap/index.html)                               | which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.                                                                                                                                                                            |\n| [*tidyverse*](https://www.tidyverse.org/)                                                       | a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs                                                                                                                                                                               |\n| [*spNetwork*](https://cran.r-project.org/web/packages/spNetwork/index.html)                     | Which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances |\n| [*spdep*](https://cran.r-project.org/web/packages/sfdep/readme/README.html)                                  | to compute spatial contiguity weights                                                                                                                                                                                                                                                          |\n| [*lubridate*](https://cran.r-project.org/web/packages/graphlayouts/vignettes/graphlayouts.html) | package implements some graph layout algorithms that are not available in `igraph` or other packages                                                                                                                                                                                                                                 |\n\n: R Packages {.striped .hover tbl-colwidths=\"\\[25,75\\]\"}\n\nThe code chunk below is used to setup the R environment\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spatstat, raster, tmap,tidyverse,\n               spNetwork, spdep, lubridate)\n\nset.seed(1234) # To ensure that random processes in the code produce the same results every time the code is run. \n```\n:::\n\n\n\n## Preparing the datasets\n\n### Defining Study Area of Data\n\nThis project will focus on the [**Bangkok Metropolitan Region**](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region) (BMR) which comprises of five provinces surrounding Bangkok, namely, Samut Prakan, Pathum Thani, Nakhon Pathom, Samut Sakhon, and Nonthaburi. These areas are referred to as the Five Provinces and the Vicinity. Together with the Bangkok Metropolitan Area (BMA), they have become the **Bangkok Metropolitan Region (BMR)** [Source](https://archive.unu.edu/unupress/unupbooks/uu11ee/uu11ee10.htm#:~:text=There%20are%20five%20provinces%20surrounding,BMR)%2C%20or%20Greater%20Bangkok.).\n\nThe code chunk below will be used to facilitate the extraction of the BMR for the datasets to avoid unnecessary provinces to be read and putting a strain on computing resources.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_provinces <- c(\"Bangkok\", \"Samut Prakan\", \"Pathum Thani\", \"Nakhon Pathom\", \"Samut Sakhon\", \"Nonthaburi\")\n```\n:::\n\n\n\n### Importing the Aspatial data\n\nThe `thai_road_accident_2019_2022` data set is csv file format, [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of the **readr** package will be used to import `thai_road_accident_2019_2022.csv` as shown from the code chunk below. The output R Object is called `rdacc` as is a tibble data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc <- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\")\n```\n:::\n\n\n\nUpon some initial observation of the data set, it is observed that there are missing / NA values in the latitude & longitude columns which will have to be removed as it will not be suitable to do any spatial analysis on this observations. Following which there is also an incident_datetime column spanning from years 2019 to 2022 which will be utilised to identify the date and time occurrences of accidents. As such that column will be transformed for the date and time to be used for analysis.\n\nAdditionally to further set the scene [(timings typically from 7 – 9 AM and 4 – 7 PM on weekdays while considering weekends to be peak throughout)](https://www.elevenbangkok.com/getting-around-bangkok) will also be as pre-determined for Bangkok's rush hours otherwise known as peak hours traffic.\n\nThe code chunk below also converts `rdacc` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf <- rdacc %>%\n  filter(!is.na(longitude) & longitude != \"\", \n         !is.na(latitude) & latitude != \"\") %>%\n  mutate(Day_num = day(incident_datetime)) %>%\n  mutate(Dayofweek = wday(incident_datetime, label = TRUE, week_start = 1)) %>%\n  mutate(Month_num = month(incident_datetime)) %>%\n  mutate(Month_fac = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE)) %>%\n  mutate(Year = year(incident_datetime)) %>%\n  mutate(Hour_of_day = hour(incident_datetime)) %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs = 4326) %>%\n  st_transform(crs = 32647)\n```\n:::\n\n\n\n#### Selecting the BMR provinces\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf_bmr <- rdacc_sf %>%\n    filter(province_en %in% bmr_provinces)\n```\n:::\n\n\n\nThe simple feature data frame is saved into a physical file for usage. By doing so the need to repeat the steps above is not needed when running the quarto document.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(rdacc_sf_bmr, \"data/rds/rdacc_sf_bmr.rds\")\n```\n:::\n\n\n\n**To retrieve file**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf_bmr <- read_rds(\"data/rds/rdacc_sf_bmr.rds\")\n```\n:::\n\n\n\n#### Using `st_geometry()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(rdacc_sf_bmr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 12986 features \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 591277.5 ymin: 1486846 xmax: 710166.1 ymax: 1576520\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\n\n\n### Importing Geospatial data\n\n::: panel-tabset\n## Thailand Roads (OpenStreetMap Export)\n\nThis dataset is in `shp` format and the code chunk below is used to read the file into the R environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad_sf <- st_read(dsn = \"data/rawdata\", \n                   layer = \"hotosm_tha_roads_lines_shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `hotosm_tha_roads_lines_shp' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2792590 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nCRS:           NA\n```\n\n\n:::\n:::\n\n\n\n## Assigning EPSG code and projection transformation\n\nUpon importing the OSM Export, it is observed from the results that the CRS field shows NA. Hence, we will set the CRS to WGS84 with the default EPSG code of 4326 using `st_set_crs()` of **sf** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad_sf <- st_set_crs(road_sf, 4326)\n```\n:::\n\n\n\nNow, to check the CSR again by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(road_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n\nFollowing which, we can utilise `st_transform()` of **sf** package to re-project `road_sf` from one coordinate system to another coordinate system mathematically.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad_sf <- st_transform(road_sf,\n                        crs = 32647)\n```\n:::\n\n\n\n## Viewing the `road_sf` data frame\n\nNext, let us display the content of `road_sf` sf data frame as shown in the code chunk below using `st_geometry()` and `glimpse()` functions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(road_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 2792590 features \nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 325313.7 ymin: 624248.4 xmax: 1215576 ymax: 2263968\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(road_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,792,590\nColumns: 15\n$ name       <chr> \"ถนนฉลองกรุง\", \"ซอยฉลองกรุง 1/1\", NA, NA, \"ถนนฉลองกรุง\", NA, \"…\n$ name_en    <chr> \"Chalong Krung Road\", \"Soi Chalong Krung 1/1\", NA, NA, \"Cha…\n$ highway    <chr> \"secondary\", \"residential\", \"secondary_link\", \"service\", \"s…\n$ surface    <chr> \"paved\", NA, NA, NA, \"concrete\", NA, NA, \"unpaved\", NA, NA,…\n$ smoothness <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ width      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ lanes      <chr> NA, NA, NA, NA, \"2\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ oneway     <chr> \"yes\", NA, \"yes\", NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA…\n$ bridge     <chr> NA, NA, NA, NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ layer      <chr> NA, NA, NA, NA, \"1\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ source     <chr> NA, NA, NA, NA, \"Bing\", NA, NA, \"GPS\", NA, NA, NA, NA, NA, …\n$ name_th    <chr> \"ถนนฉลองกรุง\", \"ซอยฉลองกรุง 1/1\", NA, NA, \"ถนนฉลองกรุง\", NA, \"…\n$ osm_id     <dbl> 1125681229, 594401607, 472283206, 594401608, 116847248, 317…\n$ osm_type   <chr> \"ways_line\", \"ways_line\", \"ways_line\", \"ways_line\", \"ways_l…\n$ geometry   <MULTILINESTRING [m]> MULTILINESTRING ((693686.1 ..., MULTILINEST…\n```\n\n\n:::\n:::\n\n\n\n## Final Check\n\nTo check the CSR again by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(road_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n\n## Selecting the relevant highway classifications\n\nAs the road data set provided by OSM is very comprehensive it will increase the computation times a lot and some of the classes might not be useful for analysis. Hence, we will explore what are the classes included and selecting those relevant ones based on the [Highway Classification](https://wiki.openstreetmap.org/wiki/WikiProject_Thailand#Highway_classification).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(road_sf$highway)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"secondary\"      \"residential\"    \"secondary_link\" \"service\"       \n [5] \"tertiary\"       \"path\"           \"footway\"        \"track\"         \n [9] \"unclassified\"   \"trunk\"          \"trunk_link\"     \"primary\"       \n[13] \"primary_link\"   \"steps\"          \"motorway_link\"  \"cycleway\"      \n[17] \"pedestrian\"     \"tertiary_link\"  \"motorway\"       \"construction\"  \n[21] \"road\"           \"raceway\"        \"corridor\"       \"living_street\" \n[25] \"escape\"         \"proposed\"       \"busway\"         \"bridleway\"     \n[29] \"abandoned\"      \"parth\"          \"barrier\"        \"paved\"         \n```\n\n\n:::\n:::\n\n\n\nThe code chunk below is used to filter only the relevant highways based on the classification and selecting other relevant columns that will be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad_sf <- road_sf %>%\n    filter(highway %in% c(\"motorway\", \"trunk\", \"primary\", \"secondary\", \"tertiary\", \"unclassified\",\n                          \"residential\", \"service\")) %>%\n    select(highway, osm_id, osm_type, geometry)\n```\n:::\n\n\n\n#### Saving the OSM rds file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(road_sf, \"data/rds/road_sf.rds\")\n```\n:::\n\n\n\nTo retrieve file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad_sf <- read_rds(\"data/rds/road_sf.rds\")\n```\n:::\n\n\n:::\n\n## Thailand - Subnational Administrative Boundaries\n\n::: panel-tabset\n## Projection\n\nReading the administrative boundaries for Thailand\n\nIt is also relevant to note from the HDX website the levels stated in the dataset represent different administrative levels.\n\n[![Thailand - Subnational Administrative Boundaries](images/notethaadm.png)](https://data.humdata.org/dataset/cod-ab-tha?)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthadm <- st_read(dsn = \"data/rawdata\", \n                 layer = \"tha_admbnda_adm1_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\nThe message above reveals that the geospatial objects are multipolygon features. There are a total of 77 multipolygon feature representing the different provinces in Thailand and 16 fields in thadm (Thailand Administrative) simple feature data frame. `thadm` is in WGS84 Geodetic coordinates system. The bounding box provides the x extend and y extend of the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthadm2 <- st_read(dsn = \"data/rawdata\", \n                 layer = \"tha_admbnda_adm2_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm2_rtsd_20220121' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 928 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n## Working with `st_geometry()`\n\nThe column in the sf data.frame that contains the geometries is a list, of class sfc. We can retrieve the geometry list-column in this case by thadm\\$geometry, but the more generic way uses st_geometry() as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(thadm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 77 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\n\n\nNotice that the print only displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(thadm2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 928 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\n\n\n## Working with projection\n\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\n\nThis is an example the coordinate system of mpsz simple feature data frame by using st_crs() of sf package as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thadm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n\nAlthough thadm data frame is projected in WGS84 but when we read until the end of the print, it indicates that the EPSG is 4326. This is a wrong EPSG code because the correct EPSG code for Thailand should be [32647](https://epsg.io/32647).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thadm2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthadm <- st_transform(thadm, crs = 32647)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthadm2 <- st_transform(thadm2, crs = 32647)\n```\n:::\n\n\n\nDoing checks to ensure the following steps have been carried out correctly.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thadm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thadm2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n\n## Working with `glimpse()`\n\nBesides the basic feature information, we also would like to learn more about the associated attribute information in the data frame. This is the time `glimpse()` of dplyr comes in handy as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(thadm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 77\nColumns: 17\n$ Shape_Leng <dbl> 2.417227, 1.695100, 1.251111, 1.884945, 3.041716, 1.739908,…\n$ Shape_Area <dbl> 0.13133873, 0.07926199, 0.05323766, 0.12698345, 0.21393797,…\n$ ADM1_EN    <chr> \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"P…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"สมุทรปราการ\", \"นนทบุรี\", \"ปทุมธานี\", \"พระนครศรีอ…\n$ ADM1_PCODE <chr> \"TH10\", \"TH11\", \"TH12\", \"TH13\", \"TH14\", \"TH15\", \"TH16\", \"TH…\n$ ADM1_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((674339.8 15..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\n\n`glimpse()` report reveals the data type of each fields. For example `date` field is in **date** data type, `Shape_Leng` and `Shape_Area` fields are all in **double-precision values**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(thadm2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 928\nColumns: 20\n$ Shape_Leng <dbl> 0.08541733, 0.13413177, 0.67634217, 0.08588647, 0.30172202,…\n$ Shape_Area <dbl> 0.0004504685, 0.0009501914, 0.0198588627, 0.0003369561, 0.0…\n$ ADM2_EN    <chr> \"Phra Nakhon\", \"Dusit\", \"Nong Chok\", \"Bang Rak\", \"Bang Khen…\n$ ADM2_TH    <chr> \"พระนคร\", \"ดุสิต\", \"หนองจอก\", \"บางรัก\", \"บางเขน\", \"บางกะปิ\", \"ป…\n$ ADM2_PCODE <chr> \"TH1001\", \"TH1002\", \"TH1003\", \"TH1004\", \"TH1005\", \"TH1006\",…\n$ ADM2_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1_EN    <chr> \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Ban…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหาน…\n$ ADM1_PCODE <chr> \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((662263.2 15..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\n\n## Plotting the Geospatial Data\n\nIn geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. This is the time `plot()` of R Graphic comes in very handy as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(thadm))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-32-1.png){width=1152}\n:::\n:::\n\n\n\nAlternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(thadm[\"ADM1_EN\"])\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n`plot()` function is utilised again to visualise the features but consisting the districts\n\n::: panel-tabset\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(thadm2))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-34-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(thadm2[\"ADM2_EN\"])\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(thadm)+\n  tm_fill(\"ADM1_EN\", \n          title = \"Thailand Boundary\") +\n  tm_layout(main.title = \"Map of Thailand\",\n            main.title.position = \"center\",\n            main.title.size = 1.5,\n            legend.height = 0.6, \n            legend.width = 0.4,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"4star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2) +\n  tmap_options(max.categories = 77)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-36-1.png){width=1440}\n:::\n:::\n\n\n:::\n\n## Data Wrangling\n\n### Defining Study Area of Data\n\n`bmr_provinces` will be used in confining the geospatial data to the study area,we will utilise the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthadm_bmr <- thadm %>%\n  filter(ADM1_EN %in% bmr_provinces)\n\nsummary(thadm_bmr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Shape_Leng      Shape_Area        ADM1_EN            ADM1_TH         \n Min.   :1.251   Min.   :0.05324   Length:6           Length:6          \n 1st Qu.:1.599   1st Qu.:0.07349   Class :character   Class :character  \n Median :1.790   Median :0.10312   Mode  :character   Mode  :character  \n Mean   :1.880   Mean   :0.10688                                        \n 3rd Qu.:2.284   3rd Qu.:0.13025                                        \n Max.   :2.463   Max.   :0.17891                                        \n  ADM1_PCODE          ADM1_REF          ADM1ALT1EN         ADM1ALT2EN       \n Length:6           Length:6           Length:6           Length:6          \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  ADM1ALT1TH         ADM1ALT2TH          ADM0_EN            ADM0_TH         \n Length:6           Length:6           Length:6           Length:6          \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  ADM0_PCODE             date               validOn          \n Length:6           Min.   :2019-02-18   Min.   :2022-01-22  \n Class :character   1st Qu.:2019-02-18   1st Qu.:2022-01-22  \n Mode  :character   Median :2019-02-18   Median :2022-01-22  \n                    Mean   :2019-02-18   Mean   :2022-01-22  \n                    3rd Qu.:2019-02-18   3rd Qu.:2022-01-22  \n                    Max.   :2019-02-18   Max.   :2022-01-22  \n    validTo                    geometry\n Min.   :-001-11-30   MULTIPOLYGON :6  \n 1st Qu.:-001-11-30   epsg:32647   :0  \n Median :-001-11-30   +proj=utm ...:0  \n Mean   :-001-11-30                    \n 3rd Qu.:-001-11-30                    \n Max.   :-001-11-30                    \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthadm2_bmr <- thadm2 %>%\n  filter(ADM1_EN %in% bmr_provinces)\n\nsummary(thadm2_bmr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Shape_Leng        Shape_Area          ADM2_EN            ADM2_TH         \n Min.   :0.05123   Min.   :0.0001177   Length:79          Length:79         \n 1st Qu.:0.16740   1st Qu.:0.0010931   Class :character   Class :character  \n Median :0.28074   Median :0.0030914   Mode  :character   Mode  :character  \n Mean   :0.41054   Mean   :0.0081177                                        \n 3rd Qu.:0.61018   3rd Qu.:0.0107533                                        \n Max.   :1.26897   Max.   :0.0454895                                        \n  ADM2_PCODE          ADM2_REF          ADM2ALT1EN         ADM2ALT2EN       \n Length:79          Length:79          Length:79          Length:79         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  ADM2ALT1TH         ADM2ALT2TH          ADM1_EN            ADM1_TH         \n Length:79          Length:79          Length:79          Length:79         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  ADM1_PCODE          ADM0_EN            ADM0_TH           ADM0_PCODE       \n Length:79          Length:79          Length:79          Length:79         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      date               validOn              validTo          \n Min.   :2019-02-18   Min.   :2022-01-22   Min.   :-001-11-30  \n 1st Qu.:2019-02-18   1st Qu.:2022-01-22   1st Qu.:-001-11-30  \n Median :2019-02-18   Median :2022-01-22   Median :-001-11-30  \n Mean   :2019-02-18   Mean   :2022-01-22   Mean   :-001-11-30  \n 3rd Qu.:2019-02-18   3rd Qu.:2022-01-22   3rd Qu.:-001-11-30  \n Max.   :2019-02-18   Max.   :2022-01-22   Max.   :-001-11-30  \n          geometry \n MULTIPOLYGON :79  \n epsg:32647   : 0  \n +proj=utm ...: 0  \n                   \n                   \n                   \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(thadm_bmr)+\n  tm_fill(\"ADM1_EN\", \n          title = \"Thailand BMR\") +\n  tm_layout(main.title = \"Maping of Bangkok Metropolitan Region\",\n            main.title.position = \"center\",\n            main.title.size = 1.5,\n            legend.height = 0.6, \n            legend.width = 0.4,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"4star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-39-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(thadm2_bmr)+\n  tm_fill(\"ADM1_EN\", \n          title = \"Thailand BMR\") +\n  tm_layout(main.title = \"Maping of Bangkok Metropolitan Region\",\n            main.title.position = \"center\",\n            main.title.size = 1.5,\n            legend.height = 0.6, \n            legend.width = 0.4,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"4star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-40-1.png){width=960}\n:::\n:::\n\n\n\nThe simple feature data frame is saved into a physical file for usage. By doing so the need to repeat the steps above is not needed.\n\n#### Saving the Province level rds file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(thadm_bmr, \"data/rds/thadm_bmr.rds\")\n```\n:::\n\n\n\nTo retrieve file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthadm_bmr <- read_rds(\"data/rds/thadm_bmr.rds\")\n```\n:::\n\n\n\n#### Saving the District level rds file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(thadm2_bmr, \"data/rds/thadm2_bmr.rds\")\n```\n:::\n\n\n\nTo retrieve file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthadm2_bmr <- read_rds(\"data/rds/thadm2_bmr.rds\")\n```\n:::\n\n\n\n## Deriving the intersection of BMR on the province level\n\nIn this step, the code chunk uses `st_intersection()` at the province level and saved as an RDS file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nth_bmr_province <- st_intersection(thadm_bmr, road_sf)\n```\n:::\n\n\n\nFollowing the earlier steps, this will be saved as an RDS file in order to improve computational efficiency.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(th_bmr_province, \"data/rds/th_bmr_province.rds\") \n```\n:::\n\n\n\nTo retrieve file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nth_bmr_province <- read_rds(\"data/rds/th_bmr_province.rds\")\n```\n:::\n\n\n\nIn this following step, `st_intersection()` function is applied at the district level and saved as an RDS file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nth_bmr_network <- st_intersection(thadm2_bmr, th_bmr_province)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(th_bmr_network,\"data/rds/th_bmr_network.rds\")\n```\n:::\n\n\n\nTo retrieve file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nth_bmr_network <- read_rds(\"data/rds/th_bmr_network.rds\")\n```\n:::\n\n\n\n## Exploratory Data Analysis (EDA)\n\n### Bar Plot\n\nWe will proceed to do some initial visualisation of the data to get a better sense of the accident data.\n\nThe barplot while not classified under as a spatial EDA kick-starts the EDA process.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rdacc_sf_bmr, aes(x = province_en)) +\n  geom_bar(fill = \"salmon\", color = \"black\", bins = 20) +\n  geom_text(stat = \"count\", aes(label = after_stat(count)), vjust = -0.5) +\n  labs(title = \"Count of Accidents by Province within BMR\",\n       x = \"Province\",\n       y = \"Count of Accidents\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-51-1.png){width=960}\n:::\n:::\n\n\n\nFrom the barplot it can be observed that out of the 6 provinces in the BMR, Bangkok has the highest count of accidents followed by Samut Prakan and Pathum Thani.\n\n### BMR map plot using `tmap()` elements\n\nThe elements of tmap are utilised in the code chunk below to plat a cartographic map to supplement the initial observations in the bar plot.\n\nMaking use of the `view mode` it presents details for each accident point in the BMR, stating the `presumed_cause`, `accident_type`, weather and road conditions as well as shown in a snippet below.\n\n[Snapshot of an accident point](images/snippet1.png)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n\ntm_shape(thadm2_bmr) +\n  tm_borders(alpha = 1, col = \"black\") +\n  tm_fill(\"ADM1_EN\") +\n  \ntm_shape(rdacc_sf_bmr) +\n  tm_dots(col = \"darkred\", alpha = 0.5, size = 0.05) +\n  tm_layout(frame = FALSE) +\n  tm_compass(type = \"4star\", size = 2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-52-1.png){width=960}\n:::\n:::\n\n\n\nBased on the plot above, some observations can be inferred from the map visual where accidents tend to be more concentrated in the provinces of Bangkok, Samut Prakan and Pathum Thani.\n\n### Temporal factors\n\nA series of time factors ranging from years to hours are also shown in relation to accident occurences.\n\n::: panel-tabset\n#### Years\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rdacc_sf_bmr, aes(x = Year)) +\n  geom_bar(fill = \"blue\", color = \"black\") +\n labs(x = \"Month\", y = \"Count\", title = \"Barplot of Accidents in BMR across Years\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n\n\nBased on the year observations the accidents seem relatively even with the exception of year 2022 surpassing a 3500 accident count.\n\n#### Months\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rdacc_sf_bmr, aes(x = Month_fac)) +\n  geom_bar(fill = \"blue\", color = \"black\") +\n labs(x = \"Month\", y = \"Count\", title = \"Barplot of Accidents in BMR across Months\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n\nFor a month period, we can observe that the Months of January, April, October and December stand out amongst the rest of the months. A simple explanation could be:\n\n-   January (New Year celebrations, Chinese New Year)\n-   April (Songkran)\n-   October (Festivals - King Chulalongkorn Day etc. or Increasing tourist visits in Q4)\n-   December (Chrismas and End of Year celebrations)\n\nNote that this are some assumptions based on occurring events/festivals that occur in Thailand.\n\n#### Days\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rdacc_sf_bmr, aes(x = Dayofweek)) +\n  geom_bar(fill = \"blue\", color = \"black\") +\n labs(x = \"Month\", y = \"Count\", title = \"Barplot of Accidents in BMR across Days\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n\n\n#### Hours\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rdacc_sf_bmr, aes(x = Hour_of_day)) +\n  geom_bar(fill = \"blue\", color = \"black\") +\n labs(x = \"Hour of Day\", y = \"Count\", title = \"Barplot of Accidents in BMR across 24 hours\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n\nHigher occurence of accidents occuring during the following hours:\n\n-   7am - 11am\n-   1pm - 4pm\n-   7pm\n:::\n\n## Geospatial Analysis\n\n### Geospatial Data Wrangling\n\nMoving to geospatial analysis, the packages require the input geospatial data in sp’s Spatial\\* classes. In this section, simple feature data frame will be converted to sp’s Spatial\\* class.\n\n#### Converting sf data frames to sp’s Spatial class\n\nThe code chunk below uses as_Spatial() of **sf** package to convert the geospatial data from simple feature data frame to sp's Spatial class.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_accidents <- as_Spatial(rdacc_sf_bmr)\nbmr <- as_Spatial(thadm_bmr)\n```\n:::\n\n\n\nDisplaying the information of the Spatial\\* classes as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_accidents\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 12986 \nextent      : 591277.5, 710166.1, 1486846, 1576520  (xmin, xmax, ymin, ymax)\ncrs         : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nvariables   : 22\nnames       : acc_code, incident_datetime, report_datetime,   province_th,  province_en,                           agency,                                       route,         vehicle_type,        presumed_cause,                    accident_type, number_of_vehicles_involved, number_of_fatalities, number_of_injuries, weather_condition,           road_description, ... \nmin values  :   571882,        1546309500,      1546311900,  กรุงเทพมหานคร,      Bangkok,           department of highways,        เชื่อมทางหลวงท้องถิ่นบางเสาธง - บ้านช้างตาย, 4-wheel pickup truck,    abrupt lane change, collision at intersection corner,                           0,                    0,                  0,             clear, connecting to private area, ... \nmax values  :  7570954,        1672528260,      1674726540,      สมุทรสาคร, Samut Sakhon, expressway authority of thailand,                          อุดมสุข - สมุทรปราการ,                  van, worn-out/tire blowout,     turning/retreating collision,                          12,                   13,                 51,             rainy,             y-intersection, ... \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPolygonsDataFrame \nfeatures    : 6 \nextent      : 587893.5, 712440.5, 1484414, 1579076  (xmin, xmax, ymin, ymax)\ncrs         : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nvariables   : 16\nnames       :    Shape_Leng,      Shape_Area,      ADM1_EN,       ADM1_TH, ADM1_PCODE, ADM1_REF, ADM1ALT1EN, ADM1ALT2EN, ADM1ALT1TH, ADM1ALT2TH,  ADM0_EN,   ADM0_TH, ADM0_PCODE,  date, validOn, ... \nmin values  : 1.25111117749, 0.0532376597241,      Bangkok,  กรุงเทพมหานคร,       TH10,       NA,         NA,         NA,         NA,         NA, Thailand, ประเทศไทย,         TH, 17945,   19014, ... \nmax values  : 2.46303035967,  0.178914199749, Samut Sakhon,      สมุทรสาคร,       TH74,       NA,         NA,         NA,         NA,         NA, Thailand, ประเทศไทย,         TH, 17945,   19014, ... \n```\n\n\n:::\n:::\n\n\n\n#### Converting Spatial class into generic sp format\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_accidents_sp <- as(bmr_accidents, \"SpatialPoints\")\n\nbmr_sp <- as(bmr, \"SpatialPolygons\")\n```\n:::\n\n\n\nDisplaying the sp objects properties as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_accidents_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPoints \nfeatures    : 12986 \nextent      : 591277.5, 710166.1, 1486846, 1576520  (xmin, xmax, ymin, ymax)\ncrs         : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPolygons \nfeatures    : 6 \nextent      : 587893.5, 712440.5, 1484414, 1579076  (xmin, xmax, ymin, ymax)\ncrs         : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \n```\n\n\n:::\n:::\n\n\n\n#### Converting the generic sp format into spatstat’s ppp format\n\nNext, as.ppp() function of **spatstat** will be used to convert the spatial data into spatstat’s ppp object format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_accidents_ppp <- as.ppp(rdacc_sf_bmr)\n\nbmr_accidents_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 12986 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(bmr_accidents_ppp)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n:::\n\n\n\nUsing the `summary()` function allows a preview of the summary statistics of the newly created ppp object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bmr_accidents_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  12986 points\nAverage intensity 1.218049e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 571882 3788970 3834532 4314457 6092694 7570954 \n\nWindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n                    (118900 x 89670 units)\nWindow area = 10661300000 square units\n```\n\n\n:::\n:::\n\n\n\n##### Handling duplicated points\n\nBefore any further evaluation, the ***ppp*** object will be checked for duplicates using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(bmr_accidents_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\nUpon running the code chunk it gives a result of FALSE indicating no duplicated observations.\n\nTo count the number of co-incidence points, the multiplicity() function will be used as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiplicity(bmr_accidents_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n   [37] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n   [73] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [109] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [145] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [181] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [217] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [253] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [289] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [325] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [361] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [397] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [433] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [469] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [505] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [541] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [577] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [613] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [649] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [685] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [721] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [757] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [793] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [829] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [865] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [901] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [937] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [973] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1009] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1045] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1081] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1117] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1153] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1189] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1225] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1261] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1369] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1405] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1441] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1477] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1513] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1549] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1585] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1621] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1657] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1693] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1729] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1765] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1801] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1837] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1873] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1909] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1945] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [1981] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2017] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2053] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2089] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2125] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2161] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2197] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2233] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2269] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2305] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2341] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2377] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2413] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2449] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2485] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2521] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2557] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2629] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2665] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2701] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2737] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2773] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2809] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2845] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2881] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2917] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2953] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [2989] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3025] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3061] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3097] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3133] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3169] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3205] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3241] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3277] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3313] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3349] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3385] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3421] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3457] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3493] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3529] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3565] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3601] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3637] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3673] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3709] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3745] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3781] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3817] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3853] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3925] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3961] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [3997] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4033] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4069] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4105] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4141] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4177] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4213] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4249] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4285] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4321] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4357] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4393] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4429] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4465] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4501] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4537] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4573] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4609] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4645] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4681] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4717] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4753] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4789] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4825] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4861] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4897] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4933] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [4969] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5005] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5041] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5077] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5113] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5221] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5257] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5293] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5329] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5365] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5401] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5437] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5473] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5509] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5545] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5581] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5617] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5653] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5689] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5725] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5761] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5797] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5833] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5869] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5905] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5941] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [5977] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6013] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6049] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6085] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6121] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6157] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6193] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6229] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6265] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6301] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6337] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6373] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6409] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6517] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6553] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6589] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6625] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6661] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6697] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6733] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6769] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6805] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6841] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6877] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6913] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6949] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [6985] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7021] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7057] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7093] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7129] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7165] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7201] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7237] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7273] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7309] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7345] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7381] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7417] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7453] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7489] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7525] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7561] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7597] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7633] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7669] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7705] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7777] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7813] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7849] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7885] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7921] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7957] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [7993] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8029] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8065] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8101] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8137] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8173] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8209] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8245] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8281] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8317] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8353] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8389] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8425] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8461] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8497] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8533] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8569] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8605] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8641] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8677] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8713] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8749] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8785] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8821] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8857] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8893] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8929] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [8965] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9001] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9073] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9109] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9145] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9181] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9217] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9253] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9289] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9325] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9361] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9397] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9433] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9469] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9505] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9541] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9577] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9613] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9649] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9685] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9721] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9757] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9793] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9829] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9865] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9901] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9937] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [9973] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10009] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10045] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10081] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10117] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10153] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10189] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10225] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10261] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10369] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10405] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10441] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10477] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10513] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10549] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10585] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10621] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10657] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10693] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10729] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10765] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10801] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10837] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10873] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10909] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10945] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[10981] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11017] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11053] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11089] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11125] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11161] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11197] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11233] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11269] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11305] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11341] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11377] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11413] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11449] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11485] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11521] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11557] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11629] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11665] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11701] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11737] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11773] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11809] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11845] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11881] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11917] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11953] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[11989] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12025] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12061] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12097] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12133] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12169] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12205] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12241] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12277] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12313] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12349] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12385] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12421] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12457] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12493] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12529] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12565] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12601] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12637] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12673] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12709] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12745] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12781] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12817] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12853] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12925] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[12961] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n```\n\n\n:::\n:::\n\n\n\nFollowing which to know how many locations have more than one point event, the code chunk below can be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(multiplicity(bmr_accidents_ppp) > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\nThe output shows that there 0 duplicated point events.\n\nThe code chunk below is used to view the point events and plot the `rdacc_sf_bmr` data with the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(rdacc_sf_bmr) +\n  tm_dots(alpha = 0.5,\n          size = 0.05)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-69-1.png){width=672}\n:::\n:::\n\n\n\n\nAdditionally, the code chunk below is used to plot a map to show spatial patterns of the accidents.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(thadm_bmr) +\n  tm_polygons() +\ntm_shape(thadm2_bmr) +\n  tm_polygons() +\ntm_shape(rdacc_sf_bmr)+\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-70-1.png){width=672}\n:::\n:::\n\n\n\n\n### Creating *owin* object\n\nIn the next step of spatial point patterns analysis, is to confine the analysis with a geographical area (etc. like Singapore boundary) and in the case for this exercise the BMR. In spatstat, an object called owin is specially designed to help represent this polygonal region.\n\nThe code chunk below is used to covert `bmr_sp` SpatialPolygon object into owin object of spatstat and subsequently the plot with a summary() function of Base R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_owin <- as.owin(thadm2_bmr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(bmr_owin)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-72-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bmr_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n```\n\n\n:::\n:::\n\n\n\n### Combining point events object and ***owin*** object\n\nIn the final stage of geospatial data wrangling, we will extract the accident events that are located within the BMR by using the code chunk below.\n\nThe output object combines both the point and polygon features in one ppp object class as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_accidents_ppp = bmr_accidents_ppp[bmr_owin]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bmr_accidents_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  12986 points\nAverage intensity 1.693312e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 571882 3788970 3834532 4314457 6092694 7570954 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n```\n\n\n:::\n:::\n\n\n\nThe newly derived `bmr_accidents_ppp` is plotted below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(bmr_accidents_ppp)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-76-1.png){width=672}\n:::\n:::\n\n\n\n### 1st Order Spatial Point Patterns analysis (SPPA)\n\nIn this section,first-order SPPA will be performed by using **spatstat** package. The **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes of accident data will be derived before performing **Confirmatory Spatial Point Patterns Analysis** by using Nearest Neighbour statistics.\n\n### Kernel Density Estimation\n\nThe computation of kernel density estimation (KDE) of accident spots in BMR. The code chunk below computeskernel density by using the following configurations of density() of spatstat:\n\n::: callout-note\n-   *bw.diggle()* automatic bandwidth selection method. Primarily because the primary focus is identifying detailed accident hotspots, where fine-scale resolution is important, *bw.diggle()* is a solid choice since it provides more granular bandwidth selection, allowing for the identification of localized patterns in the data.\n-   The smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_bmr_accidents_bw <- density(bmr_accidents_ppp,\n                                sigma = bw.diggle,\n                                edge = TRUE,\n                                kernel = \"gaussian\")\nplot(kde_bmr_accidents_bw)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-77-1.png){width=672}\n:::\n:::\n\n\n\nFrom the plot, we can observe that the output range from 0 to 0.00015 which are too small to comprehend. This due to the unit of measurement in metres, implying that the density values computed is in the unit of \"number of points per square meter\". \n\nCode chunk below retrieves the bandwidth used to compute the kde layer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw <- bw.diggle(bmr_accidents_ppp)\nbw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n13.41546 \n```\n\n\n:::\n:::\n\n\n#### Rescaling of KDE Values\n\nThe `rescale.ppp()` function of the spatstat package is then used to convert the unit of measurement from metres to kilometres.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_accidents_ppp.km <- rescale.ppp(bmr_accidents_ppp, 1000, \"km\")\n```\n:::\n\n\n\nUpon rescaling, the `density()` can be re-run with the rescaled data and plotting the output again.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_bmr_accidents.bw <- density(bmr_accidents_ppp.km,\n                                sigma = bw.diggle,\n                                edge = TRUE,\n                                kernel = \"gaussian\")\nplot(kde_bmr_accidents.bw)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-80-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nNotice that the output plot is identical to the earlier version, the only changes are the data values in the legend.\n:::\n\n### Fixed and Adaptive KDE\n\n#### Computing KDE by using fixed bandwidth\n\nIn this section, the KDE layer will be computed with a bandwidth of 1000 metres. \n\n> In the code chunk below, the sigma value used is 1 as the unit of measurement for **bmr_accidents_ppp.km** is in kilometres. (e.g. 1000m = 1km)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_bmr_accidents_1 <- density(bmr_accidents_ppp.km,\n                               sigma=1,\n                               edge=TRUE,\n                               kernel=\"gaussian\")\nplot(kde_bmr_accidents_1)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-81-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-tip\n## Observations\nThe plot seems to highlight several concentrated accident hotspots along major roads and highways. This fine-level resolution will further aid in identifying detailed spatial trends in accident occurrences, which is important for urban traffic management.\n\nThe next steps involve validating these findings with confirmatory spatial analysis (such as nearest neighbour statistics) or possibly further refining bandwidth selection to ensure that hotspots are accurately represented across various road types or urban zones.\n:::\n\n### Computing KDE by using *adaptive bandwidth*\n\nWith how the plot seems to show concentrated accident hotspots, due to how a fixed bandwidth method is very sensitive to highly skewed distribution of spatial point patterns over geographical units for example urban versus rural.\n\nOne way to overcome this problem is by using adaptive bandwidth instead. In this section, adaptive kernel density estimation will be derived by using `density.adaptive() `of **spatstat**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_bmr_accidents_adaptive <- adaptive.density(bmr_accidents_ppp.km,\n                                               method=\"kernel\")\n\n\nplot(kde_bmr_accidents_adaptive)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-82-1.png){width=672}\n:::\n:::\n\n\n\nComparing the fixed and adaptive kernel density estimation outputs by using the code chunk below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nplot(kde_bmr_accidents.bw, main = \"Fixed bandwidth\")\nplot(kde_bmr_accidents_adaptive, main = \"Adaptive bandwidth\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-83-1.png){width=1536}\n:::\n:::\n\n\n#### Converting of output into raster\n\nNext, the gridded kernel density objects will be converted into RasterLayer object by using `raster()` of **raster** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_bmr_accidents_bw_raster <- raster(kde_bmr_accidents.bw)\n\nkde_bmr_accidents_bw_raster # Checking the properties of the RasterLayer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.973023, 0.7395512  (x, y)\nextent     : 587.8935, 712.4405, 1484.414, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -4.760739e-14, 233.4629  (min, max)\n```\n\n\n:::\n:::\n\n\nFrom the results, the CRS property is stated as NA.\n\n#### Assigning projection systems\n\nCode chunk below will be used to include the CRS information on kde_bmr_accidents_bw_raster RasterLayer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprojection(kde_bmr_accidents_bw_raster) <- CRS(\"+init=EPSG:32647\")\nkde_bmr_accidents_bw_raster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.973023, 0.7395512  (x, y)\nextent     : 587.8935, 712.4405, 1484.414, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -4.760739e-14, 233.4629  (min, max)\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kde_bmr_accidents_bw_raster) + \n  tm_raster(\"layer\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-86-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbk <- thadm2_bmr %>%\n  filter(ADM1_EN == \"Bangkok\")\nsp <- thadm2_bmr %>%\n  filter(ADM1_EN == \"Samut Prakan\")\npt <- thadm2_bmr %>%\n  filter(ADM1_EN == \"Pathum Thani\")\nnp <- thadm2_bmr %>%\n  filter(ADM1_EN == \"Nakhon Pathom\")\nss <- thadm2_bmr %>%\n  filter(ADM1_EN == \"Samut Sakhon\")\nnt <- thadm2_bmr %>%\n  filter(ADM1_EN == \"Nonthaburi\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(bk, main = \"Bangkok\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-88-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(sp, main = \"Samut Prakan\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-89-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(pt, main = \"Pathum Thani\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-90-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(np, main = \"Nakhon Pathom\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-91-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(3,3))\nplot(ss, main = \"Samut Sakhon\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-92-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(nt, main = \"Nonthaburi\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-93-1.png){width=672}\n:::\n:::\n\n\n\n#### Creating ***owin*** object\n\nSimilarly, now we will convert these sf objects into owin objects that is required by spatstat.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbk_owin = as.owin(bk)\nsp_owin = as.owin(sp)\npt_owin = as.owin(pt)\nnp_owin = as.owin(np)\nss_owin = as.owin(ss)\nnt_owin = as.owin(nt)\n```\n:::\n\n\n\n#### Combining accident points and the study area of BMR\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_accidents_bk_ppp = bmr_accidents_ppp[bk_owin]\nbmr_accidents_sp_ppp = bmr_accidents_ppp[sp_owin]\nbmr_accidents_pt_ppp = bmr_accidents_ppp[pt_owin]\nbmr_accidents_np_ppp = bmr_accidents_ppp[np_owin]\nbmr_accidents_ss_ppp = bmr_accidents_ppp[ss_owin]\nbmr_accidents_nt_ppp = bmr_accidents_ppp[nt_owin]\n```\n:::\n\n\n\nFollowing which, rescale.ppp() function is used to transform the unit of measurement from metres to kilometres similar to what was done in the section above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_accidents_bk_ppp.km = rescale.ppp(bmr_accidents_bk_ppp, 1000, \"km\")\nbmr_accidents_sp_ppp.km = rescale.ppp(bmr_accidents_sp_ppp, 1000, \"km\")\nbmr_accidents_pt_ppp.km = rescale.ppp(bmr_accidents_pt_ppp, 1000, \"km\")\nbmr_accidents_np_ppp.km = rescale.ppp(bmr_accidents_np_ppp, 1000, \"km\")\nbmr_accidents_ss_ppp.km = rescale.ppp(bmr_accidents_ss_ppp, 1000, \"km\")\nbmr_accidents_nt_ppp.km = rescale.ppp(bmr_accidents_nt_ppp, 1000, \"km\")\n```\n:::\n\n\n\nThe code chunk below is used to plot these six study areas (provinces) within the BMR and the location of incidents of the road accidents.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,3))\nplot(bmr_accidents_bk_ppp.km, main=\"Bangkok\")\nplot(bmr_accidents_sp_ppp.km, main=\"Samut Prakan\")\nplot(bmr_accidents_pt_ppp.km, main=\"Pathum Thani\")\nplot(bmr_accidents_np_ppp.km, main=\"Nakhon Pathom\")\nplot(bmr_accidents_ss_ppp.km, main=\"Samut Sakhon\")\nplot(bmr_accidents_nt_ppp.km, main=\"Nonthaburi\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-97-1.png){width=1536}\n:::\n:::\n\n\n\n#### Computing KDE of the study areas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,3))\nplot(density(bmr_accidents_bk_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n             main=\"Bangkok\")\nplot(density(bmr_accidents_sp_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n             main=\"Samut Prakan\")\nplot(density(bmr_accidents_pt_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n             main=\"Pathum Thani\")\nplot(density(bmr_accidents_np_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n             main=\"Nakhon Pathom\")\nplot(density(bmr_accidents_ss_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n             main=\"Samut Sakhon\")\nplot(density(bmr_accidents_nt_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n             main=\"Nonthaburi\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-98-1.png){width=672}\n:::\n:::\n\n\n\n#### Nearest Neighbour Analysis\n\nIn this section, the Clark-Evans test of aggregation for a spatial point patternv will be performed by using `clarkevans.test()` of **statspat**.\n\nThe test hypothesis are:\n\nHo = The distribution of accident spots in BMR are randomly distributed.\n\nH1= The distribution of accident spots in BMR are not randomly distributed.\n\nA 95% confidence interval will be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(bmr_accidents_ppp,\n                correction=\"none\",\n                clipregion=\"bmr_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  bmr_accidents_ppp\nR = 0.19109, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n::: callout-note\n## Conclusions from the test result\nGiven the test result (R = 0.19109) and the very small p-value, we reject the null hypothesis (Ho) at the 95% confidence level. The conclusion is that the distribution of accident spots in BMR is not randomly distributed; instead, the accidents are significantly clustered in certain areas.\n\nThis suggests that accident spots in BMR are more likely to be found around other accident spots, potentially due to factors: like roads having high curves, intersections and driver behaviour of speeding and unsafe lane changing.\n:::\n\n#### Clark and Evans Test\n\n::: panel-tabset\n\n## Bangkok\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(bmr_accidents_bk_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  bmr_accidents_bk_ppp\nR = 0.12115, p-value < 2.2e-16\nalternative hypothesis: two-sided\n```\n\n\n:::\n:::\n\n\n\n## Samut Prakan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(bmr_accidents_sp_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  bmr_accidents_sp_ppp\nR = 0.14367, p-value < 2.2e-16\nalternative hypothesis: two-sided\n```\n\n\n:::\n:::\n\n\n\n## Pathum Thani\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(bmr_accidents_pt_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  bmr_accidents_pt_ppp\nR = 0.24798, p-value < 2.2e-16\nalternative hypothesis: two-sided\n```\n\n\n:::\n:::\n\n\n\n## Nakhon Pathom\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(bmr_accidents_np_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  bmr_accidents_np_ppp\nR = 0.28949, p-value < 2.2e-16\nalternative hypothesis: two-sided\n```\n\n\n:::\n:::\n\n\n\n## Samut Sakhon\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(bmr_accidents_ss_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  bmr_accidents_ss_ppp\nR = 0.23989, p-value < 2.2e-16\nalternative hypothesis: two-sided\n```\n\n\n:::\n:::\n\n\n\n## Nonthaburi\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(bmr_accidents_nt_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  bmr_accidents_nt_ppp\nR = 0.38919, p-value < 2.2e-16\nalternative hypothesis: two-sided\n```\n\n\n:::\n:::\n\n\n:::\n\nFrom the test results from each province their R Values are also of very small p-value, this further helps in the analysis that we reject the null hypothesis (Ho) at the 95% confidence level. The hypothesis that the distribution of accident spots in the provinces are also not randomly distributed; instead, the accidents are significantly clustered in certain areas.",
    "supporting": [
      "Take-home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}