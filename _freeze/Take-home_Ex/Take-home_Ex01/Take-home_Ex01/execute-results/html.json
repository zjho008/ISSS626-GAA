{
  "hash": "90e4b26a16f10c2e20e33165436300a2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 1: Geospatial Analytics for Public Good\"\nauthor: \"Ho Zi Jun\"\ndate: \"Sep 8, 2024\"\ndate-modified: \"last-modified\"\nnumber-sections: true\nnumber-offset: 0\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\neditor: source\n---\n\n\n# Overview: Case study on factors affecting road traffic accidents in the Bangkok Metropolitan Region (BMR)\n\nAccording to the [*World Health Organization (WHO)*](https://www.who.int/news-room/fact-sheets/detail/road-traffic-injuries), road traffic accidents claim the lives of around 1.19 million people annually and leave 20 to 50 million others with non-fatal injuries. Vulnerable road users, such as pedestrians, cyclists, and motorcyclists, account for more than half of these fatalities.\n\nRoad traffic injuries are the leading cause of death for individuals aged 5 to 29. Additionally, two-thirds of road traffic fatalities occur among people of working age (18–59 years). Despite having only about 60% of the world's vehicles, low- and middle-income countries account for 92% of road traffic fatalities.\n\nBeyond the human toll, road accidents impose a significant economic burden on victims and their families due to medical costs and the loss of productivity from those who are killed or disabled. On a national level, these injuries cost countries around 3% of their gross domestic product (GDP).\n\nThailand has the most dangerous roads in Southeast Asia and ranks among the worst globally, with approximately 20,000 deaths from road accidents each year, averaging 56 deaths per day [(WHO)](https://www.who.int/thailand/news/feature-stories/detail/turning-tragedy-into-action--advocacy-and-survival-on-thailand-s-roads) and a million injuries each year, incurring an economic loss of 500,000 million baht.\n\nBetween 2014 and 2021, Thailand saw a rise in accident frequency, with 19% occurring on the national highways, which serve as the main public roads connecting regions, provinces, and key locations. Nationally, there is a 66% chance of encountering accident-prone areas, also known as *'black spots.'* These are distributed as follows: 66% on straight road sections, 13% on curves, 6% at median points of cross intersections, 5% at T- or Y-intersections, 3% at cross intersections, and 2% on both bridges and steep slopes.\n\n## Objectives\n\nThe primary causes of road traffic accidents can be attributed to behavioural factors, such as: driver behaviour, performance, and environmental factors, like weather conditions and road design. While past studies using Spatial Point Patterns Analysis (SPPA) have explored these factors, they often overlook the impact of *temporal* factors, such as season or time of day.\n\nThe task is to identify factors influencing road traffic accidents in the Bangkok Metropolitan Region (BMR) using both spatial and spatio-temporal point patterns analysis. The objectives include visualizing spatio-temporal accident dynamics and conducting detailed spatial and temporal analyses using Network Spatial Point Patterns Analysis methods.\n\n## Datasets\n\nThree basic data sets must be used for this exercise, they are:\n\n-   [Thailand Road Accident \\[2019-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle\n\n    -   This dataset provides comprehensive statistics on recorded road accidents in Thailand, spanning from approximately 2019 to 2022. The data was sourced from raw information provided by the [Office of the Permanent Secretary, Ministry of Transport](https://www.mots.go.th/news/category/411). The dataset encompasses various aspects of road accidents and aims to shed light on the trends and patterns within this critical area of concern, analysis of this data could be crucial in guiding road safety policies and measures\n\n-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.\n\n## Setting Up\n\n### Setting up the R environment\n\nIn this exercise, seven R packages will be used, they are:\n\n| Packages                                                                                        | Description                                                                                                                                                                                                                                                                                                                          |\n|:------------------------------|:----------------------------------------|\n| [*sf*](https://r-spatial.github.io/sf/)                                                         | A relatively new R package specially designed to import, manage and process vector-based geospatial data in R                                                                                                                                                                                                                        |\n| [*spatstat*](https://spatstat.org/)                                                             | Which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.                                                                                                    |\n| [*raster*](https://cran.r-project.org/web/packages/raster/)                                     | Which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this exercise, it will be used to convert image output generate by spatstat into raster format                                                                                                                                        |\n| [*tmap*](https://cran.r-project.org/web/packages/tmap/index.html)                               | which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.                                                                                                                                                                            |\n| [*tidyverse*](https://www.tidyverse.org/)                                                       | a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs                                                                                                                                                                               |\n| [*spNetwork*](https://cran.r-project.org/web/packages/spNetwork/index.html)                     | Which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances |\n| [*clock*](https://www.tidyverse.org/blog/2021/03/clock-0-1-0/)                                  | package providing a comprehensive set of tools for working with date-times                                                                                                                                                                                                                                                           |\n| [*lubridate*](https://cran.r-project.org/web/packages/graphlayouts/vignettes/graphlayouts.html) | package implements some graph layout algorithms that are not available in `igraph` or other packages                                                                                                                                                                                                                                 |\n\n: R Packages {.striped .hover tbl-colwidths=\"\\[25,75\\]\"}\n\nThe code chunk below is used to setup the R environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spatstat, raster, tmap,\n               tidyverse, spNetwork, clock, lubridate)\n```\n:::\n\n\n### Preparing the datasets\n\n#### Importing the Aspatial data\n\nThe `thai_road_accident_2019_2022` data set is csv file format, [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of the **readr** package will be used to import `thai_road_accident_2019_2022.csv` as shown from the code chunk below. The output R Object is called `rdacc` as is a tibble data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc <- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\")\n```\n:::\n\n\nUpon some initial observation of the data set, it is observed that there are missing / NA values in the latitude & longitude columns which will have to be removed. Following which there is also an incident_datetime column which will be utilised to identify the date and time occurrences of accidents. As such that column will be transformed for the date and time to be used for analysis.\n\nThe code chunk below also converts `rdacc` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf <- rdacc %>%\n  filter(!is.na(longitude) & longitude != \"\", \n         !is.na(latitude) & latitude != \"\") %>%\n  mutate(Month_num = month(incident_datetime)) %>%\n  mutate(Month_fac = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE)) %>%\n  mutate(dayofweek = day(incident_datetime)) %>%\n  mutate(hour_of_day = hour(incident_datetime)) %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs = 4326) %>%\n  st_transform(crs = 32647)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf_bmr <- rdacc_sf %>%\n    filter(province_en %in% c(\"Bangkok\", \"Samut Prakan\", \"Pathum Thani\", \"Nakhon Pathom\", \"Samut Sakhon\", \"Nonthaburi\"))\n```\n:::\n\n\nThe simple feature data frame is saved into a physical file for usage. By doing so the need to repeat the steps above is not needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(rdacc_sf_bmr, \"data/rds/rdacc_sf_bmr.rds\")\n```\n:::\n\n\nTo retrieve file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf_bmr <- read_rds(\"data/rds/rdacc_sf_bmr.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(rdacc_sf_bmr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 12986 features \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 591277.5 ymin: 1486846 xmax: 710166.1 ymax: 1576520\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\n\n\n#### Importing Geospatial data\n\n::: panel-tabset\n## Thailand Roads (OpenStreetMap Export)\n\nThis dataset is in `shp` format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad_sf <- st_read(dsn = \"data/rawdata\", \n                   layer = \"hotosm_tha_roads_lines_shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `hotosm_tha_roads_lines_shp' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2792590 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nCRS:           NA\n```\n\n\n:::\n:::\n\nUpon importing the OSM Export, it is observed from the results that the CRS field shows NA. Hence, we will set the CRS to WGS84 with the default EPSG code of 4326 using `st_set_crs()` of **sf** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad_sf <- st_set_crs(road_sf, 4326)\n```\n:::\n\n\nNow, to check the CSR again by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(road_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\nFollowing which, we can utilise `st_transform()` of **sf** package to re-project `road_sf` from one coordinate system to another coordinate system mathematically.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# renamed for understanding\nroad_sf_32647 <- st_transform(road_sf,\n                              crs = 32647)\n```\n:::\n\n\nNext, let us display the content of road_sf_32647 sf data frame as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(road_sf_32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 2792590 features \nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 325313.7 ymin: 624248.4 xmax: 1215576 ymax: 2263968\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(road_sf_32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(road_sf_32647$highway)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"secondary\"      \"residential\"    \"secondary_link\" \"service\"       \n [5] \"tertiary\"       \"path\"           \"footway\"        \"track\"         \n [9] \"unclassified\"   \"trunk\"          \"trunk_link\"     \"primary\"       \n[13] \"primary_link\"   \"steps\"          \"motorway_link\"  \"cycleway\"      \n[17] \"pedestrian\"     \"tertiary_link\"  \"motorway\"       \"construction\"  \n[21] \"road\"           \"raceway\"        \"corridor\"       \"living_street\" \n[25] \"escape\"         \"proposed\"       \"busway\"         \"bridleway\"     \n[29] \"abandoned\"      \"parth\"          \"barrier\"        \"paved\"         \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nroad_sf_32647 <- road_sf_32647 %>%\n    filter(highway %in% c(\"motorway\", \"trunk\", \"primary\", \"secondary\", \"tertiary\", \"unclassified\",\n                          \"residential\", \"service\", \"track\", \"living_street\", \"road\", \"path\", \"footway\"))\n```\n:::\n\n\n:::\n\n## Thailand - Subnational Administrative Boundaries\n\n::: panel-tabset\n\n## Projection\n\nReading the administrative boundaries for Thailand\n\nIt is also relevant to note from the HDX website the levels stated in the dataset represent different administrative levels.\n\n[![Thailand - Subnational Administrative Boundaries](images/notethaadm.png)](https://data.humdata.org/dataset/cod-ab-tha?)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthadm <- st_read(dsn = \"data/rawdata\", \n                 layer = \"tha_admbnda_adm1_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\nThe message above reveals that the geospatial objects are multipolygon features. There are a total of 77 multipolygon feature representing the different provinces in Thailand and 16 fields in thadm (Thailand Administrative) simple feature data frame. `thadm` is in WGS84 Geodetic coordinates system. The bounding box provides the x extend and y extend of the data.\n\n## Working with `st_geometry()`\n\nThe column in the sf data.frame that contains the geometries is a list, of class sfc. We can retrieve the geometry list-column in this case by thadm$geometry, but the more generic way uses st_geometry() as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(thadm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 77 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\nNotice that the print only displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.\n\n## Working with projection\n\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\n\nThis is an example the coordinate system of mpsz simple feature data frame by using st_crs() of sf package as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thadm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\nAlthough thadm data frame is projected in WGS84 but when we read until the end of the print, it indicates that the EPSG is 4326. This is a wrong EPSG code because the correct EPSG code for Thailand should be [32647](https://epsg.io/32647).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthadm <- st_transform(thadm, crs = 32647)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thadm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n## Working with `glimpse()`\n\nBesides the basic feature information, we also would like to learn more about the associated attribute information in the data frame. This is the time `glimpse()` of dplyr comes in handy as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(thadm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 77\nColumns: 17\n$ Shape_Leng <dbl> 2.417227, 1.695100, 1.251111, 1.884945, 3.041716, 1.739908,…\n$ Shape_Area <dbl> 0.13133873, 0.07926199, 0.05323766, 0.12698345, 0.21393797,…\n$ ADM1_EN    <chr> \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"P…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"สมุทรปราการ\", \"นนทบุรี\", \"ปทุมธานี\", \"พระนครศรีอ…\n$ ADM1_PCODE <chr> \"TH10\", \"TH11\", \"TH12\", \"TH13\", \"TH14\", \"TH15\", \"TH16\", \"TH…\n$ ADM1_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((674339.8 15..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n`glimpse()` report reveals the data type of each fields. For example `date` field is in **date** data type, `Shape_Leng` and `Shape_Area` fields are all in **double-precision values**.\n\n## Plotting the Geospatial Data\n\nIn geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. This is the time `plot()` of R Graphic comes in very handy as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(thadm)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\nPlotting only the geometry with the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(thadm))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=1152}\n:::\n:::\n\n\nAlternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(thadm[\"ADM1_EN\"])\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(thadm)+\n  tm_fill(\"ADM1_EN\", \n          title = \"Thailand Boundary\") +\n  tm_layout(main.title = \"Map of Thailand\",\n            main.title.position = \"center\",\n            main.title.size = 1.5,\n            legend.height = 0.6, \n            legend.width = 0.4,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"4star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2) +\n  tmap_options(max.categories = 77)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-25-1.png){width=1440}\n:::\n:::\n\n\n:::\n\n## Data Wrangling\n\n### Defining Study Area of Data\n\nThis project will focus on the [Bangkok Metropolitan Region](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region) (BMR) \nwhich comprises of five provinces surrounding Bangkok, namely, Samut Prakan, Pathum Thani, Nakhon Pathom, Samut Sakhon, and Nonthaburi. These areas are referred to as the Five Provinces and the Vicinity. Together with the Bangkok Metropolitan Area (BMA), they have become the Bangkok Metropolitan Region (BMR) [Source](https://archive.unu.edu/unupress/unupbooks/uu11ee/uu11ee10.htm#:~:text=There%20are%20five%20provinces%20surrounding,BMR)%2C%20or%20Greater%20Bangkok.).\n\nHence, confining the geospatial data to the study area,we will utilise the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthadm_bmr <- thadm %>%\n  filter(ADM1_EN %in% c(\"Bangkok\", \"Samut Prakan\", \"Pathum Thani\", \"Nakhon Pathom\", \"Samut Sakhon\", \"Nonthaburi\"))\n\nsummary(thadm_bmr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Shape_Leng      Shape_Area        ADM1_EN            ADM1_TH         \n Min.   :1.251   Min.   :0.05324   Length:6           Length:6          \n 1st Qu.:1.599   1st Qu.:0.07349   Class :character   Class :character  \n Median :1.790   Median :0.10312   Mode  :character   Mode  :character  \n Mean   :1.880   Mean   :0.10688                                        \n 3rd Qu.:2.284   3rd Qu.:0.13025                                        \n Max.   :2.463   Max.   :0.17891                                        \n  ADM1_PCODE          ADM1_REF          ADM1ALT1EN         ADM1ALT2EN       \n Length:6           Length:6           Length:6           Length:6          \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  ADM1ALT1TH         ADM1ALT2TH          ADM0_EN            ADM0_TH         \n Length:6           Length:6           Length:6           Length:6          \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  ADM0_PCODE             date               validOn          \n Length:6           Min.   :2019-02-18   Min.   :2022-01-22  \n Class :character   1st Qu.:2019-02-18   1st Qu.:2022-01-22  \n Mode  :character   Median :2019-02-18   Median :2022-01-22  \n                    Mean   :2019-02-18   Mean   :2022-01-22  \n                    3rd Qu.:2019-02-18   3rd Qu.:2022-01-22  \n                    Max.   :2019-02-18   Max.   :2022-01-22  \n    validTo                    geometry\n Min.   :-001-11-30   MULTIPOLYGON :6  \n 1st Qu.:-001-11-30   epsg:32647   :0  \n Median :-001-11-30   +proj=utm ...:0  \n Mean   :-001-11-30                    \n 3rd Qu.:-001-11-30                    \n Max.   :-001-11-30                    \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(thadm_bmr)+\n  tm_fill(\"ADM1_EN\", \n          title = \"Thailand BMR\") +\n  tm_layout(main.title = \"Maping of Bangkok Metropolitan Region\",\n            main.title.position = \"center\",\n            main.title.size = 1.5,\n            legend.height = 0.6, \n            legend.width = 0.4,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"4star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-27-1.png){width=960}\n:::\n:::\n\nThe simple feature data frame is saved into a physical file for usage. By doing so the need to repeat the steps above is not needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(thadm_bmr, \"data/rds/thadm_bmr.rds\")\n```\n:::\n\n\nTo retrieve file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthadm_bmr <- read_rds(\"data/rds/thadm_bmr.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nth_bmr_network <- st_intersection(thadm_bmr, road_sf_32647)\n```\n:::\n\n\nThe simple feature data frame is saved into a physical file for usage. By doing so the need to repeat the steps above is not needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(th_bmr_network, \"data/rds/th_bmr_network.rds\")\n```\n:::\n\n\nTo retrieve file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_network <- read_rds(\"data/rds/th_bmr_network.rds\")\n```\n:::\n\n\n## Spatial Exploratory Data Analysis (EDA)\n\nWe will proceed to do some initial visualisation of the data to get a better sense of how accidents may be distributed in the BMR. \n\nThe barplot while not classified under as a spatial EDA kick-starts the EDA process.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rdacc_sf_bmr, aes(x = province_en)) +\n  geom_bar(fill = \"salmon\", color = \"black\", bins = 20) +\n  geom_text(stat = \"count\", aes(label = ..count..), vjust = -0.5) +\n  labs(title = \"Count of Accidents by Province within BMR\",\n       x = \"Province\",\n       y = \"Count of Accidents\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-33-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rdacc_sf_bmr, aes(x = Month_fac)) +\n  geom_bar(fill = \"blue\", color = \"black\") +\n labs(x = \"Month\", y = \"Count\", title = \"Barplot of Accidents in BMR across Months\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rdacc_sf_bmr, aes(x = hour_of_day)) +\n  geom_bar(fill = \"blue\", color = \"black\") +\n labs(x = \"Hour of Day\", y = \"Count\", title = \"Barplot of Accidents in BMR across 24 hours\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n\n## Data Analysis\n\n### Spatio-temporal dynamics\n\n### Spatial analysis\n\n## Analysis Results\n\n### Results of Spatial Analysis of Accidents on the Thailand’s Road Network\n\n### Results of Identifying Accident Black Spots on Thailand's National Highways\n\n## Evaluation\n",
    "supporting": [
      "Take-home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}