{
  "hash": "dffc19018553c3e685f0a220d313bcf2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 3b: Geospatial Analytics\"\nauthor: \"Ho Zi Jun\"\ndate: \"Oct 16, 2024\"\ndate-modified: \"last-modified\"\nnumber-sections: true\nnumber-offset: 2\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\neditor: source\n---\n\n\n\n## Overview\n\nFor take-home exercise 3, it consists of 2 options: T[ake-home Exercise 3a: Modelling Geography of Financial Inclusion with Geographically Weighted Methods]{.underline} & [Take-home Exercise 3b: Predicting HDB Resale Prices with Geographically Weighted Machine Learning Methods]{.underline}. The selected option for this take-home exercise will be **3b**.\n\nHousing plays a crucial role in household wealth across the globe, with purchasing a home representing a significant investment for most individuals. Housing prices are influenced by a variety of factors. Some of these factors are global, such as the overall economic conditions of a country or the inflation rate, while others are specific to individual properties. These factors can be categorised into structural and locational components.\n\n**Structural factors** relate directly to the characteristics of the property, such as its size, amenities, and tenure. \n\n**Locational factors** pertain to the surrounding environment, including proximity to childcare centres, public transportation, and shopping facilities.\n\nTraditionally, predictive models for housing resale prices have been developed using the Ordinary Least Squares (OLS) method. However, this approach does not account for spatial autocorrelation and spatial heterogeneity present in geographic datasets, such as those related to housing transactions. When spatial autocorrelation is present, OLS estimates can produce biased, inconsistent, or inefficient results (Anselin 1998). To address this limitation, **Geographically Weighted Models** (GWMs) have been introduced, offering a more accurate approach to modelling and predicting housing resale prices.\n\n### Task and Outcomes\n\nFor this take-home exercise, the primary dataset should be the **HDB Resale Flat Prices** available on [data.gov.sg](https://data.gov.sg/) The analysis should concentrate on one specific flat type: three-room, four-room, or five-room flats.\n\nThe following is a list of suggested predictors to consider, though students are encouraged to include any other relevant independent variables that may enhance the analysis.\n\n-   Structural factors\n    -   Area of the unit\n    -   Floor level\n    -   Remaining lease\n    -   Age of the unit\n    -   Main Upgrading Program (MUP) completed (optional)\n-   Locational factors\n    -   Proximity to CBD\n    -   Proximity to eldercare\n    -   Proximity to foodcourt/hawker centres\n    -   Proximity to MRT\n    -   Proximity to park\n    -   Proximity to good primary school\n    -   Proximity to shopping mall\n    -   Proximity to supermarket\n    -   Numbers of kindergartens within 350m\n    -   Numbers of childcare centres within 350m\n    -   Numbers of bus stop within 350m\n    -   Numbers of primary school within 1km\n\nThe **four-room flats** will be the chosen flat type for analysis as it is one of the [most common HDB BTO flat types, which offers a comfortable living space for young couples and families](https://www.mynicehome.gov.sg/hdb-how-to/buy-your-flat/a-guide-to-hdb-bto-flat-types/).\n\nAdditionally, in this take-home exercise, we are tasked with calibrating a predictive model to forecast HDB resale prices for the period of July to September 2024, using resale transaction data from 2023 as the basis for analysis.\n\n\n## Installing and Loading R Packages\n\nThe code chunk below will ensure for a list of required R packages to be created, checked for installation, and installed if missing. Once installed, all packages will be loaded for use in the exercise.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, spdep, GWmodel, SpatialML, spatstat, units, gtsummary,\n               tmap, rsample, Metrics, httr, jsonlite, rvest, olsrr, corrplot, ggpubr)\n```\n:::\n\n\n\n## The Data\n\nThe following sections will consist of steps which import, process and wrangling of data.\n\n### HDB resale Data\n\nData used for this exercise is HDB Resale data: a list of HDB resale transacted prices in Singapore from Jan 2017 onwards. It is in csv format which can be downloaded from **data.gov.sg**. \n\n![](images/data.png)\n\nWhen first downloaded, the data was labelled as `ResaleflatpricesbasedonregistrationdatefromJan2017onwards`. Hence, it was subsequently renamed to `resale` for ease of referencing and to avoid unnecessary mistakes. Similar to what is required in the task of using HDB resale transaction records in 2023 to predict HDB resale prices between July-September 2024 the code chunk below filters for transaction records for the entirety of 2023 and July till September 2024.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale <- read_csv(\"data/HDB/rawdata/resale.csv\") %>%\n  filter(month >= \"2023-01\" & month <= \"2024-09\")\n```\n:::\n\n\n\n![resale data snipshot](images/resale.png)\n\nBased on the requirements of this exercise, I have decided to focus my study on four-room flats.\n\n![](images/resale2.png)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroomtype = c('4 ROOM') # '3 ROOM', '4 ROOM', '5 ROOM'\nresale = resale%>%\n  filter(flat_type %in% roomtype)\n```\n:::\n\n\n\nThe observations have been reduced to 20663.\n\nThe code chunk below serves the functions of combining `block` and `street_name` variables to create a new variable `address` (excluding unit number) alongside  `remaining_lease_yr` and `remaining_lease_mth` extracted from `remaining_lease`. This function will supplement our steps later on in creating the model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale %>%\n  mutate(address = paste(block,street_name)) %>%\n  mutate(remaining_lease_yr = as.integer(\n    str_sub(remaining_lease, 0, 2)))%>%\n  mutate(remaining_lease_mth = as.integer(\n    str_sub(remaining_lease, 9, 11)))\n```\n:::\n\n\n\nCode chunk below sorts a list of unique addresses to avoid the issue of repeated geocoding.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_list <- sort(unique(resale_tidy$address))\n```\n:::\n\n\n\nThe following code chunks are used to obtain the postal code of the addresses using geocoding.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_coords <- function(add_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (i in add_list){\n    #print(i)\n\n    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address= i, \n                            postal = postal, \n                            latitude = lat, \n                            longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address= i, \n                                postal = NA, \n                                latitude = NA, \n                                longitude = NA)\n      }\n      \n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address= i, \n                              postal = postal, \n                              latitude = lat, \n                              longitude = lng)\n      }\n    }\n\n    else {\n      new_row <- data.frame(address= i, \n                            postal = NA, \n                            latitude = NA, \n                            longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- get_coords(add_list)\n```\n:::\n\n\n\n::: panel-tabset\n\n## Saving RDS file\n\nThe following code chunk will be used to save the results to avoid having to re-run the code chunks above which will take up additional time and resources.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(coords, \"data/HDB/rds/coords.rds\")\n```\n:::\n\n\n\n## Reading RDS File\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- read_rds('data/HDB/rds/coords.rds')\n```\n:::\n\n\n\n:::\n\n### Structural factors\n\n-   Structural factors\n    -   Area of the unit\n    -   Floor level\n    -   Remaining lease\n    -   Age of the unit\n    -   Main Upgrading Program (MUP) completed (optional)\n\n### Setting CRS \n\nThe code chunk below first creates an sf object before the EPSG code is set for Singapore which is 4326\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale_tidy %>%\n  left_join(coords, by = c(\"address\" = \"address\")) %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %>%\n  st_transform(crs = 3414)\nwrite_rds(resale_tidy, \"data/HDB/rds/resale.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- read_rds(\"data/HDB/rds/resale.rds\")\n```\n:::\n\n\n\n#### Floor Level\n\nAs one of the structural factors the code chunk below is used to view the floor levels in `resale_tidy`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(resale_tidy$storey_range)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"07 TO 09\" \"10 TO 12\" \"01 TO 03\" \"04 TO 06\" \"16 TO 18\" \"25 TO 27\"\n [7] \"13 TO 15\" \"22 TO 24\" \"19 TO 21\" \"28 TO 30\" \"34 TO 36\" \"43 TO 45\"\n[13] \"31 TO 33\" \"46 TO 48\" \"40 TO 42\" \"37 TO 39\" \"49 TO 51\"\n```\n\n\n:::\n:::\n\n\n\nAs the variable for `storey_range` is in string, we will generate it as numeric. However, the `storey_range` as stated follows a range which will make it hard for analysis. Hence, this numeric attribute will be transformed based on the median value ensuring that we have values to work with instead of a range.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale_tidy %>%\n  mutate(\n    level = (as.numeric(str_extract(storey_range, \"^[0-9]+\")) +\n                  as.numeric(str_extract(storey_range, \"[0-9]+$\"))) / 2\n  )\n```\n:::\n\n\n\n#### Remaining Lease & Age of Unit\n\nWe will also do some data wrangling for `remaining_lease_yr` & `remaining_lease_mth`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale_tidy %>%\n  mutate(\n\n# Replace NA in months with 0 as observed in resale_tidy\n\nremaining_lease_mth = if_else(is.na(remaining_lease_mth), 0, remaining_lease_mth),\n    \n# Calculate remaining lease in decimal years\n  remaining_lease = remaining_lease_yr + (remaining_lease_mth / 12),\n    \n# Age of unit calculation based on a HDB 99-year lease\n    unit_age = 99 - remaining_lease\n  ) %>%\n  select(-remaining_lease_yr, -remaining_lease_mth)\n```\n:::\n\n\n\n\n### Locational factors\n\nThe following locational factors will be derived from their respective data sources such as from **data.gov.sg** for this exercise.\n\n-   Locational factors\n    -   **Proximity to CBD**\n    -   **Proximity to elder care**\n    -   **Proximity to hawker centres**\n    -   **Proximity to MRT**\n    -   **Proximity to park**\n    -   **Proximity to CHAS Clinics**\n    -   Proximity to good primary school\n    -   Proximity to shopping mall\n    -   **Proximity to supermarket**\n    -   **Numbers of kindergartens within 350m**\n    -   **Numbers of childcare centres within 350m**\n    -   **Numbers of bus stop within 350m**\n    -   Numbers of primary school within 1km\n\n\n### Geospatial Data\n\nBased on the locational factors above, we will import these geospatial data into the R environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\") %>%\n  st_transform(3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n\n\n:::\n:::\n\n\n\nThe extent of mpsz is shown by using `st_bbox()` of sf package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_bbox(mpsz) #view extent\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare <- st_read(dsn = \"data/geospatial\", layer = \"ELDERCARE\") %>%\n  st_transform(3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `ELDERCARE' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 133 features and 18 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nchas <- st_read(\"data/geospatial/CHASClinics.kml\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MOH_CHAS_CLINICS' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial\\CHASClinics.kml' \n  using driver `KML'\nSimple feature collection with 1193 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.5818 ymin: 1.016264 xmax: 103.9903 ymax: 1.456037\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare <- st_read(\"data/geospatial/ChildCareServices.kml\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `CHILDCARE' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial\\ChildCareServices.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkindergartens <- st_read(\"data/geospatial/Kindergartens.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Kindergartens' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial\\Kindergartens.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 448 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6887 ymin: 1.247759 xmax: 103.9717 ymax: 1.455452\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nparks <- st_read(\"data/geospatial/Parks.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Parks' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial\\Parks.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 430 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6929 ymin: 1.214491 xmax: 104.0538 ymax: 1.462094\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhawker_centre <- st_read(\"data/geospatial/HawkerCentresGEOJSON.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `HawkerCentresGEOJSON' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial\\HawkerCentresGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 125 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6974 ymin: 1.272716 xmax: 103.9882 ymax: 1.449017\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsupermarkets <- st_read(\"data/geospatial/SupermarketsGEOJSON.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `SupermarketsGEOJSON' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial\\SupermarketsGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 526 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6258 ymin: 1.24715 xmax: 104.0036 ymax: 1.461526\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbus_stops <- st_read(dsn = \"data/geospatial\", layer = \"BusStop\") %>%\n  st_transform(crs = 3414) %>%\n  filter(lengths(st_within(., mpsz)) > 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `BusStop' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5166 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48285.52 ymax: 52983.82\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nMRT <- st_read(dsn = \"data/geospatial\", layer = \"RapidTransitSystemStation\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `RapidTransitSystemStation' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 230 features and 5 fields (with 1 geometry empty)\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 6068.209 ymin: 27478.44 xmax: 45377.5 ymax: 47913.58\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\nSys.setenv(OGR_GEOMETRY_ACCEPT_UNCLOSED_RING = \"NO\")\n\nMRT <- MRT[!st_is_empty(MRT), ]\n\n# Convert Polygon to Point\nMRT <- st_centroid(MRT)\n```\n:::\n\n\n\n#### Pre processing Geospatial Data\n\nIn the previous section, we have loaded the geospatial data of interest it was also observed that some of this data consisted of the Z dimension. We will proceed to remove them as well as drop and unnecessary columns to reduce computation time and ensure geometries are valid.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchas <- st_zm(chas)\nchildcare <- st_zm(childcare)\nkindergartens <- st_zm(kindergartens)\nparks <- st_zm(parks)\nhawker_centre <- st_zm(hawker_centre)\nsupermarkets <- st_zm(supermarkets)\n```\n:::\n\n\n\nThe code chunks below are used to remove columns not exactly needed to do analysis as the needed variables are generally the Name for identification and Geometry variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare <- eldercare %>%\n  select(c(1))\n\nchas <- chas %>%\n  select(c(1))\n\nchildcare <- childcare %>%\n  select(c(1))\n\nkindergartens <- kindergartens %>%\n  select(c(1))\n\nparks <- parks %>%\n  select(c(1))\n\nhawker_centre <- hawker_centre %>%\n  select(c(1))\n\nsupermarkets <- supermarkets %>%\n  select(c(1))\n\nbus_stops <- bus_stops %>%\n  select(c(1))\n\nMRT <- MRT %>%\n  select(c(5))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(mpsz) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(eldercare) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(chas) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(childcare) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(kindergartens) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(parks) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(hawker_centre) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(supermarkets) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(bus_stops) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(MRT) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n## Visualising the Data\n\nIn this section we will do quick visualisations without much customisations to ensure that the data is appropriate before proceeding.\n\n::: panel-tabset\n\n## mpsz\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"grey\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n## Eldercare\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"grey\") +\n  tm_shape(eldercare) +\n  tm_dots(col = \"red\", size = 0.1)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n## CHAS\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"grey\") +\n  tm_shape(chas) +\n  tm_dots(col = \"red\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n## Childcare Centre\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"grey\") +\n  tm_shape(childcare) +\n  tm_dots(col = \"red\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n## Kindergartens\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"grey\") +\n  tm_shape(kindergartens) +\n  tm_dots(col = \"red\", size = 0.08)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n## Parks (NEA)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"grey\") +\n  tm_shape(parks) +\n  tm_dots(col = \"red\", size = 0.08)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n## Hawker Centres\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"grey\") +\n  tm_shape(hawker_centre) +\n  tm_dots(col = \"red\", size = 0.1)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n## Supermarkets\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"grey\") +\n  tm_shape(supermarkets) +\n  tm_dots(col = \"red\", size = 0.08)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n## Bus Stops\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"grey\") +\n  tm_shape(bus_stops) +\n  tm_dots(col = \"red\", size = 0.005)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n## MRT Stations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"grey\") +\n  tm_shape(MRT) +\n  tm_dots(col = \"red\", size = 0.1)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n:::\n\nBased on the above visualisations the data points look in place without any abnomalities.\n\n## Locational Factors (Proximity Calculation)\n\nNow to calculate the proximity of HDB flats to relevant facilities. The provided proximity function streamlines this process by calculating the minimum distance from each feature in df1 to the nearest feature in df2 and assigning this distance to a new column specified by `varname`.\n\nThe following locational factors will be calculated in terms of proximity:\n\n    -   Proximity to CBD (Raffles Place & Tanjong Pagar MRT)\n    -   Proximity to eldercare\n    -   Proximity to CHAS Clinics\n    -   Proximity to hawker centres\n    -   Proximity to MRT\n    -   Proximity to park\n    -   Proximity to supermarket\n    -   Numbers of kindergartens within 350m\n    -   Numbers of childcare centres within 350m\n    -   Numbers of bus stop within 350m\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproximity <- function(df1, df2, varname) {\n  dist_matrix <- st_distance(df1, df2) %>%\n    drop_units()\n  \n  # Calculate minimum distance for each row\n  df1[[varname]] <- apply(dist_matrix, 1, min)\n  \n  return(df1)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncbd <- filter(MRT, STN_NAM_DE %in% c(\"RAFFLES PLACE MRT STATION\", \"TANJONG PAGAR MRT STATION\"))\nresale_tidy <- proximity(resale_tidy, cbd, \"PROX_CBD\") %>%\n  proximity(., eldercare, \"PROX_ELDERCARE\") %>%\n  proximity(., chas, \"PROX_CHAS\") %>%\n  proximity(., hawker_centre, \"PROX_HAWKER\") %>%\n  proximity(., MRT, \"PROX_MRT\") %>%\n  proximity(., parks, \"PROX_PARK\") %>%\n  proximity(., childcare, \"PROX_CHILDCARE\") %>%\n  proximity(., kindergartens, \"PROX_KINDERGARTEN\") %>%\n  proximity(., supermarkets, \"PROX_SUPERMARKET\") %>%\n  proximity(., bus_stops, \"PROX_BUS_STOP\")\n```\n:::\n\n\n\nWe also need to calculate the number of facilities within a specific radius from the resale flats. The `count_in_radius` function accomplishes this by calculating the distance matrix between `df1` and `df2` using `st_distance`, identifying features within the specified radius, and summing these counts in a new column in `df1` designated by `varname`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_in_radius <- function(df1, df2, varname, radius) {\n  dist_matrix <- st_distance(df1, df2) %>%\n    drop_units() %>%\n    as.data.frame()\n  df1[,varname] <- rowSums(dist_matrix <= radius)\n  return(df1)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- count_in_radius(resale_tidy, kindergartens, \"NUM_KINDERGARTEN\", 350) %>%\n  count_in_radius(., childcare, \"NUM_CHILDCARE\", 350) %>%\n  count_in_radius(., bus_stops, \"NUM_BUS_STOP\", 350) %>%\n  count_in_radius(., chas, \"NUM_CHAS\", 350)\n```\n:::\n\n\n\n\nColumns which are not needed for this analysis in this exercise will be dropped and the file is then saved as a RDS file for ease of retrieval without the need to run the above code chunks again.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale_tidy %>%\n  rename(\n    MONTH = month,\n    TOWN = town,\n    FLOOR_AREA_SQM = floor_area_sqm,\n    ADDRESS = address,\n    RESALE_PRICE = resale_price,\n    LEVEL = level,\n    REMAINING_LEASE = remaining_lease,\n    UNIT_AGE = unit_age\n  ) %>%\n  select(MONTH, TOWN, FLOOR_AREA_SQM, ADDRESS, RESALE_PRICE, LEVEL, REMAINING_LEASE,\n         UNIT_AGE, PROX_CBD, PROX_ELDERCARE, PROX_CHAS, PROX_HAWKER, PROX_MRT, PROX_PARK,\n         PROX_CHILDCARE, PROX_KINDERGARTEN, PROX_SUPERMARKET, PROX_BUS_STOP, NUM_KINDERGARTEN,\n         NUM_CHILDCARE, NUM_BUS_STOP, NUM_CHAS)\n\nwrite_rds(resale_tidy, \"data/HDB/rds/final_resale.rds\")\n```\n:::\n\n\n\n## Exploratory Data Analysis (EDA)\n\nIn the section, it will make use of statistical graphics functions of **ggplot2** package to perform EDA on `resale_tidy`\n\n### EDA using statistical graphics\n\n#### Resale Price\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = resale_tidy, aes(x = `RESALE_PRICE`)) +\n  geom_histogram(bins = 20, color = \"black\", fill = \"salmon\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n\nThe figure above reveals a right skewed distribution. This means that more 4-room resale units were transacted at relative lower prices ranging from $400,000 to $600,000 price range.\n\n#### Multiple Histogram Plots for Locational Factors\n\nThe code chunk below is used to create 12 histograms. Then, `ggarrange()` is used to organised the histograms into a 3 column by 4 row small multiple plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAREA_SQM <- ggplot(data = resale_tidy, aes(x= `FLOOR_AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data = resale_tidy, aes(x= `UNIT_AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data = resale_tidy, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data = resale_tidy, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERCARE <- ggplot(data = resale_tidy, aes(x= `PROX_ELDERCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER <- ggplot(data = resale_tidy, aes(x = `PROX_HAWKER`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data = resale_tidy, aes(x = `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data = resale_tidy, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data = resale_tidy, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_BUS_STOP <- ggplot(data = resale_tidy, aes(x= `PROX_BUS_STOP`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_SUPERMARKET <- ggplot(data = resale_tidy, \n                               aes(x= `PROX_SUPERMARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERCARE, \n          PROX_HAWKER, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_BUS_STOP, PROX_SUPERMARKET,  \n          ncol = 3, nrow = 4)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}