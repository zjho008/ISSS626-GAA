{
  "hash": "173adbd01f48568c7bd829df4e500d04",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 2: Geospatial Analytics in Thailand Tourism Sector (Pre, During, Post COVID-19)\"\nauthor: \"Ho Zi Jun\"\ndate: \"Sep 30, 2024\"\ndate-modified: \"last-modified\"\nnumber-sections: true\nnumber-offset: 1\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\neditor: source\n---\n\n\n\n# Overview\n\nTourism plays a significant role in Thailand's economy, contributing about 20% of the country's GDP. In 2019, Thailand generated 90 billion USD from both domestic and international tourism, but the COVID-19 pandemic led to a drastic drop in revenues down to 24 billion USD in 2020.\n\nThe figure below illustrates the total revenue from the tourism sector from January 2019 to February 2023, highlighting a gradual recovery in tourism revenue starting in September 2021.\n\n![](images/th_ex2_img1.png)\n\nNonetheless, it is important to point out that the tourism economy of Thailand does not have an even distribution. The figures below illustrate that the tourism economy of Thailand mainly revolves around 5 provinces: Bangkok, Phuket, Chiang Mai, Sukhothai & Phetchaburi.\n\n![](images/th_ex2_img2.png)\n\nThe main aim of this initiative is to discover the impacts of COVID-19 on Thailand's tourism economy using spatial and spatio-temporal statistics.\n\n## The Task\n\nThe objectives are to explore the following:\n\n-   Whether the key indicators of Thailand's tourism economy are independent of spatial and spatio-temporal factors.\n-   If dependencies exist, aim to identify the clusters, outliers, and emerging hot or cold spots within the tourism economy.\n\nThe specific tasks for this exercise are:\n\n-   Using appropriate sf and tidyverse functions, prepare the following geospatial data layers:\n    -   A study area layer in sf polygon format, covering [provinces in Thailand](https://en.wikipedia.org/wiki/Provinces_of_Thailand), including Bangkok.\n    -   A tourism economy indicators layer for the study area in sf polygon format.\n    -   A derived tourism economy indicator layer in the [spatio-temporal s3 class of sfdep](https://sfdep.josiahparry.com/articles/spacetime-s3), with a monthly and yearly time series.\n-   Using the extracted data, conduct the following analyses using sfdep methods:\n    -   Global spatial autocorrelation analysis\n    -   Local spatial autocorrelation analysis\n    -   Emerging hotspot analysis\n-   Describe the spatial patterns identified through these analyses.\n\n## Getting Started\n\n### Installing and Loading the R Packages\n\nThe following R packages will be launched into the R environment using `p_load()` from **pacman package** below.\n\nThe R packages needed for this exercise are as follows:\n\n1.  Spatial data handling\n    -   **sf**, **spdep** and **sfdep**\n2.  Attribute data handling\n    -   **tidyverse**, especially **readr**, **ggplot2** and **dplyr**\n3.  Choropleth mapping\n    -   **tmap**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, sfdep,tmap,\n               tidyverse, plotly, Kendall)\nset.seed(1234) # setting seed to ensure reproducibility\n```\n:::\n\n\n\n## The Data\n\nFor this exercise, two data sets will be utilised. They are:\n\n-   [Thailand Domestic Tourism Statistics](https://www.kaggle.com/datasets/thaweewatboy/thailand-domestic-tourism-statistics) at Kaggle.\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) at HDX. the province boundary data set is used for this exercise.\n\n### Loading the Attribute Data\n\nThere are 2 versions of this dataset `thailand_domestic_tourism_2019_2023.csv` & `thailand_domestic_tourism_2019_2023_ver2.csv`. Version 2 will be used for this exercise. The csv file will be imported using `read_csv` function of **readr** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_stats <- read_csv(\"data/aspatial/thailand_domestic_tourism_2019_2023_ver2.csv\") \n```\n:::\n\n\n\n`glimpse()` is used to have a brief overview of the data. This will enable us to see the columns and their respective data types.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(tourism_stats)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 30,800\nColumns: 7\n$ date          <chr> \"1 01 2019\", \"1 01 2019\", \"1 01 2019\", \"1 01 2019\", \"1 0…\n$ province_thai <chr> \"กรุงเทพมหานคร\", \"ลพบุรี\", \"พระนครศรีอยุธยา\", \"สระบุรี\", \"ชัยนาท…\n$ province_eng  <chr> \"Bangkok\", \"Lopburi\", \"Phra Nakhon Si Ayutthaya\", \"Sarab…\n$ region_thai   <chr> \"ภาคกลาง\", \"ภาคกลาง\", \"ภาคกลาง\", \"ภาคกลาง\", \"ภาคกลาง\", \"…\n$ region_eng    <chr> \"central\", \"central\", \"central\", \"central\", \"central\", \"…\n$ variable      <chr> \"ratio_tourist_stay\", \"ratio_tourist_stay\", \"ratio_touri…\n$ value         <dbl> 93.37, 61.32, 73.37, 67.33, 79.31, 71.70, 64.65, 71.21, …\n```\n\n\n:::\n:::\n\n\n\n#### Data Dictionary for Attribute Data\n\nThis dataset contains statistics on tourism in Thailand from Jan 2019 to Feb 2023, broken down by province. The dataset includes information on the number of `tourists`, the `occupancy rate`, and the `profits generated by tourism` in each `province`, as well as the\n\nSourced from raw data provided by the [Official Ministry of Tourism and Sports Statistics](https://www.mots.go.th/news/category/411), which was manually entered into Excel files.\n\nThe author has pre-processed the data using Python with the intention of making it more accessible in the appropriate format which has the potential to provide valuable insights into the domestic tourism industry in Thailand, including trends and patterns across different provinces over time. Researchers, analysts, and policy-makers with an interest in the domestic tourism sector in Thailand may find this dataset useful for their work. Source: ([Thailand Domestic Tourism Statistics by Thaweewat R](https://www.kaggle.com/datasets/thaweewatboy/thailand-domestic-tourism-statistics/data))\n\nThe description for some of the variables have been re-phrased for a more accurate alignment of understanding in line with the variables.\n\n| Column | Description |\n|:------------------------------|:----------------------------------------|\n| *date* | The month and year in which the statistics were recorded. The dataset covers the years 2019-2023. |\n| *province_thai* | The name of the province in Thailand, in the Thai language. |\n| *province_eng* | The name of the province in Thailand, in English. |\n| *region_thai* | The name of the region in Thailand to which the province belongs, in the Thai language. |\n| *region_eng* | The name of the region in Thailand to which the province belongs, in English. |\n| *variable* | The 8 types of data being recorded, such as the number of tourists or the occupancy rate. |\n|  | `no_tourist_all` The total number of tourists (domestic & foreign) who visited the province |\n|  | `no_tourist_foreign` The number of foreign tourists who visited the province |\n|  | `no_tourist_thai` The number of Thai tourists (domestic) who visited the province |\n|  | `no_tourist_occupied` -\\> `no_tourist_stay` The total number of occupied hotel rooms in the province |\n|  | `occupancy_rate` -\\> `ratio_tourist_stay` The percentage of occupied travel accommodation in the province |\n|  | `revenue_all` The revenue generated by the tourism industry in the province, in Thai Baht |\n|  | `revenue_foreign` The revenue generated by foreign tourists in the province, in Thai Baht |\n|  | `revenue_thai` The revenue generated by Thai tourists in the province, in Thai Baht |\n| *value* | The value of the data being recorded. |\n\n: R Packages {.striped .hover tbl-colwidths=\"\\[25,75\\]\"}\n\nFrom the description above, we can identify the columns to be selected for analysis. For this exercise, the columns: `date`, `province_eng`, `variable` and `value` will be selected.\n\n#### Data Integrity Checks\n\nThe two following code chunks are utilised to check for any duplicated or missing values in each column\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(tourism_stats))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(tourism_stats))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\nThe results above tell us that there are no duplicated and missing values.\n\n#### Data Preparation\n\nThe relevant columns that will be used for analysis are then selected using the code chunk below.Additionally, the `province_eng` column will be renamed to `province` since we are only taking this particular column and not the column labelled `province_thai`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_stats_selected <- tourism_stats %>%\n  select(date, province_eng, variable, value) %>%\n  rename(province = province_eng)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Grouping by province and year, then summarizing total tourist count\ntourism_stats_grouped <- tourism_stats %>%\n  group_by(province_eng, variable) %>%\n  rename(province = province_eng) %>%\n  summarise(total_value = sum(value, na.rm = TRUE))\n```\n:::\n\n\n\n#### Exploratory Data Analysis (EDA)\n\nExploratory data analysis (EDA) will be carried out in this section using statistical graphic functions of **ggplot2** package. The variables are plotted to get a sense of the distribution.\n\n##### Revenue\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_stats_selected %>%\n  filter(variable == \"revenue_all\") %>% \n  ggplot(aes(value,fill = variable)) +\n  geom_histogram(bins = 20) +\n  theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nIt can be observed that the revenue generated by tourism is right skewed as such in can also be interpreted that a number of provinces are the ones generating majority of the revenue for Thailand's tourism.\n\n::: panel-tabset\n## Domestic Tourism\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_stats_selected %>%\n  filter(variable == \"revenue_thai\") %>% \n  ggplot(aes(value,fill = variable)) +\n  geom_histogram(bins = 20) +\n  theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n## Foreign Tourism\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_stats_selected %>%\n  filter(variable == \"revenue_foreign\") %>% \n  ggplot(aes(value,fill = variable)) +\n  geom_histogram(bins = 20) +\n  theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n:::\n\nSimilarly, when looking at domestic and foreign tourism revenue individually the plots are also showing a right skew.\n\n##### Occupancy rate (`ratio_tourist_stay`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_stats_selected %>%\n  filter(variable == \"ratio_tourist_stay\") %>% \n  ggplot(aes(value,fill = variable)) +\n  geom_histogram(bins = 20) +\n  theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n##### Total number of tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_stats_selected %>%\n  filter(variable == \"no_tourist_all\") %>% \n  ggplot(aes(value,fill = variable)) +\n  geom_histogram(bins = 20) +\n  theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nFrom the above histogram plots, the variables of revenue generated by tourism and total number of tourists are right-skewed which can be interpreted as the vast majority of data points being concentrated near zero. This is indeed consistent with the table shown in the overview where a few provinces in Thailand dominate tourist visits and revenue while most of the other provinces contribute less.\n\nFor `ratio_tourist_stay` the histogram appears to be relatively symmetric with a slight skew to the right.\n\n### Loading the Geospatial Data (Thailand - Subnational Administrative Boundaries)\n\nThe code chunk below is used to import the Sub-national Administrative Boundaries of Thailand. Level 1 will be used as it represents the province boundary as seen in the HDX website.\n\n![](images/level1.png)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthadmin <- st_read(dsn = \"data/geospatial\", \n                   layer = \"tha_admbnda_adm1_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\nThe message above reveals that the geospatial objects are multi-polygon features. There are a total of 77 multipolygon feature representing the different provinces in Thailand and 16 fields in thadmin (Thailand Administrative) simple feature data frame. `thadmin` is in WGS84 Geodetic coordinates system. The bounding box provides the x extend and y extend of the data.\n\nTo learn more about the simple features object, we can apply `glimpse()` of dplyr package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(thadmin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 77\nColumns: 17\n$ Shape_Leng <dbl> 2.417227, 1.695100, 1.251111, 1.884945, 3.041716, 1.739908,…\n$ Shape_Area <dbl> 0.13133873, 0.07926199, 0.05323766, 0.12698345, 0.21393797,…\n$ ADM1_EN    <chr> \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"P…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"สมุทรปราการ\", \"นนทบุรี\", \"ปทุมธานี\", \"พระนครศรีอ…\n$ ADM1_PCODE <chr> \"TH10\", \"TH11\", \"TH12\", \"TH13\", \"TH14\", \"TH15\", \"TH16\", \"TH…\n$ ADM1_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((100.6139 13..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\n#### Renaming of column\n\nFor ease of reference similar to what was done with the attribute data, `ADM1_EN` is renamed to `province`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthadmin <- thadmin %>%\n  rename(province = ADM1_EN)\n```\n:::\n\n\n\n#### Setting of Coordinate reference system (CRS)\n\nIn this step,  `st_crs()` function of the sf package will be utilised to check the CRS information. If the CRS is not reflecting 32647, the EPSG code of Thailand `st_transform()` function can be used to transform the EPSG code.\n\n::: callout-note\nThe projected coordinate system of Thailand is WGS 84 / UTM zone 47N and the EPSG code is [32647](https://epsg.io/32647#google_vignette).\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thadmin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n\nFrom the results above, we can see that the EPSG is 4326. Hence, `st_transform()` will be used to perform transformation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthadmin <- st_transform(thadmin, crs =32647)\n```\n:::\n\n\n\n`st_crs()` will be used for confirmation if the transformation has been done correctly.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thadmin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n\n#### Selecting Required Fields\n\n![](images/thadmin.png)\n\nColumn 3 (province) and 17 (geometry) will be selected as the relevant columns.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthadmin <- thadmin %>%\n  select(3, 17)\n```\n:::\n\n\n\n#### Data Inconsistency\n\nUpon running through some observations with the `thadmin` simple feature data frame with `thai_tourism` it is observed that there are inconsistencies in the naming terminologies of the provinces.\n\n![](images/inconsistent.png)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHDX_province_names <- unique(thadmin$province)\nHDX_province_names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Bangkok\"                  \"Samut Prakan\"            \n [3] \"Nonthaburi\"               \"Pathum Thani\"            \n [5] \"Phra Nakhon Si Ayutthaya\" \"Ang Thong\"               \n [7] \"Lop Buri\"                 \"Sing Buri\"               \n [9] \"Chai Nat\"                 \"Saraburi\"                \n[11] \"Chon Buri\"                \"Rayong\"                  \n[13] \"Chanthaburi\"              \"Trat\"                    \n[15] \"Chachoengsao\"             \"Prachin Buri\"            \n[17] \"Nakhon Nayok\"             \"Sa Kaeo\"                 \n[19] \"Nakhon Ratchasima\"        \"Buri Ram\"                \n[21] \"Surin\"                    \"Si Sa Ket\"               \n[23] \"Ubon Ratchathani\"         \"Yasothon\"                \n[25] \"Chaiyaphum\"               \"Amnat Charoen\"           \n[27] \"Bueng Kan\"                \"Nong Bua Lam Phu\"        \n[29] \"Khon Kaen\"                \"Udon Thani\"              \n[31] \"Loei\"                     \"Nong Khai\"               \n[33] \"Maha Sarakham\"            \"Roi Et\"                  \n[35] \"Kalasin\"                  \"Sakon Nakhon\"            \n[37] \"Nakhon Phanom\"            \"Mukdahan\"                \n[39] \"Chiang Mai\"               \"Lamphun\"                 \n[41] \"Lampang\"                  \"Uttaradit\"               \n[43] \"Phrae\"                    \"Nan\"                     \n[45] \"Phayao\"                   \"Chiang Rai\"              \n[47] \"Mae Hong Son\"             \"Nakhon Sawan\"            \n[49] \"Uthai Thani\"              \"Kamphaeng Phet\"          \n[51] \"Tak\"                      \"Sukhothai\"               \n[53] \"Phitsanulok\"              \"Phichit\"                 \n[55] \"Phetchabun\"               \"Ratchaburi\"              \n[57] \"Kanchanaburi\"             \"Suphan Buri\"             \n[59] \"Nakhon Pathom\"            \"Samut Sakhon\"            \n[61] \"Samut Songkhram\"          \"Phetchaburi\"             \n[63] \"Prachuap Khiri Khan\"      \"Nakhon Si Thammarat\"     \n[65] \"Krabi\"                    \"Phangnga\"                \n[67] \"Phuket\"                   \"Surat Thani\"             \n[69] \"Ranong\"                   \"Chumphon\"                \n[71] \"Songkhla\"                 \"Satun\"                   \n[73] \"Trang\"                    \"Phatthalung\"             \n[75] \"Pattani\"                  \"Yala\"                    \n[77] \"Narathiwat\"              \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkaggle_province_names <- unique(tourism_stats_grouped$province)\nkaggle_province_names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Amnat Charoen\"            \"Ang Thong\"               \n [3] \"Bangkok\"                  \"Bueng Kan\"               \n [5] \"Buriram\"                  \"Chachoengsao\"            \n [7] \"Chainat\"                  \"Chaiyaphum\"              \n [9] \"Chanthaburi\"              \"Chiang Mai\"              \n[11] \"Chiang Rai\"               \"Chonburi\"                \n[13] \"Chumphon\"                 \"Kalasin\"                 \n[15] \"Kamphaeng Phet\"           \"Kanchanaburi\"            \n[17] \"Khon Kaen\"                \"Krabi\"                   \n[19] \"Lampang\"                  \"Lamphun\"                 \n[21] \"Loei\"                     \"Lopburi\"                 \n[23] \"Mae Hong Son\"             \"Maha Sarakham\"           \n[25] \"Mukdahan\"                 \"Nakhon Nayok\"            \n[27] \"Nakhon Pathom\"            \"Nakhon Phanom\"           \n[29] \"Nakhon Ratchasima\"        \"Nakhon Sawan\"            \n[31] \"Nakhon Si Thammarat\"      \"Nan\"                     \n[33] \"Narathiwat\"               \"Nong Bua Lamphu\"         \n[35] \"Nong Khai\"                \"Nonthaburi\"              \n[37] \"Pathum Thani\"             \"Pattani\"                 \n[39] \"Phang Nga\"                \"Phatthalung\"             \n[41] \"Phayao\"                   \"Phetchabun\"              \n[43] \"Phetchaburi\"              \"Phichit\"                 \n[45] \"Phitsanulok\"              \"Phra Nakhon Si Ayutthaya\"\n[47] \"Phrae\"                    \"Phuket\"                  \n[49] \"Prachinburi\"              \"Prachuap Khiri Khan\"     \n[51] \"Ranong\"                   \"Ratchaburi\"              \n[53] \"Rayong\"                   \"Roi Et\"                  \n[55] \"Sa Kaeo\"                  \"Sakon Nakhon\"            \n[57] \"Samut Prakan\"             \"Samut Sakhon\"            \n[59] \"Samut Songkhram\"          \"Saraburi\"                \n[61] \"Satun\"                    \"Sing Buri\"               \n[63] \"Sisaket\"                  \"Songkhla\"                \n[65] \"Sukhothai\"                \"Suphan Buri\"             \n[67] \"Surat Thani\"              \"Surin\"                   \n[69] \"Tak\"                      \"Trang\"                   \n[71] \"Trat\"                     \"Ubon Ratchathani\"        \n[73] \"Udon Thani\"               \"Uthai Thani\"             \n[75] \"Uttaradit\"                \"Yala\"                    \n[77] \"Yasothon\"                \n```\n\n\n:::\n:::\n\n\n\n| tourism_stats   | thadmin          |\n|:----------------|:-----------------|\n| Lopburi         | Lop Buri         |\n| Chainat         | Chai Nat         |\n| Chonburi        | Chon Buri        |\n| Prachinburi     | Prachin Buri     |\n| Phang Nga       | Phangnga         |\n| Sisaket         | Si Sa Ket        |\n| Buriram         | Buri Ram         |\n| Nong Bua Lamphu | Nong Bua Lam Phu |\n\n: R Packages {.striped .hover tbl-colwidths=\"\\[25,75\\]\"} Nong Bua Lam Phu\n\nOn the right side of the table are the 8 provinces from `thadmin` that are inconsistent with the naming conventions from `tourism_stats`\n\nThe `gsub()` function from Base R will be used to for string substitution to modify the provinces that are not consistent. The naming convention from `tourism_stats` will be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector of old and new province names\nrename <- c(\"Lopburi\", \"Chainat\", \"Chonburi\", \"Prachinburi\", \"Phang Nga\", \"Sisaket\", \"Buriram\", \"Nong Bua Lamphu\")\nold_names <- c(\"Lop Buri\", \"Chai Nat\", \"Chon Buri\", \"Prachin Buri\", \"Phangnga\", \"Si Sa Ket\", \"Buri Ram\", \"Nong Bua Lam Phu\")\n\n# Loop through the old and new names and apply gsub for each replacement\nfor(i in seq_along(old_names)) {\n  thadmin$province <- gsub(old_names[i], rename[i], thadmin$province)\n}\n\n# Check the updated province names\nhead(thadmin$province, n = 77)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Bangkok\"                  \"Samut Prakan\"            \n [3] \"Nonthaburi\"               \"Pathum Thani\"            \n [5] \"Phra Nakhon Si Ayutthaya\" \"Ang Thong\"               \n [7] \"Lopburi\"                  \"Sing Buri\"               \n [9] \"Chainat\"                  \"Saraburi\"                \n[11] \"Chonburi\"                 \"Rayong\"                  \n[13] \"Chanthaburi\"              \"Trat\"                    \n[15] \"Chachoengsao\"             \"Prachinburi\"             \n[17] \"Nakhon Nayok\"             \"Sa Kaeo\"                 \n[19] \"Nakhon Ratchasima\"        \"Buriram\"                 \n[21] \"Surin\"                    \"Sisaket\"                 \n[23] \"Ubon Ratchathani\"         \"Yasothon\"                \n[25] \"Chaiyaphum\"               \"Amnat Charoen\"           \n[27] \"Bueng Kan\"                \"Nong Bua Lamphu\"         \n[29] \"Khon Kaen\"                \"Udon Thani\"              \n[31] \"Loei\"                     \"Nong Khai\"               \n[33] \"Maha Sarakham\"            \"Roi Et\"                  \n[35] \"Kalasin\"                  \"Sakon Nakhon\"            \n[37] \"Nakhon Phanom\"            \"Mukdahan\"                \n[39] \"Chiang Mai\"               \"Lamphun\"                 \n[41] \"Lampang\"                  \"Uttaradit\"               \n[43] \"Phrae\"                    \"Nan\"                     \n[45] \"Phayao\"                   \"Chiang Rai\"              \n[47] \"Mae Hong Son\"             \"Nakhon Sawan\"            \n[49] \"Uthai Thani\"              \"Kamphaeng Phet\"          \n[51] \"Tak\"                      \"Sukhothai\"               \n[53] \"Phitsanulok\"              \"Phichit\"                 \n[55] \"Phetchabun\"               \"Ratchaburi\"              \n[57] \"Kanchanaburi\"             \"Suphan Buri\"             \n[59] \"Nakhon Pathom\"            \"Samut Sakhon\"            \n[61] \"Samut Songkhram\"          \"Phetchaburi\"             \n[63] \"Prachuap Khiri Khan\"      \"Nakhon Si Thammarat\"     \n[65] \"Krabi\"                    \"Phang Nga\"               \n[67] \"Phuket\"                   \"Surat Thani\"             \n[69] \"Ranong\"                   \"Chumphon\"                \n[71] \"Songkhla\"                 \"Satun\"                   \n[73] \"Trang\"                    \"Phatthalung\"             \n[75] \"Pattani\"                  \"Yala\"                    \n[77] \"Narathiwat\"              \n```\n\n\n:::\n:::\n\n\n\n#### Relational Join\n\nThe code chunk below is used to join the aspatial and geospatial data by using the `left_join()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand_tourism <- left_join(thadmin,\n                              tourism_stats_grouped, by = c(\"province\" = \"province\"))\n```\n:::\n\n\n\n#### Saving rds files\n\nIn the following code chunk, `write_rds()` of **readr** package is used to save the extracted attribute data `thailand_tourism` into an output file in rds format. The output file is saved in the rds folder.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(thailand_tourism,\n          \"data/rds/thailand_tourism.rds\")\n```\n:::\n\n\n\nThe **saved file** can then be retrieved using the code chunk below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand_tourism <- read_rds(\"data/rds/thailand_tourism.rds\")\n```\n:::\n\n\n\n## Visualing the Indicators of tourism economy of Thailand\n\n### Visualing Number of Tourists Variable\n\nA basemap will be prepared to show the distribution of the **number of tourists** in the provinces of Thailand.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbasemap <- tm_shape(thailand_tourism) +\n  tm_polygons() +\n  tm_text(\"province\", size = 0.5)\n\nbasemap\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-26-1.png){width=768}\n:::\n:::\n\n\n\n#### All Tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_tourists = thailand_tourism%>%\n  filter(variable =='no_tourist_all')\n\nbasemap01 <- tm_shape(all_tourists) +\n  tm_polygons(col = \"total_value\", palette = \"Oranges\", style='quantile') +\n  tm_text(\"province\", size = 0.5)\n\nbasemap01\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-27-1.png){width=768}\n:::\n:::\n\n\n\n#### Foreign Tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nforeign_tourists = thailand_tourism%>%\n  filter(variable =='no_tourist_foreign')\n\nbasemap02 <- tm_shape(foreign_tourists) +\n  tm_polygons(col = \"total_value\", palette = \"Oranges\", style='quantile') +\n  tm_text(\"province\", size = 0.5)\n\nbasemap02\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-28-1.png){width=768}\n:::\n:::\n\n\n\n#### Domestic Tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndomestic_tourists = thailand_tourism%>%\n  filter(variable =='no_tourist_thai')\n\nbasemap03 <- tm_shape(domestic_tourists) +\n  tm_polygons(col = \"total_value\", palette = \"Oranges\", style='quantile') +\n  tm_text(\"province\", size = 0.5)\n\nbasemap03\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-29-1.png){width=768}\n:::\n:::\n\n\n\n### Visualing Revenue Variable\n\n#### All Revenue\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_revenue = thailand_tourism%>%\n  filter(variable =='revenue_all')\n\nbasemap1 <- tm_shape(all_revenue) +\n  tm_polygons(col = \"total_value\", palette = \"Greens\", style='quantile') +\n  tm_text(\"province\", size = 0.5)\n\nbasemap1\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-30-1.png){width=768}\n:::\n:::\n\n\n\n#### Foreign Revenue\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nforeign_revenue = thailand_tourism%>%\n  filter(variable =='revenue_foreign')\n\nbasemap2 <- tm_shape(foreign_revenue) +\n  tm_polygons(col = \"total_value\", palette = \"Greens\", style='quantile') +\n  tm_text(\"province\", size = 0.5)\n\nbasemap2\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-31-1.png){width=768}\n:::\n:::\n\n\n\n#### Domestic Revenue\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_revenue = thailand_tourism%>%\n  filter(variable =='revenue_thai')\n\nbasemap3 <- tm_shape(thai_revenue) +\n  tm_polygons(col = \"total_value\", palette = \"Greens\", style='quantile') +\n  tm_text(\"province\", size = 0.5)\n\nbasemap3\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-32-1.png){width=768}\n:::\n:::\n\n\n\n## Spatial Weights and Applications\n\nIn this section, [poly2nb()](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area.\n\n### Computing (QUEEN) contiguity based neighbours\n\nThe code chunk below is used to compute Queen contiguity weight matrix for revenue.\n\n::: panel-tabset\n\n## Revenue Generated by Tourism\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- poly2nb(all_revenue, queen=TRUE)\nsummary(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n14 with 1 link\n2 most connected regions:\n29 51 with 9 links\n```\n\n\n:::\n:::\n\n\nThe summary report above shows that there are 77 area units in Thailand which represent the provinces. There are 2 most connected area units eacah with 9 neighbours. There is only 1 area unit with only one neighbour.\n\nFor each polygon in our polygon object, wm_q lists all neighbouring polygons. For example, to see the neighbours for the 51 polygon in the object, type:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_revenue$province[51]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Tak\"\n```\n\n\n:::\n:::\n\n\nThe output reveals that Polygon ID = 51 is Tak province.\n\nTo reveal the provinces of the nine neighbouring polygons, the code chunk will be used:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_revenue$province[c(19,20,25,28,30,31,33,35,55)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Nakhon Ratchasima\" \"Buriram\"           \"Chaiyaphum\"       \n[4] \"Nong Bua Lamphu\"   \"Udon Thani\"        \"Loei\"             \n[7] \"Maha Sarakham\"     \"Kalasin\"           \"Phetchabun\"       \n```\n\n\n:::\n:::\n\n\nWe can retrieve the revenue of these nine provinces by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb51 <- wm_q[[51]]\nnb51 <- all_revenue$total_value[nb51]\nnb51\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 260045700000   4810760000  13421950000  14370950000  12339730000\n[6]   4098740000   4543780000   8988760000  77869050000\n```\n\n\n:::\n:::\n\n\n\nThe printed output above shows that the revenue of the nine nearest neighbours based on Queen’s method are 260045700000, 4810760000, 13421950000, 14370950000, 12339730000, 4098740000, 4543780000, 8988760000 and 77869050000 respectively.\n\nWe can display the complete weight matrix by using `str()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 77\n $ : int [1:6] 2 3 4 15 59 60\n $ : int [1:2] 1 15\n $ : int [1:4] 1 4 5 59\n $ : int [1:6] 1 3 5 10 15 17\n $ : int [1:7] 3 4 6 7 10 58 59\n $ : int [1:4] 5 7 8 58\n $ : int [1:8] 5 6 8 10 19 25 48 55\n $ : int [1:5] 6 7 9 48 58\n $ : int [1:4] 8 48 49 58\n $ : int [1:5] 4 5 7 17 19\n $ : int [1:3] 12 13 15\n $ : int [1:2] 11 13\n $ : int [1:5] 11 12 14 15 18\n $ : int 13\n $ : int [1:8] 1 2 4 11 13 16 17 18\n $ : int [1:4] 15 17 18 19\n $ : int [1:5] 4 10 15 16 19\n $ : int [1:5] 13 15 16 19 20\n $ : int [1:8] 7 10 16 17 18 20 25 29\n $ : int [1:5] 18 19 21 29 33\n $ : int [1:4] 20 22 33 34\n $ : int [1:4] 21 23 24 34\n $ : int [1:3] 22 24 26\n $ : int [1:5] 22 23 26 34 38\n $ : int [1:4] 7 19 29 55\n $ : int [1:3] 23 24 38\n $ : int [1:3] 32 36 37\n $ : int [1:3] 29 30 31\n $ : int [1:9] 19 20 25 28 30 31 33 35 55\n $ : int [1:6] 28 29 31 32 35 36\n $ : int [1:6] 28 29 30 32 53 55\n $ : int [1:4] 27 30 31 36\n $ : int [1:5] 20 21 29 34 35\n $ : int [1:6] 21 22 24 33 35 38\n $ : int [1:6] 29 30 33 34 36 38\n $ : int [1:6] 27 30 32 35 37 38\n $ : int [1:3] 27 36 38\n $ : int [1:6] 24 26 34 35 36 37\n $ : int [1:5] 40 41 46 47 51\n $ : int [1:3] 39 41 51\n $ : int [1:7] 39 40 43 45 46 51 52\n $ : int [1:4] 43 44 52 53\n $ : int [1:5] 41 42 44 45 52\n $ : int [1:3] 42 43 45\n $ : int [1:4] 41 43 44 46\n $ : int [1:3] 39 41 45\n $ : int [1:2] 39 51\n $ : int [1:8] 7 8 9 49 50 51 54 55\n $ : int [1:5] 9 48 51 57 58\n $ : int [1:5] 48 51 52 53 54\n $ : int [1:9] 39 40 41 47 48 49 50 52 57\n $ : int [1:6] 41 42 43 50 51 53\n $ : int [1:6] 31 42 50 52 54 55\n $ : int [1:4] 48 50 53 55\n $ : int [1:7] 7 25 29 31 48 53 54\n $ : int [1:5] 57 59 60 61 62\n $ : int [1:5] 49 51 56 58 59\n $ : int [1:7] 5 6 8 9 49 57 59\n $ : int [1:7] 1 3 5 56 57 58 60\n $ : int [1:4] 1 56 59 61\n $ : int [1:3] 56 60 62\n $ : int [1:3] 56 61 63\n $ : int [1:2] 62 70\n $ : int [1:5] 65 68 71 73 74\n $ : int [1:4] 64 66 68 73\n $ : int [1:3] 65 68 69\n $ : int 0\n $ : int [1:5] 64 65 66 69 70\n $ : int [1:3] 66 68 70\n $ : int [1:3] 63 68 69\n $ : int [1:5] 64 72 74 75 76\n $ : int [1:3] 71 73 74\n $ : int [1:4] 64 65 72 74\n $ : int [1:4] 64 71 72 73\n $ : int [1:3] 71 76 77\n $ : int [1:3] 71 75 77\n $ : int [1:2] 75 76\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:77] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = all_revenue, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n```\n\n\n:::\n:::\n\n\n\n## Revenue Generated by Foreigners\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q_foreign <- poly2nb(foreign_revenue, queen=TRUE)\nsummary(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n14 with 1 link\n2 most connected regions:\n29 51 with 9 links\n```\n\n\n:::\n:::\n\n\n\n## Revenue Generated by Thais\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q_thais <- poly2nb(thai_revenue, queen=TRUE)\nsummary(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n14 with 1 link\n2 most connected regions:\n29 51 with 9 links\n```\n\n\n:::\n:::\n\n\n:::\n\n### Computing (ROOK) contiguity based neighbours\n\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_r <- poly2nb(all_revenue, queen = FALSE)\nsummary(wm_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n14 with 1 link\n2 most connected regions:\n29 51 with 9 links\n```\n\n\n:::\n:::\n\n\n\n\n### Visualising contiguity weights\n\nTo create a connectivity graph for polygons, we first need to obtain points that represent each polygon. The most common method for this is to calculate the centroids of the polygons. Using the sf package in R, the centroid for each polygon can be calculated. However, rather than simply applying `st_centroid()` directly on the geometry column, the coordinates of these centroids need to be extracted into a separate data frame.\n\nTo achieve this, a mapping function will be used to apply `st_centroid()` to each polygon in the geometry column. The `map_dbl()` function from the purrr package will be used to handle this, as it applies a function to each element of a vector and returns a vector of the same length, which can then be used for further graph construction.\n\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude <- map_dbl(all_revenue$geometry, ~st_centroid(.x)[[1]])\n```\n:::\n\n\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatitude <- map_dbl(all_revenue$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- cbind(longitude, latitude)\n```\n:::\n\n\n\nWe check the first few observations to see if things are formatted correctly.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(coords)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     longitude latitude\n[1,]  675514.6  1523087\n[2,]  685033.7  1503755\n[3,]  650477.2  1539777\n[4,]  681656.0  1555581\n[5,]  664627.1  1586462\n[6,]  645239.0  1617118\n```\n\n\n:::\n:::\n\n\n#### Plotting Queen contiguity based neighbours map\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(all_revenue$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n\n#### Plotting Rook contiguity based neighbours map\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(all_revenue$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n\n#### Plotting both Queen and Rook contiguity based neighbours maps\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nplot(all_revenue$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(all_revenue$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}