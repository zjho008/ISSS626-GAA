{
  "hash": "6bbc12fbf9b1071d47218940066fd76e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 9: Modelling Geographical Accessibility\"\nauthor: \"Ho Zi Jun\"\ndate: \"Oct 24, 2024\"\ndate-modified: \"last-modified\"\nnumber-sections: true\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\neditor: source\n---\n\n\n\n## Overview\n\nThis exercise provides practical experience in modeling geographical accessibility using R’s geospatial analysis packages.\n\n### Learning Outcomes\n\nBy the end of this hands-on exercise, we will be able:\n\n-   to import GIS polygon data into R and save them as simple feature data frame by using appropriate functions of sf package of R;\n-   to import aspatial data into R and save them as simple feature data frame by using appropriate functions of sf package of R;\n-   to computer accessibility measure by using Hansen's potential model and Spatial Accessibility Measure (SAM); and\n-   to visualise the accessibility measures by using tmap and ggplot2 packages.\n\n## The data\n\nFour data sets will be used in this hands-on exercise, they are:\n\n-   `MP14_SUBZONE_NO_SEA_PL`: URA Master Plan 2014 subzone boundary GIS data. This data set is downloaded from data.gov.sg.\n\n-   `hexagons`: A 250m radius hexagons GIS data. This data set was created by using [*st_make_grid()*](https://r-spatial.github.io/sf/reference/st_make_grid.html) of sf package. It is in ESRI shapefile format.\n\n-   `ELDERCARE`: GIS data showing location of eldercare service. [This data](https://data.gov.sg/dataset/eldercare-services) is downloaded from data.gov.sg. There are two versions. One in ESRI shapefile format. The other one in Google kml file format. For the purpose of this hands-on exercise, ESRI shapefile format is provided.\n\n-   `OD_Matrix`: a distance matrix in csv format. There are six fields in the data file. They are:\n\n    -   `origin_id`: the unique id values of the origin (i.e. `fid` of hexagon data set.),\n    -   `destination_id`: the unique id values of the destination (i.e. `fid` of `ELDERCARE` data set.),\n    -   `entry_cost`: the perpendicular distance between the origins and the nearest road),\n    -   `network_cost`: the actual network distance from the origin and destination,\n    -   `exit_cost`: the perpendicular distance between the destination and the nearest road), and\n    -   `total_cost`: the summation of `entry_cost`, `network_cost` and `exit_cost`.\n\nAll the values of the cost related fields are in **metres**.\n\n::: callout-warning\n## Reminder: \n*Except `MP14_SUBZONE_NO_SEA_PL` data set, the other three data sets are specially prepared by Prof. Kam for teaching and research purposes. Please obtain formal approval from if you want to use them for other courses or usage.*\n:::\n\n## Getting Started\n\nFirstly, to install the necessary R packages and launch them into R Studio environment.\n\nThe R packages needed for this exercise are as follows:\n\n-   Spatial data handling\n    -   **sf**\n-   Modelling geographical accessibility\n    -   **spatialAcc**\n-   Attribute data handling\n    -   **tidyverse**, especially readr and dplyr\n-   thematic mapping\n    -   **tmap**\n-   Statistical graphic\n    -   **ggplot2**\n-   Statistical analysis\n    -   **ggstatsplot**\n\nThe code chunk below installs and launches these R packages into R Studio environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tmap, SpatialAcc, sf, ggstatsplot,\n               reshape2, tidyverse)\n```\n:::\n\n\n\n> With tidyverse, we do not have to install readr, dplyr and ggplots packages separately. In fact, tidyverse also installs other R packages such as tidyr, stringr, forcats, tibble, purrr and magrittr.\n\n## Geospatial Data Wrangling\n\n### Importing geospatial data\n\nThree geospatial data sets will be imported from the *data/geospatial* sub-folder. They are `MP14_SUBZONE_NO_SEA_PL`, `hexagons` and `ELDERCARE`.\n\nThe code chunk below is used to import these three data sets in shapefile format by using *st_read()* of **sf** packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_NO_SEA_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\nhexagons <- st_read(dsn = \"data/geospatial\", layer = \"hexagons\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `hexagons' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3125 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21506.33 xmax: 50010.26 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n\n```{.r .cell-code}\neldercare <- st_read(dsn = \"data/geospatial\", layer = \"ELDERCARE\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `ELDERCARE' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 120 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n:::\n\n\n\nThe results above shows that the R object used to contain the imported `MP14_SUBZONE_WEB_PL` shapefile is called *mpsz* and it is a simple feature object. The geometry type is *multipolygon*. it is also important to note that *mpsz* simple feature object does not have an EPSG information.\n\n### Updating CRS information\n\nThe code chunk below updates the newly imported data sets with the correct ESPG code (i.e. 3414)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_transform(mpsz, 3414)\neldercare <- st_transform(eldercare, 3414)\nhexagons <- st_transform(hexagons, 3414)\n```\n:::\n\n\n\nAfter transforming the projection metadata, we can confirm the new projection for *mpsz* using `st_crs()` from the sf package. The code below provides a check on the transformed *mpsz* projection.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n:::\n\n\n\n> Notice that the EPSG: is indicated as **3414** now.\n\n### Cleaning and updating attribute fields of the geospatial data\n\nThere are many redundant fields in the data tables of both `eldercare` and `hexagons`. The code chunks below will be used to exclude this redundant fields. At the same time, a new field called `demand` and a new field called `capacity` will be added into the data table of `hexagons` and `eldercare` sf data frame respectively. Both fields are derived using *mutate()* of **dplyr** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare <- eldercare %>%\n  select(fid, ADDRESSPOS) %>%\n  mutate(capacity = 100)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagons <- hexagons %>%\n  select(fid) %>%\n  mutate(demand = 100)\n```\n:::\n\n\n\n::: callout-note\nFor the purpose of this hands-on exercise, a constant value of 100 is used. In practice, actual demand of the hexagon and capacity of the eldercare centre should be used instead.\n:::\n\n## Apsaital Data Handling and Wrangling\n\n### Importing Distance Matrix\n\nThe code chunk below uses *read_cvs()* of **readr** package to import `OD_Matrix.csv` into R Studio. The object is a tibble data.frame labelled `ODMatrix`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nODMatrix <- read_csv(\"data/aspatial/OD_Matrix.csv\", skip = 0)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 375000 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (6): origin_id, destination_id, entry_cost, network_cost, exit_cost, tot...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n### Tidying distance matrix\n\nThe imported ODMatrix will is organised by the distance matrix column-wise.\n\n![](images/OD.png)\n\nOn the other hand, most of the modelling packages in R expect a matrix look similar to the figure below.\n\n![](images/OD2.jpg)\n\nThe rows represent **origins** (i.e. also know as **from** field) and the columns represent **destination** (i.e. also known as **to** field.)\n\nThe code chunk below uses *spread()* of **tidyr** package to transform the OD matrix from a thin format into a fat format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistmat <- ODMatrix %>%\n  select(origin_id, destination_id, total_cost) %>%\n  spread(destination_id, total_cost)%>%\n  select(c(-c('origin_id')))\n```\n:::\n\n\n\n::: callout-note\n## Note\nSince tidyr version 1.0 has a new function called [*pivot_wider()*](https://tidyr.tidyverse.org/reference/pivot_wider.html). We should use *pivot_wider()* instead of *spread()* for future reference.\n:::\n\nCurrently, the distance is measured in metres because SVY21 projected coordinate system is used. The code chunk below will be used to convert the unit f measurement from metres to kilometres.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistmat_km <- as.matrix(distmat/1000)\n```\n:::\n\n\n\n## Modelling and Visualising Accessibility using Hansen Method\n\n### Computing Hansen's accessibility\n\nThis section will compute Hansen's accessibility by using *ac()* of [**SpatialAcc**](https://cran.r-project.org/web/packages/SpatialAcc/index.html) package. Before getting started, it is encouraged to read the [arguments](https://cran.r-project.org/web/packages/SpatialAcc/SpatialAcc.pdf) of the function at least once in order to ensure that the required inputs are available.\n\nThe code chunk below calculates Hansen's accessibility using *ac()* of **SpatialAcc** and *data.frame()* is used to save the output in a data frame called `acc_Handsen`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_Hansen <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            #d0 = 50,\n                            power = 2, \n                            family = \"Hansen\"))\n```\n:::\n\n\n\n![](images/acc.png)\n\nUpon observation, the default field name is very messy, we will rename it to `accHansen` by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(acc_Hansen) <- \"accHansen\"\n```\n:::\n\n\n\n![](images/acc1.png)\n\nFollowing which to convert the data table into tibble format by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_Hansen <- tibble::as_tibble(acc_Hansen)\n```\n:::\n\n\n\nLastly, *bind_cols()* of dplyr will be used to join the acc_Hansen tibble data frame with the hexagons simple feature data frame. The output is called `hexagon_Hansen`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagon_Hansen <- bind_cols(hexagons, acc_Hansen)\n```\n:::\n\n\n\nNotice that `hexagon_Hansen` is a simple feature data frame and not a typical tibble data frame.\n\n![](images/acc2.png)\n\nIn fact, the steps above can be performed by using a single code chunk as shown below as well.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_Hansen <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            #d0 = 50,\n                            power = 0.5, \n                            family = \"Hansen\"))\n\ncolnames(acc_Hansen) <- \"accHansen\"\nacc_Hansen <- tibble::as_tibble(acc_Hansen)\nhexagon_Hansen <- bind_cols(hexagons, acc_Hansen)\n```\n:::\n\n\n\n### Visualising Hansen's accessibility\n\n#### Extracting map extend\n\nTo visualise Hansen's accessibility, we will first extract the extend of `hexagons` simple feature data frame by by using *st_bbox()* of **sf** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapex <- st_bbox(hexagons)\n```\n:::\n\n\n\nThe code chunk below uses a collection of mapping functions of tmap package to create a highly cartographic quality accessibility map for eldercare centres in Singapore.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\ntm_shape(hexagon_Hansen,\n         bbox = mapex) + \n  tm_fill(col = \"accHansen\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: Hansen method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 3) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.2, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-16-1.png){width=1152}\n:::\n:::\n\n\n\n### Statistical graphic visualisation\n\nIn this section, it will compare the distribution of Hansen's accessibility values by URA Planning Region.\n\nThe planning region field will be added into *haxegon_Hansen* simple feature data frame by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagon_Hansen <- st_join(hexagon_Hansen, mpsz, \n                          join = st_intersects)\n```\n:::\n\n\n\nNext, *ggplot()* will be used to plot the distribution by using boxplot graphical method.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = hexagon_Hansen, \n       aes(y = log(accHansen), \n           x = REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\", \n             fun = \"mean\", \n             colour = \"darkred\", \n             size = 2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## Modelling and Visualising Accessibility using KD2SFCA Method\n\n### Computing KD2SFCA's accessibility\n\nThis section, repeats most of the steps done in the previous section to perform the analysis. However, some of the codes will be combined into a single code chunk.\n\nThe code chunk below calculates Hansen's accessibility using *ac()* of **SpatialAcc** and *data.frame()* is used to save the output in a data frame called `acc_KD2SFCA`. Notice that `KD2SFCA` is used for the family argument.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_KD2SFCA <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            d0 = 50,\n                            power = 2, \n                            family = \"KD2SFCA\"))\n\ncolnames(acc_KD2SFCA) <- \"accKD2SFCA\"\nacc_KD2SFCA <- tibble::as_tibble(acc_KD2SFCA)\nhexagon_KD2SFCA <- bind_cols(hexagons, acc_KD2SFCA)\n```\n:::\n\n\n\n### Visualising KD2SFCA's accessibility\n\nThe code chunk below uses a collection of mapping fucntions of tmap package to create a high cartographic quality accessibility plot to eldercare centres in Singapore. Notice that `mapex` is reused for *bbox* argument.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\ntm_shape(hexagon_KD2SFCA,\n         bbox = mapex) + \n  tm_fill(col = \"accKD2SFCA\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: KD2SFCA method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type = \"radar\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-20-1.png){width=1152}\n:::\n:::\n\n\n\n### Statistical graphic visualisation\n\nNow, to compare the distribution of KD2CFA accessibility values by URA Planning Region.\n\nSimilar to the earlier section, to add the planning region field into *hexagon_KD2SFCA* simple feature data frame by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagon_KD2SFCA <- st_join(hexagon_KD2SFCA, mpsz, \n                          join = st_intersects)\n```\n:::\n\n\n\nNext, `ggplot(`) will be used to plot the distribution by using boxplot graphical method.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = hexagon_KD2SFCA, \n       aes(y = accKD2SFCA, \n           x = REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\",\n             fun = \"mean\", \n             colour = \"darkred\", \n             size = 2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n## Modelling and Visualising Accessibility using Spatial Accessibility Measure (SAM) Method\n\n### Computing SAM accessibility\n\nSimilarly for this section, it repeats most of the steps in previous section to perform the analysis. Some of the codes will also be combined into one code chunk.\n\nThe code chunk below calculates Hansen's accessibility using *ac()* of **SpatialAcc** and *data.frame()* is used to save the output in a data frame called `acc_SAM`. Notice that `SAM` is used for family argument.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_SAM <- data.frame(ac(hexagons$demand,\n                         eldercare$capacity,\n                         distmat_km, \n                         d0 = 50,\n                         power = 2, \n                         family = \"SAM\"))\n\ncolnames(acc_SAM) <- \"accSAM\"\nacc_SAM <- tibble::as_tibble(acc_SAM)\nhexagon_SAM <- bind_cols(hexagons, acc_SAM)\n```\n:::\n\n\n\n### Visualising SAM's accessibility\n\nThe code chunk below uses a collection of mapping functions of tmap package to create a high cartographic quality accessibility plot to eldercare centres in Singapore. Notice that `mapex` is reused for *bbox* argument in this coder chunk.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\ntm_shape(hexagon_SAM,\n         bbox = mapex) + \n  tm_fill(col = \"accSAM\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: SAM method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 3),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type = \"4star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-24-1.png){width=1152}\n:::\n:::\n\n\n\n### Statistical graphic visualisation\n\nNow, to compare the distribution of SAM accessibility values by URA Planning Region.\n\nFirstly, we need to add the planning region field into *hexagon_SAM* simple feature data frame by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagon_SAM <- st_join(hexagon_SAM, mpsz, \n                       join = st_intersects)\n```\n:::\n\n\n\nNext, `ggplot()` will be used to plot the distribution by using boxplot graphical method.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = hexagon_SAM, \n       aes(y = accSAM, \n           x = REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\", \n             fun = \"mean\", \n             colour = \"darkred\", \n             size = 2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex09_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}