{
  "hash": "6bbc12fbf9b1071d47218940066fd76e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 9: Modelling Geographical Accessibility\"\nauthor: \"Ho Zi Jun\"\ndate: \"Oct 24, 2024\"\ndate-modified: \"last-modified\"\nnumber-sections: true\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\neditor: source\n---\n\n\n\n\n\n## Overview\n\nThis exercise provides practical experience in modeling geographical accessibility using Râ€™s geospatial analysis packages.\n\n### Learning Outcomes\n\nBy the end of this hands-on exercise, we will be able:\n\n-   to import GIS polygon data into R and save them as simple feature data frame by using appropriate functions of sf package of R;\n-   to import aspatial data into R and save them as simple feature data frame by using appropriate functions of sf package of R;\n-   to computer accessibility measure by using Hansen's potential model and Spatial Accessibility Measure (SAM); and\n-   to visualise the accessibility measures by using tmap and ggplot2 packages.\n\n## The data\n\nFour data sets will be used in this hands-on exercise, they are:\n\n-   `MP14_SUBZONE_NO_SEA_PL`: URA Master Plan 2014 subzone boundary GIS data. This data set is downloaded from data.gov.sg.\n\n-   `hexagons`: A 250m radius hexagons GIS data. This data set was created by using [*st_make_grid()*](https://r-spatial.github.io/sf/reference/st_make_grid.html) of sf package. It is in ESRI shapefile format.\n\n-   `ELDERCARE`: GIS data showing location of eldercare service. [This data](https://data.gov.sg/dataset/eldercare-services) is downloaded from data.gov.sg. There are two versions. One in ESRI shapefile format. The other one in Google kml file format. For the purpose of this hands-on exercise, ESRI shapefile format is provided.\n\n-   `OD_Matrix`: a distance matrix in csv format. There are six fields in the data file. They are:\n\n    -   `origin_id`: the unique id values of the origin (i.e. `fid` of hexagon data set.),\n    -   `destination_id`: the unique id values of the destination (i.e. `fid` of `ELDERCARE` data set.),\n    -   `entry_cost`: the perpendicular distance between the origins and the nearest road),\n    -   `network_cost`: the actual network distance from the origin and destination,\n    -   `exit_cost`: the perpendicular distance between the destination and the nearest road), and\n    -   `total_cost`: the summation of `entry_cost`, `network_cost` and `exit_cost`.\n\nAll the values of the cost related fields are in **metres**.\n\n::: callout-warning\n## Reminder: \n*Except `MP14_SUBZONE_NO_SEA_PL` data set, the other three data sets are specially prepared by Prof. Kam for teaching and research purposes. Please obtain formal approval from if you want to use them for other courses or usage.*\n:::\n\n## Getting Started\n\nFirstly, to install the necessary R packages and launch them into R Studio environment.\n\nThe R packages needed for this exercise are as follows:\n\n-   Spatial data handling\n    -   **sf**\n-   Modelling geographical accessibility\n    -   **spatialAcc**\n-   Attribute data handling\n    -   **tidyverse**, especially readr and dplyr\n-   thematic mapping\n    -   **tmap**\n-   Statistical graphic\n    -   **ggplot2**\n-   Statistical analysis\n    -   **ggstatsplot**\n\nThe code chunk below installs and launches these R packages into R Studio environment.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tmap, SpatialAcc, sf, ggstatsplot,\n               reshape2, tidyverse)\n```\n:::\n\n\n\n\n\n> With tidyverse, we do not have to install readr, dplyr and ggplots packages separately. In fact, tidyverse also installs other R packages such as tidyr, stringr, forcats, tibble, purrr and magrittr.\n\n## Geospatial Data Wrangling\n\n### Importing geospatial data\n\nThree geospatial data sets will be imported from the *data/geospatial* sub-folder. They are `MP14_SUBZONE_NO_SEA_PL`, `hexagons` and `ELDERCARE`.\n\nThe code chunk below is used to import these three data sets in shapefile format by using *st_read()* of **sf** packages.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_NO_SEA_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\nhexagons <- st_read(dsn = \"data/geospatial\", layer = \"hexagons\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `hexagons' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3125 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21506.33 xmax: 50010.26 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n\n```{.r .cell-code}\neldercare <- st_read(dsn = \"data/geospatial\", layer = \"ELDERCARE\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `ELDERCARE' from data source \n  `C:\\zjho008\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 120 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n:::\n\n\n\n\n\nThe results above shows that the R object used to contain the imported `MP14_SUBZONE_WEB_PL` shapefile is called *mpsz* and it is a simple feature object. The geometry type is *multipolygon*. it is also important to note that *mpsz* simple feature object does not have an EPSG information.\n\n### Updating CRS information\n\nThe code chunk below updates the newly imported data sets with the correct ESPG code (i.e. 3414)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_transform(mpsz, 3414)\neldercare <- st_transform(eldercare, 3414)\nhexagons <- st_transform(hexagons, 3414)\n```\n:::\n\n\n\n\n\nAfter transforming the projection metadata, we can confirm the new projection for *mpsz* using `st_crs()` from the sf package. The code below provides a check on the transformed *mpsz* projection.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}