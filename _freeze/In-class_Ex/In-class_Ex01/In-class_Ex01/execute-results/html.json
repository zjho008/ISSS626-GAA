{
  "hash": "0f44e124d9943d8e1dceb139635807e5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 1\"\nauthor: Ho Zi Jun\ndate: \"Aug 26, 2024\"\ndate-modified: \"last-modified\"\nnumber-sections: true\nnumber-offset: 0\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\neditor: visual\n---\n\n\n# Geospatial Data Wrangling with R\n\n## Getting Started\n\nTHe following 4 R packages will be used for this in-class exercise:\n\n-   **sf** for importing, managing, and processing geospatial data,\n-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data,\n-   **tmap** to plot functional and truthful choropleth maps, and\n-   **ggstatsplot** for creating graphics with details from statistical tests.\n\n*Tidyverse* consists of a family of R packages. In this hands-on exercise, the following packages will be used:\n\n-   **readr** for importing csv data,\n-   **readxl** for importing Excel worksheet,\n-   **tidyr** for manipulating data,\n-   **dplyr** for transforming data, and\n-   **ggplot2** for visualising data\n\n::: callout-note\nThie code chunk below uses `p_load()` of pacman package to check if `sf` and `tidyverse` packages are installed in the computer. If they are, then they will be launched into R.\n:::\n\n## The code\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse, tmap, ggstatsplot)\n```\n:::\n\n\n## The Data\n\n### Master Plan 2014 Subzone Boundary Web\n\nthe `st_read()` function of **sf** package is used to import MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz14_shp = st_read(dsn = \"data/\", \n  layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\zjho008\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\nUsing the `class()` function, the code chunk below tells us that it is a simple feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(mpsz14_shp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n:::\n\n\nThis code chunk imports the kml file\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mpsz14_kml <- st_read(\"data/MasterPlan2014SubzoneBoundaryWebKML.kml\")\n```\n:::\n\n\n::: callout-warning\nAfter running the code, an error message is shown stating that the file cannot be opened. This is likely due to an issue with file structure resulting in file being unable to be opened.\n:::\n\n## Working with Master Plan 2014 Subzone Boundary Web file - Attempt\n\n`st_write()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_write(mpsz14_shp,\n         \"data/MP14_SUBZONE_WEB_PL.kml\",\n          delete_dsn = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting source `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting layer `MP14_SUBZONE_WEB_PL' to data source \n  `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n```\n\n\n:::\n:::\n\n\n::: callout-note\nWith the code chunk above the file in kml format is created. The `delete_dsn` argument is to overwrite the old file and replace with the new file with same file name.\n:::\n\n## Working with Master Plan 2019 Subzone Boundary Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_kml <- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\zjho008\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n![](data/kml.png)\n\nUpon some initial observation - kml version is not very tidy\n\n## Handling Coordinate Systems\n\n### Transforming coordinate system\n\nFor this section an updated version of the data published in 2019 will be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp = st_read(dsn = \"data/\", \n                     layer = \"MPSZ-2019\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\zjho008\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n### Rationale\n\nThe Master Plan 2019 Subzone Boundary Data was in the Geographical Coordinate System - WGS84.\n\nA viable option to check the geometry if its is in: 0 - 180 / 0 - 360 likely in WGS coordinate system.\n\nFor the code chunk above, pipe is utilised since we are using sf.\n\nAfter transformation (re-projection) observed from geometry that now it is in metres\n\n![](data/transform.png)\n\n## In-class sharing\n\nComparing excel(due to heading & blank spaces & asteris) vs csv file (better for analysis). CSV seems to be the more viable option for analysis as it has no un-necessary structure.\n\n## Working with population data\n\n> **The Task**: To visit and extract the latest Singapore Residents by Planning Area / Subzone, Age, Group, Sex and Type of Dwelling from Singstat.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/respopagesextod2023.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nWrangling of data to be done in order to derive the groups: YOUNG, ACTIVE, ECONOMY ACTIVE\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup() %>%\n  pivot_wider(names_from = AG,\n              values_from = POP)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\nCode was split to observe the steps - one at a time. Will aggregate does not differentiate male/female.\n\npivot wider portion - will compute and bring multiple columns based on age.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(popdata2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n```\n\n\n:::\n:::\n\n## Data Processing\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata2023 %>%\n  mutate(YOUNG = rowSums(.[, 3:6]) + rowSums(.[, 14])) %>%  # Aged 0-24, 10-24 + Aged 5-9\n  mutate(`ECONOMY ACTIVE` = rowSums(.[, 7:13]) + rowSums(.[, 15])) %>%  # Aged 25-59 + Aged 60-64\n  mutate(AGED = rowSums(.[, 16:21])) %>%  # Aged 65 and above\n  mutate(TOTAL = rowSums(.[, 3:21])) %>%  # Total population\n  mutate(DEPENDENCY = (YOUNG + AGED) / `ECONOMY ACTIVE`) %>%  # Dependency ratio\n  select(PA, SZ, YOUNG, `ECONOMY ACTIVE`, AGED, TOTAL, DEPENDENCY)\n```\n:::\n\n\n+rowSums should not be 12 (as attempted in Hands-On Exercise) but its 14. \n\nWe use `glimpse()` function take a look at the updated popdata2023 data-frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(popdata2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 332\nColumns: 7\n$ PA               <chr> \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio…\n$ SZ               <chr> \"Ang Mo Kio Town Centre\", \"Cheng San\", \"Chong Boon\", …\n$ YOUNG            <dbl> 1240, 5150, 4620, 4320, 1840, 3810, 1870, 3750, 0, 10…\n$ `ECONOMY ACTIVE` <dbl> 2830, 15600, 14120, 12400, 3670, 9600, 4320, 11090, 0…\n$ AGED             <dbl> 890, 6580, 7060, 5640, 1420, 4320, 1790, 5390, 0, 880…\n$ TOTAL            <dbl> 4960, 27330, 25800, 22360, 6930, 17730, 7980, 20230, …\n$ DEPENDENCY       <dbl> 0.7526502, 0.7519231, 0.8271955, 0.8032258, 0.8882834…\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}