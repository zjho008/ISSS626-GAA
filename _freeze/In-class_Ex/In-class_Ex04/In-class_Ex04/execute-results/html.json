{
  "hash": "d5eb10147d39ab3d4e6ed63d3a92db6d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 4\"\nauthor: Ho Zi Jun\ndate: \"Sep 16, 2024\"\ndate-modified: \"last-modified\"\nnumber-sections: true\nnumber-offset: 3\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\neditor: visual\n---\n\n\n# Spatial Weights and Applications\n\n## Loading R packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse, knitr, GWmodel, ggstatsplot)\n```\n:::\n\n\n## Additional Package\n\n[GWmodel](https://cran.r-project.org/web/packages/GWmodel/index.html)\n\n[Package `GWmodel`](https://cran.r-project.org/web/packages/GWmodel/GWmodel.pdf)\n\nFocus is on the Geographically weighted summary statistics (GWSS)\n\nWhich helps to determine the optimal cut-off metrics\n\nbw.gwr - e.g. look into data and recommend appropriate bandwidth for cut off adaptive - optimum number of neighbours for statistical significance.\n\n## Data Import and Preparation\n\nFor this in-class exericse, Hunan shp file will be used to\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `C:\\zjho008\\ISSS626-GAA\\In-class_Ex\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nNote CRS is not defined when importing the data and the CRS is WGS84.\n\n## Importign the Hunan_2012 table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nNote: read_csv() is from the tidyverse package\n\n### Joining Hunan and Hunan_2012\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- left_join(hunan_sf ,hunan2012) %>%\n  select(1:3, 7, 15, 16, 31, 32)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(County)`\n```\n\n\n:::\n:::\n\n\nNAME_2, ID_3, NAME_3 (name of county), COUNTY, GDP, 26 - GIO, 31- Agri, 32- Service\n\nA selection is done in the code chunk above to select variables that will be used for analysis\n\nfor relational joins there has to be a common identifier - values have to be identical\n\n> Good practice: to check through the name and the values/fields to ensure they are the same before performing the join. In this case from observation County has the same variable name. For this exercise the COUNTY variable was added into the hunan_2012 dataset. Otherwise, NAME_3 will have to be used and argument `JOIN_BY()` has to be used.\n\nE.g. the website from URA code to convert from mix of upper case and lower case (data from singstat) to all upper case before joining with the URA data\n\n## Converting to SpatialPolygon Data.Frame\n\nTo use GWmodel the file has to be converted from SF to SP\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sp <- hunan_sf %>%\n  as_Spatial()\n```\n:::\n\n\nA list is given instead of a data table.\n\n> class(hunan_sp) \\[1\\] \"SpatialPolygonsDataFrame\" attr(,\"package\") \\[1\\] \"sp\"\n\n## Geographically Weighted Summary Statistics with adaptative bandwidth\n\n### Determining adaptive bandwidth\n\n::: panel-tabset\n## Cross Validation - \"taking one out and putting one back\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1, # arbitrary number 1 as independent variable\n             data = hunan_sp, # hunan data\n             approach = \"CV\", # cross validation is used\n             adaptive = TRUE,\n             kernel = \"bisquare\",\n             longlat = T) # value taken in is in KM\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n```\n\n\n:::\n:::\n\n\nThe score will eventually stop and the optimal number of neighbour is 22. This is also the same result if AIC is used. However, note that this will not always be the case for both approaches. \\## AIC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1, \n             data = hunan_sp, \n             approach = \"AIC\", \n             adaptive = TRUE,\n             kernel = \"bisquare\",\n             longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n```\n\n\n:::\n:::\n\n\nchange rate will stop and that is where the optimal value is determined Statistical method\n:::\n\n## Geographically Weighted Summary Statistics with fixed bandwidth\n\n### Determining fixed bandwidth\n\n::: panel-tabset\n## Cross Validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1,\n             data = hunan_sp,\n             approach = \"CV\",\n             adaptive = FALSE,\n             kernel = \"bisquare\",\n             longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n```\n\n\n:::\n:::\n\n\nValue is in KM - 76 KM \\## AIC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1, \n             data = hunan_sp, \n             approach = \"AIC\", \n             adaptive = FALSE,\n             kernel = \"bisquare\",\n             longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n```\n\n\n:::\n:::\n\n:::\n\nWhen using different methods some would give the same answwer while some would give a different answer. So it is a good practice to test out the different methods\n\nIn this case the adaptive method is better as the Cross Validation and AIC gives the same output.\n\n## Geographically Weighted Summary Statistics with adaptative bandwidth\n\n### Computing geographically weighted summary statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1, \n             data = hunan_sp, \n             approach = \"AIC\", \n             adaptive = TRUE,\n             kernel = \"bisquare\",\n             longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw_AIC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat <- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)\n```\n:::\n\n\n> Note: that the Kernel, Adaptive and Longlat have to remain the same when doing the calulation\n\n### Preparign the output data\n\nCode chunk below is used to extract **SDF** data table from **gwss** object output from `gwss()`. It will be converted into data.frame by using `as.data.frame()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df <- as.data.frame(gwstat$SDF)\n```\n:::\n\n\nNext, `cbin*d()` is used to append the newly derived data.frame onto *hunan_sf* sf data.frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_gstat <- cbind(hunan_sf, gwstat_df)\n```\n:::\n\n\n::: panel-tabset\n## The Geographhically Weighted Mean\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nShowing growth at the main cities first whereas the rural areas see slower growth - which is commonly observed in developing countries.\n## The code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_gstat) +\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) + # or tm_polygons\n  tm_layout(main.title = \"distribution of geogrpahically weighted mean\",\n            main.title.position = \"centre\",\n            main.title.size = 2.0,\n            legend.title.size = 1.2,\n            legend.height = 1.50,\n            legend.width = 1.50,\n            frame = TRUE)\n```\n:::\n\n:::\n\n## Geogrpahically Weighted Correlation with Adaptive bandwidth\n\n> Business Question: Is there any relationship between GDP per capita and Gross Industry Output?\n\n## Conventional Statistical Solution\n\n::: {.cell}\n\n:::\n\n\nFrom the p-value there is a relatively strong correlation and statistical significance.\n\nCertain areas not as highly correlated with neighbours while others are more correlated - Geographic view vs statistical solution view.\n\ngwCorr - 0.750 to 0.761 \n\nThe 1st band not as correlated with its neighbours \n\nLocal correlation can also be shown \n\n\n::: {.cell}\n\n:::\n\n\n\n### Computing gwCorrelation\n\n\n::: {.cell}\n\n:::\n\n\ncolumn 12 and 13 selected where we see the correlation coefficient. \n",
    "supporting": [
      "In-class_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}