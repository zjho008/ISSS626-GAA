---
title: "Take-home Exercise 2: Geospatial Analytics in Thailand Tourism Sector (Pre, During, Post COVID-19)"
author: "Ho Zi Jun"
date: "Sep 30, 2024"
date-modified: "last-modified"
number-sections: true
number-offset: 1
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
editor: source
---

# Overview

Tourism plays a significant role in Thailand's economy, contributing about 20% of the country's GDP. In 2019, Thailand generated 90 billion USD from both domestic and international tourism, but the COVID-19 pandemic led to a drastic drop in revenues down to 24 billion USD in 2020.

The figure below illustrates the total revenue from the tourism sector from January 2019 to February 2023, highlighting a gradual recovery in tourism revenue starting in September 2021.

![](images/th_ex2_img1.png)

Nonetheless, it is important to point out that the tourism economy of Thailand does not have an even distribution. The figures below illustrate that the tourism economy of Thailand mainly revolves around 5 provinces: Bangkok, Phuket, Chiang Mai, Sukhothai & Phetchaburi.

![](images/th_ex2_img2.png)

The main aim of this initiative is to discover the impacts of COVID-19 on Thailand's tourism economy using spatial and spatio-temporal statistics.

## The Task

The objectives are to explore the following:

-   Whether the key indicators of Thailand's tourism economy are independent of spatial and spatio-temporal factors.
-   If dependencies exist, aim to identify the clusters, outliers, and emerging hot or cold spots within the tourism economy.

The specific tasks for this exercise are:

-   Using appropriate sf and tidyverse functions, prepare the following geospatial data layers:
    -   A study area layer in sf polygon format, covering [provinces in Thailand](https://en.wikipedia.org/wiki/Provinces_of_Thailand), including Bangkok.
    -   A tourism economy indicators layer for the study area in sf polygon format.
    -   A derived tourism economy indicator layer in the [spatio-temporal s3 class of sfdep](https://sfdep.josiahparry.com/articles/spacetime-s3), with a monthly and yearly time series.
-   Using the extracted data, conduct the following analyses using sfdep methods:
    -   Global spatial autocorrelation analysis
    -   Local spatial autocorrelation analysis
    -   Emerging hotspot analysis
-   Describe the spatial patterns identified through these analyses.

## Getting Started

### Installing and Loading the R Packages

The following R packages will be launched into the R environment using `p_load()` from **pacman package** below.

The R packages needed for this exercise are as follows:

1.  Spatial data handling
    -   **sf**, **spdep** and **sfdep**
2.  Attribute data handling
    -   **tidyverse**, especially **readr**, **ggplot2** and **dplyr**
3.  Choropleth mapping
    -   **tmap**

```{r}
pacman::p_load(sf, spdep, sfdep,tmap,
               tidyverse, plotly, Kendall)
set.seed(1234) # setting seed to ensure reproducibility
```

## The Data

For this exercise, two data sets will be utilised. They are:

-   [Thailand Domestic Tourism Statistics](https://www.kaggle.com/datasets/thaweewatboy/thailand-domestic-tourism-statistics) at Kaggle.
-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) at HDX. the province boundary data set is used for this exercise.

### Loading the Attribute Data

There are 2 versions of this dataset `thailand_domestic_tourism_2019_2023.csv` & `thailand_domestic_tourism_2019_2023_ver2.csv`. Version 2 will be used for this exercise. The csv file will be imported using `read_csv` function of **readr** package.

```{r}
tourism_stats <- read_csv("data/aspatial/thailand_domestic_tourism_2019_2023_ver2.csv") 
```

`glimpse()` is used to have a brief overview of the data. This will enable us to see the columns and their respective data types.

```{r}
glimpse(tourism_stats)
```

#### Data Dictionary for Attribute Data

This dataset contains statistics on tourism in Thailand from Jan 2019 to Feb 2023, broken down by province. The dataset includes information on the number of `tourists`, the `occupancy rate`, and the `profits generated by tourism` in each `province`, as well as the

Sourced from raw data provided by the [Official Ministry of Tourism and Sports Statistics](https://www.mots.go.th/news/category/411), which was manually entered into Excel files.

The author has pre-processed the data using Python with the intention of making it more accessible in the appropriate format which has the potential to provide valuable insights into the domestic tourism industry in Thailand, including trends and patterns across different provinces over time. Researchers, analysts, and policy-makers with an interest in the domestic tourism sector in Thailand may find this dataset useful for their work. Source: ([Thailand Domestic Tourism Statistics by Thaweewat R](https://www.kaggle.com/datasets/thaweewatboy/thailand-domestic-tourism-statistics/data))

The description for some of the variables have been re-phrased for a more accurate alignment of understanding in line with the variables.

| Column | Description |
|:------------------------------|:----------------------------------------|
| *date* | The month and year in which the statistics were recorded. The dataset covers the years 2019-2023. |
| *province_thai* | The name of the province in Thailand, in the Thai language. |
| *province_eng* | The name of the province in Thailand, in English. |
| *region_thai* | The name of the region in Thailand to which the province belongs, in the Thai language. |
| *region_eng* | The name of the region in Thailand to which the province belongs, in English. |
| *variable* | The 8 types of data being recorded, such as the number of tourists or the occupancy rate. |
|  | `no_tourist_all` The total number of tourists (domestic & foreign) who visited the province |
|  | `no_tourist_foreign` The number of foreign tourists who visited the province |
|  | `no_tourist_thai` The number of Thai tourists (domestic) who visited the province |
|  | `no_tourist_occupied` -\> `no_tourist_stay` The total number of occupied hotel rooms in the province |
|  | `occupancy_rate` -\> `ratio_tourist_stay` The percentage of occupied travel accommodation in the province |
|  | `revenue_all` The revenue generated by the tourism industry in the province, in Thai Baht |
|  | `revenue_foreign` The revenue generated by foreign tourists in the province, in Thai Baht |
|  | `revenue_thai` The revenue generated by Thai tourists in the province, in Thai Baht |
| *value* | The value of the data being recorded. |

: R Packages {.striped .hover tbl-colwidths="\[25,75\]"}

From the description above, we can identify the columns to be selected for analysis. For this exercise, the columns: `date`, `province_eng`, `variable` and `value` will be selected.

#### Data Integrity Checks

The two following code chunks are utilised to check for any duplicated or missing values in each column

```{r}
any(duplicated(tourism_stats))
```

```{r}
sum(is.na(tourism_stats))
```

The results above tell us that there are no duplicated and missing values.

#### Data Preparation

The relevant columns that will be used for analysis are then selected using the code chunk below.Additionally, the `province_eng` column will be renamed to `province` since we are only taking this particular column and not the column labelled `province_thai`.

```{r}
tourism_stats_selected <- tourism_stats %>%
  select(date, province_eng, variable, value) %>%
  rename(province = province_eng)
```

```{r}
# Grouping by province and year, then summarizing total tourist count
tourism_stats_grouped <- tourism_stats %>%
  group_by(province_eng, variable) %>%
  rename(province = province_eng) %>%
  summarise(total_value = sum(value, na.rm = TRUE))
```

#### Exploratory Data Analysis (EDA)

Exploratory data analysis (EDA) will be carried out in this section using statistical graphic functions of **ggplot2** package. The variables are plotted to get a sense of the distribution.

##### Revenue

```{r}
tourism_stats_selected %>%
  filter(variable == "revenue_all") %>% 
  ggplot(aes(value,fill = variable)) +
  geom_histogram(bins = 20) +
  theme(legend.position="none")
```

It can be observed that the revenue generated by tourism is right skewed as such in can also be interpreted that a number of provinces are the ones generating majority of the revenue for Thailand's tourism.

::: panel-tabset
## Domestic Tourism

```{r}
tourism_stats_selected %>%
  filter(variable == "revenue_thai") %>% 
  ggplot(aes(value,fill = variable)) +
  geom_histogram(bins = 20) +
  theme(legend.position="none")
```

## Foreign Tourism

```{r}
tourism_stats_selected %>%
  filter(variable == "revenue_foreign") %>% 
  ggplot(aes(value,fill = variable)) +
  geom_histogram(bins = 20) +
  theme(legend.position="none")
```
:::

Similarly, when looking at domestic and foreign tourism revenue individually the plots are also showing a right skew.

##### Occupancy rate (`ratio_tourist_stay`)

```{r}
tourism_stats_selected %>%
  filter(variable == "ratio_tourist_stay") %>% 
  ggplot(aes(value,fill = variable)) +
  geom_histogram(bins = 20) +
  theme(legend.position="none")
```

##### Total number of tourists

```{r}
tourism_stats_selected %>%
  filter(variable == "no_tourist_all") %>% 
  ggplot(aes(value,fill = variable)) +
  geom_histogram(bins = 20) +
  theme(legend.position="none")
```

From the above histogram plots, the variables of revenue generated by tourism and total number of tourists are right-skewed which can be interpreted as the vast majority of data points being concentrated near zero. This is indeed consistent with the table shown in the overview where a few provinces in Thailand dominate tourist visits and revenue while most of the other provinces contribute less.

For `ratio_tourist_stay` the histogram appears to be relatively symmetric with a slight skew to the right.

### Loading the Geospatial Data (Thailand - Subnational Administrative Boundaries)

The code chunk below is used to import the Sub-national Administrative Boundaries of Thailand. Level 1 will be used as it represents the province boundary as seen in the HDX website.

![](images/level1.png)

```{r}
thadmin <- st_read(dsn = "data/geospatial", 
                   layer = "tha_admbnda_adm1_rtsd_20220121")
```

The message above reveals that the geospatial objects are multi-polygon features. There are a total of 77 multipolygon feature representing the different provinces in Thailand and 16 fields in thadmin (Thailand Administrative) simple feature data frame. `thadmin` is in WGS84 Geodetic coordinates system. The bounding box provides the x extend and y extend of the data.

To learn more about the simple features object, we can apply `glimpse()` of dplyr package.

```{r}
glimpse(thadmin)
```
#### Renaming of column

For ease of reference similar to what was done with the attribute data, `ADM1_EN` is renamed to `province`.

```{r}
thadmin <- thadmin %>%
  rename(province = ADM1_EN)
```

#### Setting of Coordinate reference system (CRS)

In this step,  `st_crs()` function of the sf package will be utilised to check the CRS information. If the CRS is not reflecting 32647, the EPSG code of Thailand `st_transform()` function can be used to transform the EPSG code.

::: callout-note
The projected coordinate system of Thailand is WGS 84 / UTM zone 47N and the EPSG code is [32647](https://epsg.io/32647#google_vignette).
:::

```{r}
st_crs(thadmin)
```

From the results above, we can see that the EPSG is 4326. Hence, `st_transform()` will be used to perform transformation.

```{r}
thadmin <- st_transform(thadmin, crs =32647)
```

`st_crs()` will be used for confirmation if the transformation has been done correctly.

```{r}
st_crs(thadmin)
```

#### Selecting Required Fields

![](images/thadmin.png)

Column 3 (province) and 17 (geometry) will be selected as the relevant columns.

```{r}
thadmin <- thadmin %>%
  select(3, 17)
```

#### Data Inconsistency

Upon running through some observations with the `thadmin` simple feature data frame with `thai_tourism` it is observed that there are inconsistencies in the naming terminologies of the provinces.

![](images/inconsistent.png)

```{r}
HDX_province_names <- unique(thadmin$province)
HDX_province_names
```

```{r}
kaggle_province_names <- unique(tourism_stats_grouped$province)
kaggle_province_names
```

| tourism_stats   | thadmin          |
|:----------------|:-----------------|
| Lopburi         | Lop Buri         |
| Chainat         | Chai Nat         |
| Chonburi        | Chon Buri        |
| Prachinburi     | Prachin Buri     |
| Phang Nga       | Phangnga         |
| Sisaket         | Si Sa Ket        |
| Buriram         | Buri Ram         |
| Nong Bua Lamphu | Nong Bua Lam Phu |

: R Packages {.striped .hover tbl-colwidths="\[25,75\]"} Nong Bua Lam Phu

On the right side of the table are the 8 provinces from `thadmin` that are inconsistent with the naming conventions from `tourism_stats`

The `gsub()` function from Base R will be used to for string substitution to modify the provinces that are not consistent. The naming convention from `tourism_stats` will be used.

```{r}
# Create a vector of old and new province names
rename <- c("Lopburi", "Chainat", "Chonburi", "Prachinburi", "Phang Nga", "Sisaket", "Buriram", "Nong Bua Lamphu")
old_names <- c("Lop Buri", "Chai Nat", "Chon Buri", "Prachin Buri", "Phangnga", "Si Sa Ket", "Buri Ram", "Nong Bua Lam Phu")

# Loop through the old and new names and apply gsub for each replacement
for(i in seq_along(old_names)) {
  thadmin$province <- gsub(old_names[i], rename[i], thadmin$province)
}

# Check the updated province names
head(thadmin$province, n = 77)

```

#### Relational Join

The code chunk below is used to join the aspatial and geospatial data by using the `left_join()` function.

```{r}
thailand_tourism <- left_join(thadmin,
                              tourism_stats_grouped, by = c("province" = "province"))
```

#### Saving rds files

In the following code chunk, `write_rds()` of **readr** package is used to save the extracted attribute data `thailand_tourism` into an output file in rds format. The output file is saved in the rds folder.

```{r}
write_rds(thailand_tourism,
          "data/rds/thailand_tourism.rds")
```

The **saved file** can then be retrieved using the code chunk below:

```{r}
thailand_tourism <- read_rds("data/rds/thailand_tourism.rds")
```

## Visualising the Indicators of tourism economy of Thailand

### Visualising Number of Tourists Variable

A basemap will be prepared to show the distribution of the **number of tourists** in the provinces of Thailand.

```{r}
#| fig-width: 8
#| fig-height: 10

basemap <- tm_shape(thailand_tourism) +
  tm_polygons() +
  tm_text("province", size = 0.5)

basemap
```

#### All Tourists

```{r}
#| fig-width: 8
#| fig-height: 10
all_tourists = thailand_tourism%>%
  filter(variable =='no_tourist_all')

basemap01 <- tm_shape(all_tourists) +
  tm_polygons(col = "total_value", palette = "Oranges", style='quantile') +
  tm_text("province", size = 0.5)

basemap01
```

#### Foreign Tourists

```{r}
#| fig-width: 8
#| fig-height: 10
foreign_tourists = thailand_tourism%>%
  filter(variable =='no_tourist_foreign')

basemap02 <- tm_shape(foreign_tourists) +
  tm_polygons(col = "total_value", palette = "Oranges", style='quantile') +
  tm_text("province", size = 0.5)

basemap02
```

#### Domestic Tourists

```{r}
#| fig-width: 8
#| fig-height: 10
domestic_tourists = thailand_tourism%>%
  filter(variable =='no_tourist_thai')

basemap03 <- tm_shape(domestic_tourists) +
  tm_polygons(col = "total_value", palette = "Oranges", style='quantile') +
  tm_text("province", size = 0.5)

basemap03
```

### Visualising Revenue Variable

#### All Revenue

```{r}
#| fig-width: 8
#| fig-height: 10
all_revenue = thailand_tourism%>%
  filter(variable =='revenue_all')

basemap1 <- tm_shape(all_revenue) +
  tm_polygons(col = "total_value", palette = "Greens", style='quantile') +
  tm_text("province", size = 0.5)

basemap1
```


#### Foreign Revenue

```{r}
#| fig-width: 8
#| fig-height: 10
foreign_revenue = thailand_tourism%>%
  filter(variable =='revenue_foreign')

basemap2 <- tm_shape(foreign_revenue) +
  tm_polygons(col = "total_value", palette = "Greens", style='quantile') +
  tm_text("province", size = 0.5)

basemap2
```

#### Domestic Revenue

```{r}
#| fig-width: 8
#| fig-height: 10
thai_revenue = thailand_tourism%>%
  filter(variable =='revenue_thai')

basemap3 <- tm_shape(thai_revenue) +
  tm_polygons(col = "total_value", palette = "Greens", style='quantile') +
  tm_text("province", size = 0.5)

basemap3
```

## Spatial Weights and Applications

In this section, [poly2nb()](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area.

### Computing (QUEEN) contiguity based neighbours

The code chunk below is used to compute Queen contiguity weight matrix for revenue.

::: panel-tabset

## Revenue Generated by Tourism

```{r}
wm_q <- poly2nb(all_revenue, queen=TRUE)
summary(wm_q)
```
The summary report above shows that there are 77 area units in Thailand which represent the provinces. There are 2 most connected area units eacah with 9 neighbours. There is only 1 area unit with only one neighbour.

For each polygon in our polygon object, wm_q lists all neighbouring polygons. For example, to see the neighbours for the 51 polygon in the object, type:

```{r}
all_revenue$province[51]
```
The output reveals that Polygon ID = 51 is Tak province.

To reveal the provinces of the nine neighbouring polygons, the code chunk will be used:

```{r}
all_revenue$province[c(19,20,25,28,30,31,33,35,55)]
```
We can retrieve the revenue of these nine provinces by using the code chunk below.

```{r}
nb51 <- wm_q[[51]]
nb51 <- all_revenue$total_value[nb51]
nb51
```

The printed output above shows that the revenue of the nine nearest neighbours based on Queen’s method are 260045700000, 4810760000, 13421950000, 14370950000, 12339730000, 4098740000, 4543780000, 8988760000 and 77869050000 respectively.

We can display the complete weight matrix by using `str()`.

```{r}
str(wm_q)
```

## Revenue Generated by Foreigners

```{r}
wm_q_foreign <- poly2nb(foreign_revenue, queen=TRUE)
summary(wm_q_foreign)
```

## Revenue Generated by Thais

```{r}
wm_q_thais <- poly2nb(thai_revenue, queen=TRUE)
summary(wm_q_thais)
```
:::

### Computing (ROOK) contiguity based neighbours

The code chunk below is used to compute Rook contiguity weight matrix.

```{r}
wm_r <- poly2nb(all_revenue, queen = FALSE)
summary(wm_r)
```

### Visualising contiguity weights

To create a connectivity graph for polygons, we first need to obtain points that represent each polygon. The most common method for this is to calculate the centroids of the polygons. Using the sf package in R, the centroid for each polygon can be calculated. However, rather than simply applying `st_centroid()` directly on the geometry column, the coordinates of these centroids need to be extracted into a separate data frame.

To achieve this, a mapping function will be used to apply `st_centroid()` to each polygon in the geometry column. The `map_dbl()` function from the purrr package will be used to handle this, as it applies a function to each element of a vector and returns a vector of the same length, which can then be used for further graph construction.

To get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(all_revenue$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude with one key difference. We access the second value per each centroid with [[2]].

```{r}
latitude <- map_dbl(all_revenue$geometry, ~st_centroid(.x)[[2]])
```

Now that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

We check the first few observations to see if things are formatted correctly.

```{r}
head(coords)
```
#### Plotting Queen contiguity based neighbours map

```{r}
plot(all_revenue$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

#### Plotting Rook contiguity based neighbours map

```{r}
plot(all_revenue$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### Plotting both Queen and Rook contiguity based neighbours maps

```{r}
par(mfrow=c(1,2))
plot(all_revenue$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(all_revenue$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### Computing distance based neighbours

In this section, it will derive distance-based weight matrices by using [`dnearneigh()`](https://r-spatial.github.io/spdep/reference/dnearneigh.html) of spdep package.

The function identifies neighbours of province points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

```{r}
wm_d_max <- dnearneigh(coords, 0, 19757, longlat = TRUE)
wm_d_max
```

```{r}
str(wm_d_max)
```

```{r}
table(all_revenue$province, card(wm_d_max))
```

```{r}
n_comp <- n.comp.nb(wm_d_max)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

```{r}
plot(all_revenue$geometry, border="lightgrey")
plot(wm_d_max, coords, add = TRUE)
plot(k1, coords, add = TRUE, col="blue", length=0.08)
```

